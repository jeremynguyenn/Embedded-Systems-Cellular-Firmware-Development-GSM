
12__Hardware_modules-rtc_init.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ee0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08002080  08002080  00012080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800216c  0800216c  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  0800216c  0800216c  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800216c  0800216c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800216c  0800216c  0001216c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002170  08002170  00012170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08002174  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e0  20000064  080021d8  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000644  080021d8  00020644  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000056df  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000fc6  00000000  00000000  00025773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000380  00000000  00000000  00026740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000308  00000000  00000000  00026ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010162  00000000  00000000  00026dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000037e9  00000000  00000000  00036f2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00056129  00000000  00000000  0003a713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0009083c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000160c  00000000  00000000  00090890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002068 	.word	0x08002068

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08002068 	.word	0x08002068

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__io_putchar>:

static uint16_t compute_uart_bd(uint32_t periph_clk,uint32_t baudrate);
static void debug_uart_write(int ch);

int __io_putchar(int ch)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	debug_uart_write(ch);
 8000288:	6878      	ldr	r0, [r7, #4]
 800028a:	f000 f87d 	bl	8000388 <debug_uart_write>
	return ch;
 800028e:	687b      	ldr	r3, [r7, #4]
}
 8000290:	4618      	mov	r0, r3
 8000292:	3708      	adds	r7, #8
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}

08000298 <debug_uart_init>:

void debug_uart_init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	/*1. Enable clock access to UART pins' GPIO port (GPIOA)*/
	RCC->AHB1ENR |= GPIOAEN;
 800029c:	4b36      	ldr	r3, [pc, #216]	; (8000378 <debug_uart_init+0xe0>)
 800029e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a0:	4a35      	ldr	r2, [pc, #212]	; (8000378 <debug_uart_init+0xe0>)
 80002a2:	f043 0301 	orr.w	r3, r3, #1
 80002a6:	6313      	str	r3, [r2, #48]	; 0x30

	/*2. Set PA2 mode to alternate function*/
	GPIOA->MODER &= ~(1U<<4);
 80002a8:	4b34      	ldr	r3, [pc, #208]	; (800037c <debug_uart_init+0xe4>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a33      	ldr	r2, [pc, #204]	; (800037c <debug_uart_init+0xe4>)
 80002ae:	f023 0310 	bic.w	r3, r3, #16
 80002b2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 80002b4:	4b31      	ldr	r3, [pc, #196]	; (800037c <debug_uart_init+0xe4>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a30      	ldr	r2, [pc, #192]	; (800037c <debug_uart_init+0xe4>)
 80002ba:	f043 0320 	orr.w	r3, r3, #32
 80002be:	6013      	str	r3, [r2, #0]

	/*3. Set PA3 mode to alternate function*/
	GPIOA->MODER &= ~(1U<<6);
 80002c0:	4b2e      	ldr	r3, [pc, #184]	; (800037c <debug_uart_init+0xe4>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a2d      	ldr	r2, [pc, #180]	; (800037c <debug_uart_init+0xe4>)
 80002c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80002ca:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 80002cc:	4b2b      	ldr	r3, [pc, #172]	; (800037c <debug_uart_init+0xe4>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a2a      	ldr	r2, [pc, #168]	; (800037c <debug_uart_init+0xe4>)
 80002d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002d6:	6013      	str	r3, [r2, #0]

	/*4.Set PA2 alternate function type to UART2_TX (AF07)*/
	GPIOA->AFR[0] |=(1U<<8);
 80002d8:	4b28      	ldr	r3, [pc, #160]	; (800037c <debug_uart_init+0xe4>)
 80002da:	6a1b      	ldr	r3, [r3, #32]
 80002dc:	4a27      	ldr	r2, [pc, #156]	; (800037c <debug_uart_init+0xe4>)
 80002de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002e2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 80002e4:	4b25      	ldr	r3, [pc, #148]	; (800037c <debug_uart_init+0xe4>)
 80002e6:	6a1b      	ldr	r3, [r3, #32]
 80002e8:	4a24      	ldr	r2, [pc, #144]	; (800037c <debug_uart_init+0xe4>)
 80002ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002ee:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 80002f0:	4b22      	ldr	r3, [pc, #136]	; (800037c <debug_uart_init+0xe4>)
 80002f2:	6a1b      	ldr	r3, [r3, #32]
 80002f4:	4a21      	ldr	r2, [pc, #132]	; (800037c <debug_uart_init+0xe4>)
 80002f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002fa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 80002fc:	4b1f      	ldr	r3, [pc, #124]	; (800037c <debug_uart_init+0xe4>)
 80002fe:	6a1b      	ldr	r3, [r3, #32]
 8000300:	4a1e      	ldr	r2, [pc, #120]	; (800037c <debug_uart_init+0xe4>)
 8000302:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000306:	6213      	str	r3, [r2, #32]

	/*4.Set PA3 alternate function type to UART2_RX (AF07)*/
	GPIOA->AFR[0] |=(1U<<12);
 8000308:	4b1c      	ldr	r3, [pc, #112]	; (800037c <debug_uart_init+0xe4>)
 800030a:	6a1b      	ldr	r3, [r3, #32]
 800030c:	4a1b      	ldr	r2, [pc, #108]	; (800037c <debug_uart_init+0xe4>)
 800030e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000312:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<13);
 8000314:	4b19      	ldr	r3, [pc, #100]	; (800037c <debug_uart_init+0xe4>)
 8000316:	6a1b      	ldr	r3, [r3, #32]
 8000318:	4a18      	ldr	r2, [pc, #96]	; (800037c <debug_uart_init+0xe4>)
 800031a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800031e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<14);
 8000320:	4b16      	ldr	r3, [pc, #88]	; (800037c <debug_uart_init+0xe4>)
 8000322:	6a1b      	ldr	r3, [r3, #32]
 8000324:	4a15      	ldr	r2, [pc, #84]	; (800037c <debug_uart_init+0xe4>)
 8000326:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800032a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<15);
 800032c:	4b13      	ldr	r3, [pc, #76]	; (800037c <debug_uart_init+0xe4>)
 800032e:	6a1b      	ldr	r3, [r3, #32]
 8000330:	4a12      	ldr	r2, [pc, #72]	; (800037c <debug_uart_init+0xe4>)
 8000332:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000336:	6213      	str	r3, [r2, #32]

	/*Configure UART module*/

	/*5. Enable clock access to the UART module*/
	RCC->APB1ENR |= UART2EN;
 8000338:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <debug_uart_init+0xe0>)
 800033a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800033c:	4a0e      	ldr	r2, [pc, #56]	; (8000378 <debug_uart_init+0xe0>)
 800033e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000342:	6413      	str	r3, [r2, #64]	; 0x40

	/*6. Disable UART module*/
	USART2->CR1 &=~CR1_UE;
 8000344:	4b0e      	ldr	r3, [pc, #56]	; (8000380 <debug_uart_init+0xe8>)
 8000346:	68db      	ldr	r3, [r3, #12]
 8000348:	4a0d      	ldr	r2, [pc, #52]	; (8000380 <debug_uart_init+0xe8>)
 800034a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800034e:	60d3      	str	r3, [r2, #12]

	/*7. Set UART baudrate*/
	USART2->BRR =  compute_uart_bd(SYS_FREQ,UART_BAUDRATE);
 8000350:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000354:	480b      	ldr	r0, [pc, #44]	; (8000384 <debug_uart_init+0xec>)
 8000356:	f000 f82f 	bl	80003b8 <compute_uart_bd>
 800035a:	4603      	mov	r3, r0
 800035c:	461a      	mov	r2, r3
 800035e:	4b08      	ldr	r3, [pc, #32]	; (8000380 <debug_uart_init+0xe8>)
 8000360:	609a      	str	r2, [r3, #8]

    /*8. Set trnasfer direction*/
	USART2->CR1 = (CR1_TE | CR1_RE);
 8000362:	4b07      	ldr	r3, [pc, #28]	; (8000380 <debug_uart_init+0xe8>)
 8000364:	220c      	movs	r2, #12
 8000366:	60da      	str	r2, [r3, #12]

	/*9. Enable UART module*/
	USART2->CR1 |= CR1_UE;
 8000368:	4b05      	ldr	r3, [pc, #20]	; (8000380 <debug_uart_init+0xe8>)
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	4a04      	ldr	r2, [pc, #16]	; (8000380 <debug_uart_init+0xe8>)
 800036e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000372:	60d3      	str	r3, [r2, #12]


}
 8000374:	bf00      	nop
 8000376:	bd80      	pop	{r7, pc}
 8000378:	40023800 	.word	0x40023800
 800037c:	40020000 	.word	0x40020000
 8000380:	40004400 	.word	0x40004400
 8000384:	00f42400 	.word	0x00f42400

08000388 <debug_uart_write>:
	USART1->DR = (ch & 0xFF);

}

static void debug_uart_write(int ch)
{
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}
 8000390:	bf00      	nop
 8000392:	4b08      	ldr	r3, [pc, #32]	; (80003b4 <debug_uart_write+0x2c>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800039a:	2b00      	cmp	r3, #0
 800039c:	d0f9      	beq.n	8000392 <debug_uart_write+0xa>

	/*Write to transmit data register*/
	USART2->DR = (ch & 0xFF);
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	4a04      	ldr	r2, [pc, #16]	; (80003b4 <debug_uart_write+0x2c>)
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	6053      	str	r3, [r2, #4]
}
 80003a6:	bf00      	nop
 80003a8:	370c      	adds	r7, #12
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop
 80003b4:	40004400 	.word	0x40004400

080003b8 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t periph_clk,uint32_t baudrate)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
 80003c0:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	085a      	lsrs	r2, r3, #1
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	441a      	add	r2, r3
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80003d0:	b29b      	uxth	r3, r3
}
 80003d2:	4618      	mov	r0, r3
 80003d4:	370c      	adds	r7, #12
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr
	...

080003e0 <cpy_to_uart>:
}


/*Copy content of tx_fifo into debug uart*/
static void cpy_to_uart(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
	char letter;

	/*Make sure transmit data register is empty and
	 * fifo has content*/
	while((USART2->SR  & SR_TXE) && tx_fifo_size() >0)
 80003e6:	e006      	b.n	80003f6 <cpy_to_uart+0x16>
	{
		/*Get char from fifo*/
		tx_fifo_get(&letter);
 80003e8:	1dfb      	adds	r3, r7, #7
 80003ea:	4618      	mov	r0, r3
 80003ec:	f000 f8cc 	bl	8000588 <tx_fifo_get>

		/*Put into uart data register*/
		USART2->DR = letter;
 80003f0:	79fa      	ldrb	r2, [r7, #7]
 80003f2:	4b08      	ldr	r3, [pc, #32]	; (8000414 <cpy_to_uart+0x34>)
 80003f4:	605a      	str	r2, [r3, #4]
	while((USART2->SR  & SR_TXE) && tx_fifo_size() >0)
 80003f6:	4b07      	ldr	r3, [pc, #28]	; (8000414 <cpy_to_uart+0x34>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d004      	beq.n	800040c <cpy_to_uart+0x2c>
 8000402:	f000 f8e7 	bl	80005d4 <tx_fifo_size>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d1ed      	bne.n	80003e8 <cpy_to_uart+0x8>
	}

}
 800040c:	bf00      	nop
 800040e:	3708      	adds	r7, #8
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	40004400 	.word	0x40004400

08000418 <uart_output_char>:

/*Output uart character*/
static void uart_output_char(char data)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	4603      	mov	r3, r0
 8000420:	71fb      	strb	r3, [r7, #7]
     if(tx_fifo_put(data) == FIFOFAIL)
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	4618      	mov	r0, r3
 8000426:	f000 f883 	bl	8000530 <tx_fifo_put>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d002      	beq.n	8000436 <uart_output_char+0x1e>
     {
    	 return;
     }

     cpy_to_uart();
 8000430:	f7ff ffd6 	bl	80003e0 <cpy_to_uart>
 8000434:	e000      	b.n	8000438 <uart_output_char+0x20>
    	 return;
 8000436:	bf00      	nop
}
 8000438:	3708      	adds	r7, #8
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}

0800043e <to_lower>:



static char to_lower(char letter)

{
 800043e:	b480      	push	{r7}
 8000440:	b083      	sub	sp, #12
 8000442:	af00      	add	r7, sp, #0
 8000444:	4603      	mov	r3, r0
 8000446:	71fb      	strb	r3, [r7, #7]
	if((letter >= 'A') && (letter <= 'Z'))
 8000448:	79fb      	ldrb	r3, [r7, #7]
 800044a:	2b40      	cmp	r3, #64	; 0x40
 800044c:	d906      	bls.n	800045c <to_lower+0x1e>
 800044e:	79fb      	ldrb	r3, [r7, #7]
 8000450:	2b5a      	cmp	r3, #90	; 0x5a
 8000452:	d803      	bhi.n	800045c <to_lower+0x1e>
	{
		letter |=0x20;
 8000454:	79fb      	ldrb	r3, [r7, #7]
 8000456:	f043 0320 	orr.w	r3, r3, #32
 800045a:	71fb      	strb	r3, [r7, #7]
	}

	return letter;
 800045c:	79fb      	ldrb	r3, [r7, #7]
}
 800045e:	4618      	mov	r0, r3
 8000460:	370c      	adds	r7, #12
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr
	...

0800046c <search_check>:



/*Search for string in rx data stream*/
static void search_check(char letter)
{
 800046c:	b590      	push	{r4, r7, lr}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
 8000472:	4603      	mov	r3, r0
 8000474:	71fb      	strb	r3, [r7, #7]
	if(searching)
 8000476:	4b14      	ldr	r3, [pc, #80]	; (80004c8 <search_check+0x5c>)
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	b2db      	uxtb	r3, r3
 800047c:	2b00      	cmp	r3, #0
 800047e:	d01f      	beq.n	80004c0 <search_check+0x54>
	{
		/*Check if characters match*/
		if(sub_str[search_idx] == to_lower(letter))
 8000480:	4b12      	ldr	r3, [pc, #72]	; (80004cc <search_check+0x60>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a12      	ldr	r2, [pc, #72]	; (80004d0 <search_check+0x64>)
 8000486:	5cd4      	ldrb	r4, [r2, r3]
 8000488:	79fb      	ldrb	r3, [r7, #7]
 800048a:	4618      	mov	r0, r3
 800048c:	f7ff ffd7 	bl	800043e <to_lower>
 8000490:	4603      	mov	r3, r0
 8000492:	429c      	cmp	r4, r3
 8000494:	d111      	bne.n	80004ba <search_check+0x4e>
		{
			search_idx++;
 8000496:	4b0d      	ldr	r3, [pc, #52]	; (80004cc <search_check+0x60>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	3301      	adds	r3, #1
 800049c:	4a0b      	ldr	r2, [pc, #44]	; (80004cc <search_check+0x60>)
 800049e:	6013      	str	r3, [r2, #0]

			/* Check if end of string */
			if(sub_str[search_idx] == 0)
 80004a0:	4b0a      	ldr	r3, [pc, #40]	; (80004cc <search_check+0x60>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a0a      	ldr	r2, [pc, #40]	; (80004d0 <search_check+0x64>)
 80004a6:	5cd3      	ldrb	r3, [r2, r3]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d109      	bne.n	80004c0 <search_check+0x54>
			{
				is_response =  true;
 80004ac:	4b09      	ldr	r3, [pc, #36]	; (80004d4 <search_check+0x68>)
 80004ae:	2201      	movs	r2, #1
 80004b0:	701a      	strb	r2, [r3, #0]
				searching   =  false;
 80004b2:	4b05      	ldr	r3, [pc, #20]	; (80004c8 <search_check+0x5c>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	701a      	strb	r2, [r3, #0]
		{
			/*Start over*/
			search_idx = 0;
		}
	}
}
 80004b8:	e002      	b.n	80004c0 <search_check+0x54>
			search_idx = 0;
 80004ba:	4b04      	ldr	r3, [pc, #16]	; (80004cc <search_check+0x60>)
 80004bc:	2200      	movs	r2, #0
 80004be:	601a      	str	r2, [r3, #0]
}
 80004c0:	bf00      	nop
 80004c2:	370c      	adds	r7, #12
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd90      	pop	{r4, r7, pc}
 80004c8:	20000080 	.word	0x20000080
 80004cc:	20000084 	.word	0x20000084
 80004d0:	200004d8 	.word	0x200004d8
 80004d4:	20000081 	.word	0x20000081

080004d8 <a6_process_data>:
	}

}

static void a6_process_data(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
	char letter;

	/*Check if there is new data in data register*/
	if(USART1->SR & SR_RXNE)
 80004de:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <a6_process_data+0x40>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f003 0320 	and.w	r3, r3, #32
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d012      	beq.n	8000510 <a6_process_data+0x38>
	{
		/*Store data from a6 uart data register to local variable*/
       letter  =  USART1->DR;
 80004ea:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <a6_process_data+0x40>)
 80004ec:	685b      	ldr	r3, [r3, #4]
 80004ee:	71fb      	strb	r3, [r7, #7]
       temp_buffer[itr++] = letter;
 80004f0:	4b0a      	ldr	r3, [pc, #40]	; (800051c <a6_process_data+0x44>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	1c5a      	adds	r2, r3, #1
 80004f6:	4909      	ldr	r1, [pc, #36]	; (800051c <a6_process_data+0x44>)
 80004f8:	600a      	str	r2, [r1, #0]
 80004fa:	4909      	ldr	r1, [pc, #36]	; (8000520 <a6_process_data+0x48>)
 80004fc:	79fa      	ldrb	r2, [r7, #7]
 80004fe:	54ca      	strb	r2, [r1, r3]

       /*Print data from a6 uart data register to debug uart, meaning, your computer */
       uart_output_char(letter);
 8000500:	79fb      	ldrb	r3, [r7, #7]
 8000502:	4618      	mov	r0, r3
 8000504:	f7ff ff88 	bl	8000418 <uart_output_char>


       /*Check for response*/
       search_check(letter);
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	4618      	mov	r0, r3
 800050c:	f7ff ffae 	bl	800046c <search_check>

	}

}
 8000510:	bf00      	nop
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	40011000 	.word	0x40011000
 800051c:	20000088 	.word	0x20000088
 8000520:	200004f8 	.word	0x200004f8

08000524 <USART1_IRQHandler>:
		a6_uart_write_char(cmd[index++]);
	}
}

void USART1_IRQHandler(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0

	a6_process_data();
 8000528:	f7ff ffd6 	bl	80004d8 <a6_process_data>
}
 800052c:	bf00      	nop
 800052e:	bd80      	pop	{r7, pc}

08000530 <tx_fifo_put>:
}

/*Put data into tx fifo*/

uint8_t tx_fifo_put(tx_dataType data)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	71fb      	strb	r3, [r7, #7]

	/*Check if fifo is full*/
	if((tx_put_itr - tx_get_itr) & ~(TXFIFOSIZE -1))
 800053a:	4b10      	ldr	r3, [pc, #64]	; (800057c <tx_fifo_put+0x4c>)
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	4b10      	ldr	r3, [pc, #64]	; (8000580 <tx_fifo_put+0x50>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	1ad3      	subs	r3, r2, r3
 8000544:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000548:	f023 0303 	bic.w	r3, r3, #3
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <tx_fifo_put+0x24>
	{
		/*fifo is full*/
		return (TXFAIL);
 8000550:	2300      	movs	r3, #0
 8000552:	e00c      	b.n	800056e <tx_fifo_put+0x3e>
	}
	/*Put data into fifo*/
	TX_FIFO[tx_put_itr & (TXFIFOSIZE-1)] =  data;
 8000554:	4b09      	ldr	r3, [pc, #36]	; (800057c <tx_fifo_put+0x4c>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800055c:	4909      	ldr	r1, [pc, #36]	; (8000584 <tx_fifo_put+0x54>)
 800055e:	79fa      	ldrb	r2, [r7, #7]
 8000560:	54ca      	strb	r2, [r1, r3]

	/*Increment itr*/
	tx_put_itr++;
 8000562:	4b06      	ldr	r3, [pc, #24]	; (800057c <tx_fifo_put+0x4c>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	3301      	adds	r3, #1
 8000568:	4a04      	ldr	r2, [pc, #16]	; (800057c <tx_fifo_put+0x4c>)
 800056a:	6013      	str	r3, [r2, #0]

	return(TXSUCCESS);
 800056c:	2301      	movs	r3, #1
}
 800056e:	4618      	mov	r0, r3
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	20000630 	.word	0x20000630
 8000580:	2000062c 	.word	0x2000062c
 8000584:	2000008c 	.word	0x2000008c

08000588 <tx_fifo_get>:

uint8_t tx_fifo_get(tx_dataType *pdata)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
   /*Check if fifo is empty*/
	if(tx_put_itr == tx_get_itr)
 8000590:	4b0d      	ldr	r3, [pc, #52]	; (80005c8 <tx_fifo_get+0x40>)
 8000592:	681a      	ldr	r2, [r3, #0]
 8000594:	4b0d      	ldr	r3, [pc, #52]	; (80005cc <tx_fifo_get+0x44>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	429a      	cmp	r2, r3
 800059a:	d101      	bne.n	80005a0 <tx_fifo_get+0x18>
	{
		/*fifo empty*/
		return (TXFAIL);
 800059c:	2300      	movs	r3, #0
 800059e:	e00d      	b.n	80005bc <tx_fifo_get+0x34>
	}

	/*Get the data*/
	*pdata =  TX_FIFO[tx_get_itr & (TXFIFOSIZE - 1)];
 80005a0:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <tx_fifo_get+0x44>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80005a8:	4a09      	ldr	r2, [pc, #36]	; (80005d0 <tx_fifo_get+0x48>)
 80005aa:	5cd2      	ldrb	r2, [r2, r3]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	701a      	strb	r2, [r3, #0]

	/*Increment the itr*/
	tx_get_itr++;
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <tx_fifo_get+0x44>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	3301      	adds	r3, #1
 80005b6:	4a05      	ldr	r2, [pc, #20]	; (80005cc <tx_fifo_get+0x44>)
 80005b8:	6013      	str	r3, [r2, #0]

	return (TXSUCCESS);
 80005ba:	2301      	movs	r3, #1
}
 80005bc:	4618      	mov	r0, r3
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr
 80005c8:	20000630 	.word	0x20000630
 80005cc:	2000062c 	.word	0x2000062c
 80005d0:	2000008c 	.word	0x2000008c

080005d4 <tx_fifo_size>:


uint32_t tx_fifo_size(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
	return (uint32_t)(tx_put_itr -  tx_get_itr);
 80005d8:	4b04      	ldr	r3, [pc, #16]	; (80005ec <tx_fifo_size+0x18>)
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	4b04      	ldr	r3, [pc, #16]	; (80005f0 <tx_fifo_size+0x1c>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	1ad3      	subs	r3, r2, r3
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	20000630 	.word	0x20000630
 80005f0:	2000062c 	.word	0x2000062c

080005f4 <main>:
uint8_t date_buffer[RTC_BUFF_LEN] = {0};

void display_rtc_calendar(void);

int main()
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0

	debug_uart_init();
 80005f8:	f7ff fe4e 	bl	8000298 <debug_uart_init>
	rtc_init();
 80005fc:	f000 f8c2 	bl	8000784 <rtc_init>
	rtc_alarm_init();
 8000600:	f000 f91a 	bl	8000838 <rtc_alarm_init>
	while(1)
	{
		display_rtc_calendar();
 8000604:	f000 f802 	bl	800060c <display_rtc_calendar>
 8000608:	e7fc      	b.n	8000604 <main+0x10>
	...

0800060c <display_rtc_calendar>:

}


void display_rtc_calendar(void)
{
 800060c:	b5b0      	push	{r4, r5, r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af02      	add	r7, sp, #8
  // Display time Format : hh:mm:ss
  sprintf((char*)time_buffer,"%.2d:%.2d:%.2d", rtc_convert_bcd2bin(rtc_time_get_hour()),
 8000612:	f000 faf3 	bl	8000bfc <rtc_time_get_hour>
 8000616:	4603      	mov	r3, r0
 8000618:	b2db      	uxtb	r3, r3
 800061a:	4618      	mov	r0, r3
 800061c:	f000 fa8e 	bl	8000b3c <rtc_convert_bcd2bin>
 8000620:	4603      	mov	r3, r0
 8000622:	461c      	mov	r4, r3
		  rtc_convert_bcd2bin(rtc_time_get_minute()),
 8000624:	f000 fadc 	bl	8000be0 <rtc_time_get_minute>
 8000628:	4603      	mov	r3, r0
 800062a:	b2db      	uxtb	r3, r3
 800062c:	4618      	mov	r0, r3
 800062e:	f000 fa85 	bl	8000b3c <rtc_convert_bcd2bin>
 8000632:	4603      	mov	r3, r0
  sprintf((char*)time_buffer,"%.2d:%.2d:%.2d", rtc_convert_bcd2bin(rtc_time_get_hour()),
 8000634:	461d      	mov	r5, r3
		  rtc_convert_bcd2bin(rtc_time_get_second()));
 8000636:	f000 fac5 	bl	8000bc4 <rtc_time_get_second>
 800063a:	4603      	mov	r3, r0
 800063c:	b2db      	uxtb	r3, r3
 800063e:	4618      	mov	r0, r3
 8000640:	f000 fa7c 	bl	8000b3c <rtc_convert_bcd2bin>
 8000644:	4603      	mov	r3, r0
  sprintf((char*)time_buffer,"%.2d:%.2d:%.2d", rtc_convert_bcd2bin(rtc_time_get_hour()),
 8000646:	9300      	str	r3, [sp, #0]
 8000648:	462b      	mov	r3, r5
 800064a:	4622      	mov	r2, r4
 800064c:	4924      	ldr	r1, [pc, #144]	; (80006e0 <display_rtc_calendar+0xd4>)
 800064e:	4825      	ldr	r0, [pc, #148]	; (80006e4 <display_rtc_calendar+0xd8>)
 8000650:	f000 fbfa 	bl	8000e48 <siprintf>

  printf(" Time: %.2d:%.2d:%.2d\n\r", rtc_convert_bcd2bin(rtc_time_get_hour()),
 8000654:	f000 fad2 	bl	8000bfc <rtc_time_get_hour>
 8000658:	4603      	mov	r3, r0
 800065a:	b2db      	uxtb	r3, r3
 800065c:	4618      	mov	r0, r3
 800065e:	f000 fa6d 	bl	8000b3c <rtc_convert_bcd2bin>
 8000662:	4603      	mov	r3, r0
 8000664:	461c      	mov	r4, r3
		  rtc_convert_bcd2bin(rtc_time_get_minute()),
 8000666:	f000 fabb 	bl	8000be0 <rtc_time_get_minute>
 800066a:	4603      	mov	r3, r0
 800066c:	b2db      	uxtb	r3, r3
 800066e:	4618      	mov	r0, r3
 8000670:	f000 fa64 	bl	8000b3c <rtc_convert_bcd2bin>
 8000674:	4603      	mov	r3, r0
  printf(" Time: %.2d:%.2d:%.2d\n\r", rtc_convert_bcd2bin(rtc_time_get_hour()),
 8000676:	461d      	mov	r5, r3
		  rtc_convert_bcd2bin(rtc_time_get_second()));
 8000678:	f000 faa4 	bl	8000bc4 <rtc_time_get_second>
 800067c:	4603      	mov	r3, r0
 800067e:	b2db      	uxtb	r3, r3
 8000680:	4618      	mov	r0, r3
 8000682:	f000 fa5b 	bl	8000b3c <rtc_convert_bcd2bin>
 8000686:	4603      	mov	r3, r0
  printf(" Time: %.2d:%.2d:%.2d\n\r", rtc_convert_bcd2bin(rtc_time_get_hour()),
 8000688:	462a      	mov	r2, r5
 800068a:	4621      	mov	r1, r4
 800068c:	4816      	ldr	r0, [pc, #88]	; (80006e8 <display_rtc_calendar+0xdc>)
 800068e:	f000 fbc3 	bl	8000e18 <iprintf>

  // Display date Format : mm-dd-yy
  sprintf((char*)date_buffer,"%.2d-%.2d-%.2d", rtc_convert_bcd2bin(rtc_date_get_month()),
 8000692:	f000 fa89 	bl	8000ba8 <rtc_date_get_month>
 8000696:	4603      	mov	r3, r0
 8000698:	b2db      	uxtb	r3, r3
 800069a:	4618      	mov	r0, r3
 800069c:	f000 fa4e 	bl	8000b3c <rtc_convert_bcd2bin>
 80006a0:	4603      	mov	r3, r0
 80006a2:	461c      	mov	r4, r3
		  rtc_convert_bcd2bin(rtc_date_get_day()),
 80006a4:	f000 fa64 	bl	8000b70 <rtc_date_get_day>
 80006a8:	4603      	mov	r3, r0
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 fa45 	bl	8000b3c <rtc_convert_bcd2bin>
 80006b2:	4603      	mov	r3, r0
  sprintf((char*)date_buffer,"%.2d-%.2d-%.2d", rtc_convert_bcd2bin(rtc_date_get_month()),
 80006b4:	461d      	mov	r5, r3
          2000 + rtc_convert_bcd2bin(rtc_date_get_year()));
 80006b6:	f000 fa69 	bl	8000b8c <rtc_date_get_year>
 80006ba:	4603      	mov	r3, r0
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 fa3c 	bl	8000b3c <rtc_convert_bcd2bin>
 80006c4:	4603      	mov	r3, r0
  sprintf((char*)date_buffer,"%.2d-%.2d-%.2d", rtc_convert_bcd2bin(rtc_date_get_month()),
 80006c6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80006ca:	9300      	str	r3, [sp, #0]
 80006cc:	462b      	mov	r3, r5
 80006ce:	4622      	mov	r2, r4
 80006d0:	4906      	ldr	r1, [pc, #24]	; (80006ec <display_rtc_calendar+0xe0>)
 80006d2:	4807      	ldr	r0, [pc, #28]	; (80006f0 <display_rtc_calendar+0xe4>)
 80006d4:	f000 fbb8 	bl	8000e48 <siprintf>


}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	bdb0      	pop	{r4, r5, r7, pc}
 80006de:	bf00      	nop
 80006e0:	08002080 	.word	0x08002080
 80006e4:	2000048c 	.word	0x2000048c
 80006e8:	08002090 	.word	0x08002090
 80006ec:	080020a8 	.word	0x080020a8
 80006f0:	200004ac 	.word	0x200004ac

080006f4 <alarm_callback>:


void alarm_callback(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	printf("ALARM JUST OCCURRED !!\n\r");
 80006f8:	4802      	ldr	r0, [pc, #8]	; (8000704 <alarm_callback+0x10>)
 80006fa:	f000 fb8d 	bl	8000e18 <iprintf>
}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	080020b8 	.word	0x080020b8

08000708 <RTC_Alarm_IRQHandler>:

void RTC_Alarm_IRQHandler(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	/*Get the alarm interrupt source enable status*/
	if((RTC->CR & CR_ALRAIE) != 0)
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <RTC_Alarm_IRQHandler+0x38>)
 800070e:	689b      	ldr	r3, [r3, #8]
 8000710:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000714:	2b00      	cmp	r3, #0
 8000716:	d00d      	beq.n	8000734 <RTC_Alarm_IRQHandler+0x2c>
	{
		/*Get the pending status of the Alarm interrupt*/
		if((RTC->ISR & ISR_ALRAF) != 0)
 8000718:	4b09      	ldr	r3, [pc, #36]	; (8000740 <RTC_Alarm_IRQHandler+0x38>)
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000720:	2b00      	cmp	r3, #0
 8000722:	d007      	beq.n	8000734 <RTC_Alarm_IRQHandler+0x2c>
		{
			/*Do something...*/
			alarm_callback();
 8000724:	f7ff ffe6 	bl	80006f4 <alarm_callback>

			/*Clear the alarm interrupt pending bit*/
			RTC->ISR &=~(ISR_INIT);
 8000728:	4b05      	ldr	r3, [pc, #20]	; (8000740 <RTC_Alarm_IRQHandler+0x38>)
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	4a04      	ldr	r2, [pc, #16]	; (8000740 <RTC_Alarm_IRQHandler+0x38>)
 800072e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000732:	60d3      	str	r3, [r2, #12]
		}
	}

	/*Clear the EXTI's flag for RTC alarm*/
	EXTI->PR = (1U<<17);
 8000734:	4b03      	ldr	r3, [pc, #12]	; (8000744 <RTC_Alarm_IRQHandler+0x3c>)
 8000736:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800073a:	615a      	str	r2, [r3, #20]
}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40002800 	.word	0x40002800
 8000744:	40013c00 	.word	0x40013c00

08000748 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000756:	2b00      	cmp	r3, #0
 8000758:	db0b      	blt.n	8000772 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	f003 021f 	and.w	r2, r3, #31
 8000760:	4907      	ldr	r1, [pc, #28]	; (8000780 <__NVIC_EnableIRQ+0x38>)
 8000762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000766:	095b      	lsrs	r3, r3, #5
 8000768:	2001      	movs	r0, #1
 800076a:	fa00 f202 	lsl.w	r2, r0, r2
 800076e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000772:	bf00      	nop
 8000774:	370c      	adds	r7, #12
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	e000e100 	.word	0xe000e100

08000784 <rtc_init>:
static void rtc_time_config(uint32_t Format12_24, uint32_t Hours, uint32_t Minutes, uint32_t Seconds);
static void rtc_alma_config_time(uint32_t Format12_24, uint32_t Hours, uint32_t Minutes, uint32_t Seconds);
static void rtc_alma_set_mask(uint32_t Mask);

void rtc_init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	/*Enable clock access to PWR*/
	RCC->APB1ENR |= PWREN;
 8000788:	4b28      	ldr	r3, [pc, #160]	; (800082c <rtc_init+0xa8>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078c:	4a27      	ldr	r2, [pc, #156]	; (800082c <rtc_init+0xa8>)
 800078e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000792:	6413      	str	r3, [r2, #64]	; 0x40

	/*Enable Backup access to config rtc*/
	PWR->CR |= CR_DBP;
 8000794:	4b26      	ldr	r3, [pc, #152]	; (8000830 <rtc_init+0xac>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a25      	ldr	r2, [pc, #148]	; (8000830 <rtc_init+0xac>)
 800079a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800079e:	6013      	str	r3, [r2, #0]

	/*Enable Low Speed Internal (LSI) clock*/
	RCC->CSR |=CSR_LSION;
 80007a0:	4b22      	ldr	r3, [pc, #136]	; (800082c <rtc_init+0xa8>)
 80007a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80007a4:	4a21      	ldr	r2, [pc, #132]	; (800082c <rtc_init+0xa8>)
 80007a6:	f043 0301 	orr.w	r3, r3, #1
 80007aa:	6753      	str	r3, [r2, #116]	; 0x74

	/*Wait for LSI to be enabled*/
	while((RCC->CSR & CSR_LSIRDY) != CSR_LSIRDY){}
 80007ac:	bf00      	nop
 80007ae:	4b1f      	ldr	r3, [pc, #124]	; (800082c <rtc_init+0xa8>)
 80007b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	2b02      	cmp	r3, #2
 80007b8:	d1f9      	bne.n	80007ae <rtc_init+0x2a>

	/*Force backup domain to reset*/
	RCC->BDCR |=BDCR_BDRST;
 80007ba:	4b1c      	ldr	r3, [pc, #112]	; (800082c <rtc_init+0xa8>)
 80007bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80007be:	4a1b      	ldr	r2, [pc, #108]	; (800082c <rtc_init+0xa8>)
 80007c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007c4:	6713      	str	r3, [r2, #112]	; 0x70

	/*Release backup domain reset*/
	RCC->BDCR &=~BDCR_BDRST;
 80007c6:	4b19      	ldr	r3, [pc, #100]	; (800082c <rtc_init+0xa8>)
 80007c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80007ca:	4a18      	ldr	r2, [pc, #96]	; (800082c <rtc_init+0xa8>)
 80007cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007d0:	6713      	str	r3, [r2, #112]	; 0x70

	/*Set RTC clock source to LSI*/
	RCC->BDCR &=~(1U<<8);
 80007d2:	4b16      	ldr	r3, [pc, #88]	; (800082c <rtc_init+0xa8>)
 80007d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80007d6:	4a15      	ldr	r2, [pc, #84]	; (800082c <rtc_init+0xa8>)
 80007d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007dc:	6713      	str	r3, [r2, #112]	; 0x70
	RCC->BDCR |=(1U<<9);
 80007de:	4b13      	ldr	r3, [pc, #76]	; (800082c <rtc_init+0xa8>)
 80007e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80007e2:	4a12      	ldr	r2, [pc, #72]	; (800082c <rtc_init+0xa8>)
 80007e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007e8:	6713      	str	r3, [r2, #112]	; 0x70

	/*Enable RTC*/
	RCC->BDCR |= RTCEN;
 80007ea:	4b10      	ldr	r3, [pc, #64]	; (800082c <rtc_init+0xa8>)
 80007ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80007ee:	4a0f      	ldr	r2, [pc, #60]	; (800082c <rtc_init+0xa8>)
 80007f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007f4:	6713      	str	r3, [r2, #112]	; 0x70

	/*Disable RTC registers write protection*/
	RTC->WPR = RTC_WRITE_PROTECTION_ENABLE_1;
 80007f6:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <rtc_init+0xb0>)
 80007f8:	22ca      	movs	r2, #202	; 0xca
 80007fa:	625a      	str	r2, [r3, #36]	; 0x24
	RTC->WPR = RTC_WRITE_PROTECTION_ENABLE_2;
 80007fc:	4b0d      	ldr	r3, [pc, #52]	; (8000834 <rtc_init+0xb0>)
 80007fe:	2253      	movs	r2, #83	; 0x53
 8000800:	625a      	str	r2, [r3, #36]	; 0x24


	/*Enter initialization*/
	if(rtc_init_seq() != 1)
 8000802:	f000 f947 	bl	8000a94 <rtc_init_seq>
	{
		/*Initialization error*/
	}

	/*Set hour format to AM/PM*/
	RTC->CR |= CR_FMT;
 8000806:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <rtc_init+0xb0>)
 8000808:	689b      	ldr	r3, [r3, #8]
 800080a:	4a0a      	ldr	r2, [pc, #40]	; (8000834 <rtc_init+0xb0>)
 800080c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000810:	6093      	str	r3, [r2, #8]

	/*Set Asynch prescaler*/
	rtc_set_async_prescaler(RTC_ASYNCH_PREDIV);
 8000812:	207f      	movs	r0, #127	; 0x7f
 8000814:	f000 f8f2 	bl	80009fc <rtc_set_async_prescaler>

	/*Set Synch prescaler*/
	rtc_set_synch_prescaler(RTC_SYNCH_PREDIV);
 8000818:	20f9      	movs	r0, #249	; 0xf9
 800081a:	f000 f905 	bl	8000a28 <rtc_set_synch_prescaler>

	/*Exit intialization mode*/
	exit_init_seq();
 800081e:	f000 f984 	bl	8000b2a <exit_init_seq>

	/*Enable RTC registers write protection*/
	RTC->WPR = 0xFF;
 8000822:	4b04      	ldr	r3, [pc, #16]	; (8000834 <rtc_init+0xb0>)
 8000824:	22ff      	movs	r2, #255	; 0xff
 8000826:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40023800 	.word	0x40023800
 8000830:	40007000 	.word	0x40007000
 8000834:	40002800 	.word	0x40002800

08000838 <rtc_alarm_init>:

void rtc_alarm_init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
	/*Disable RTC registers write protection*/
	RTC->WPR = RTC_WRITE_PROTECTION_ENABLE_1;
 800083c:	4b29      	ldr	r3, [pc, #164]	; (80008e4 <rtc_alarm_init+0xac>)
 800083e:	22ca      	movs	r2, #202	; 0xca
 8000840:	625a      	str	r2, [r3, #36]	; 0x24
	RTC->WPR = RTC_WRITE_PROTECTION_ENABLE_2;
 8000842:	4b28      	ldr	r3, [pc, #160]	; (80008e4 <rtc_alarm_init+0xac>)
 8000844:	2253      	movs	r2, #83	; 0x53
 8000846:	625a      	str	r2, [r3, #36]	; 0x24

	/*Enter initialization*/
	if(rtc_init_seq() != 1)
 8000848:	f000 f924 	bl	8000a94 <rtc_init_seq>
	{
		/*Initialization error*/
	}

    /*Set date : Friday 14th, January 2022*/
	rtc_date_config(WEEKDAY_FRIDAY,0x14,MONTH_JANUARY,0x22);
 800084c:	2322      	movs	r3, #34	; 0x22
 800084e:	2201      	movs	r2, #1
 8000850:	2114      	movs	r1, #20
 8000852:	2005      	movs	r0, #5
 8000854:	f000 f85e 	bl	8000914 <rtc_date_config>

	/*Set time : 07:04: 00 PM*/
	rtc_time_config(TIME_FORMAT_PM,0x07,0x04,0x00);
 8000858:	2300      	movs	r3, #0
 800085a:	2204      	movs	r2, #4
 800085c:	2107      	movs	r1, #7
 800085e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000862:	f000 f87f 	bl	8000964 <rtc_time_config>

	/*Set alarm :  07:04:10*/

	/*RTC Alarm Generation: Alarm on Hours, Minutes and Seconds*/
	rtc_alma_config_time(TIME_FORMAT_PM,0x07,0x04,0x10);
 8000866:	2310      	movs	r3, #16
 8000868:	2204      	movs	r2, #4
 800086a:	2107      	movs	r1, #7
 800086c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000870:	f000 f89e 	bl	80009b0 <rtc_alma_config_time>

    /*Ignore weekday*/
	rtc_alma_set_mask(ALMA_MASK_DATEWEEKDAY);
 8000874:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8000878:	f000 f838 	bl	80008ec <rtc_alma_set_mask>

	/*Enable alarm*/
	RTC->CR |=CR_ALRAE;
 800087c:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <rtc_alarm_init+0xac>)
 800087e:	689b      	ldr	r3, [r3, #8]
 8000880:	4a18      	ldr	r2, [pc, #96]	; (80008e4 <rtc_alarm_init+0xac>)
 8000882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000886:	6093      	str	r3, [r2, #8]

	/*Enable IT Alarm*/
	RTC->CR |= CR_ALRAIE;
 8000888:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <rtc_alarm_init+0xac>)
 800088a:	689b      	ldr	r3, [r3, #8]
 800088c:	4a15      	ldr	r2, [pc, #84]	; (80008e4 <rtc_alarm_init+0xac>)
 800088e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000892:	6093      	str	r3, [r2, #8]

	/*Clear the alarm interrupt pending bit*/
	RTC->ISR &=~ISR_ALRAF;
 8000894:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <rtc_alarm_init+0xac>)
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	4a12      	ldr	r2, [pc, #72]	; (80008e4 <rtc_alarm_init+0xac>)
 800089a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800089e:	60d3      	str	r3, [r2, #12]


	/*Enable IT alarm*/
	EXTI->IMR |=(1U<<17);
 80008a0:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <rtc_alarm_init+0xb0>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a10      	ldr	r2, [pc, #64]	; (80008e8 <rtc_alarm_init+0xb0>)
 80008a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008aa:	6013      	str	r3, [r2, #0]
	EXTI->RTSR |=(1U<<17);
 80008ac:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <rtc_alarm_init+0xb0>)
 80008ae:	689b      	ldr	r3, [r3, #8]
 80008b0:	4a0d      	ldr	r2, [pc, #52]	; (80008e8 <rtc_alarm_init+0xb0>)
 80008b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b6:	6093      	str	r3, [r2, #8]

	/*Configure RTC alarm interrupt*/

	/*Enable rtc alarm interrupt in NVIC*/
	NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80008b8:	2029      	movs	r0, #41	; 0x29
 80008ba:	f7ff ff45 	bl	8000748 <__NVIC_EnableIRQ>


	/*Exit intialization mode*/
	RTC->ISR &=~ISR_INIT;
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <rtc_alarm_init+0xac>)
 80008c0:	68db      	ldr	r3, [r3, #12]
 80008c2:	4a08      	ldr	r2, [pc, #32]	; (80008e4 <rtc_alarm_init+0xac>)
 80008c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80008c8:	60d3      	str	r3, [r2, #12]

	/*Clear RSF flag*/
	RTC->ISR &=~ISR_RSF;
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <rtc_alarm_init+0xac>)
 80008cc:	68db      	ldr	r3, [r3, #12]
 80008ce:	4a05      	ldr	r2, [pc, #20]	; (80008e4 <rtc_alarm_init+0xac>)
 80008d0:	f023 0320 	bic.w	r3, r3, #32
 80008d4:	60d3      	str	r3, [r2, #12]

	if(	exit_init_seq() != 1)
 80008d6:	f000 f928 	bl	8000b2a <exit_init_seq>
	{
		//process error
	}
	/*Enable RTC registers write protection*/
	RTC->WPR = 0xFF;
 80008da:	4b02      	ldr	r3, [pc, #8]	; (80008e4 <rtc_alarm_init+0xac>)
 80008dc:	22ff      	movs	r2, #255	; 0xff
 80008de:	625a      	str	r2, [r3, #36]	; 0x24


}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40002800 	.word	0x40002800
 80008e8:	40013c00 	.word	0x40013c00

080008ec <rtc_alma_set_mask>:


static void rtc_alma_set_mask(uint32_t Mask)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RTC->ALRMAR, RTC_ALRMAR_MSK4 | RTC_ALRMAR_MSK3 | RTC_ALRMAR_MSK2 | RTC_ALRMAR_MSK1, Mask);
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <rtc_alma_set_mask+0x24>)
 80008f6:	69db      	ldr	r3, [r3, #28]
 80008f8:	f003 327f 	and.w	r2, r3, #2139062143	; 0x7f7f7f7f
 80008fc:	4904      	ldr	r1, [pc, #16]	; (8000910 <rtc_alma_set_mask+0x24>)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4313      	orrs	r3, r2
 8000902:	61cb      	str	r3, [r1, #28]
}
 8000904:	bf00      	nop
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	40002800 	.word	0x40002800

08000914 <rtc_date_config>:


static void rtc_date_config(uint32_t WeekDay, uint32_t Day, uint32_t Month, uint32_t Year)
{
 8000914:	b490      	push	{r4, r7}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]
 8000920:	603b      	str	r3, [r7, #0]
  register uint32_t temp = 0U;
 8000922:	2400      	movs	r4, #0

  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	035a      	lsls	r2, r3, #13
         (((Year & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | ((Year & 0x0FU) << RTC_DR_YU_Pos))   | \
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	041b      	lsls	r3, r3, #16
 800092c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 8000930:	431a      	orrs	r2, r3
         (((Month & 0xF0U) << (RTC_DR_MT_Pos - 4U)) | ((Month & 0x0FU) << RTC_DR_MU_Pos)) | \
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	021b      	lsls	r3, r3, #8
 8000936:	b29b      	uxth	r3, r3
         (((Year & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | ((Year & 0x0FU) << RTC_DR_YU_Pos))   | \
 8000938:	431a      	orrs	r2, r3
         (((Day & 0xF0U) << (RTC_DR_DT_Pos - 4U)) | ((Day & 0x0FU) << RTC_DR_DU_Pos));
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	b2db      	uxtb	r3, r3
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 800093e:	ea42 0403 	orr.w	r4, r2, r3

  MODIFY_REG(RTC->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <rtc_date_config+0x48>)
 8000944:	685a      	ldr	r2, [r3, #4]
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <rtc_date_config+0x4c>)
 8000948:	4013      	ands	r3, r2
 800094a:	4a04      	ldr	r2, [pc, #16]	; (800095c <rtc_date_config+0x48>)
 800094c:	4323      	orrs	r3, r4
 800094e:	6053      	str	r3, [r2, #4]
}
 8000950:	bf00      	nop
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bc90      	pop	{r4, r7}
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	40002800 	.word	0x40002800
 8000960:	ff0000c0 	.word	0xff0000c0

08000964 <rtc_time_config>:



static void rtc_time_config(uint32_t Format12_24, uint32_t Hours, uint32_t Minutes, uint32_t Seconds)
{
 8000964:	b490      	push	{r4, r7}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
 8000970:	603b      	str	r3, [r7, #0]
  register uint32_t temp = 0U;
 8000972:	2400      	movs	r4, #0

  temp = Format12_24                                                                                    | \
         (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	041b      	lsls	r3, r3, #16
 8000978:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
  temp = Format12_24                                                                                    | \
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	431a      	orrs	r2, r3
         (((Minutes & 0xF0U) << (RTC_TR_MNT_Pos - 4U)) | ((Minutes & 0x0FU) << RTC_TR_MNU_Pos)) | \
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	021b      	lsls	r3, r3, #8
 8000984:	b29b      	uxth	r3, r3
         (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
 8000986:	431a      	orrs	r2, r3
         (((Seconds & 0xF0U) << (RTC_TR_ST_Pos - 4U)) | ((Seconds & 0x0FU) << RTC_TR_SU_Pos));
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	b2db      	uxtb	r3, r3
  temp = Format12_24                                                                                    | \
 800098c:	ea42 0403 	orr.w	r4, r2, r3
  MODIFY_REG(RTC->TR, (
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <rtc_time_config+0x48>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
 8000998:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800099c:	4a03      	ldr	r2, [pc, #12]	; (80009ac <rtc_time_config+0x48>)
 800099e:	4323      	orrs	r3, r4
 80009a0:	6013      	str	r3, [r2, #0]
		  RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
}
 80009a2:	bf00      	nop
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc90      	pop	{r4, r7}
 80009aa:	4770      	bx	lr
 80009ac:	40002800 	.word	0x40002800

080009b0 <rtc_alma_config_time>:



static void rtc_alma_config_time(uint32_t Format12_24, uint32_t Hours, uint32_t Minutes, uint32_t Seconds)
{
 80009b0:	b490      	push	{r4, r7}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	607a      	str	r2, [r7, #4]
 80009bc:	603b      	str	r3, [r7, #0]
  register uint32_t temp = 0U;
 80009be:	2400      	movs	r4, #0

  temp = Format12_24 | (((Hours & 0xF0U) << (RTC_ALRMAR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_ALRMAR_HU_Pos))    | \
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	041b      	lsls	r3, r3, #16
 80009c4:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	431a      	orrs	r2, r3
         (((Minutes & 0xF0U) << (RTC_ALRMAR_MNT_Pos - 4U)) | ((Minutes & 0x0FU) << RTC_ALRMAR_MNU_Pos)) | \
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	021b      	lsls	r3, r3, #8
 80009d0:	b29b      	uxth	r3, r3
  temp = Format12_24 | (((Hours & 0xF0U) << (RTC_ALRMAR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_ALRMAR_HU_Pos))    | \
 80009d2:	431a      	orrs	r2, r3
         (((Seconds & 0xF0U) << (RTC_ALRMAR_ST_Pos - 4U)) | ((Seconds & 0x0FU) << RTC_ALRMAR_SU_Pos));
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	b2db      	uxtb	r3, r3
  temp = Format12_24 | (((Hours & 0xF0U) << (RTC_ALRMAR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_ALRMAR_HU_Pos))    | \
 80009d8:	ea42 0403 	orr.w	r4, r2, r3

  MODIFY_REG(RTC->ALRMAR, RTC_ALRMAR_PM | RTC_ALRMAR_HT | RTC_ALRMAR_HU | RTC_ALRMAR_MNT | RTC_ALRMAR_MNU | RTC_ALRMAR_ST | RTC_ALRMAR_SU, temp);
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <rtc_alma_config_time+0x48>)
 80009de:	69db      	ldr	r3, [r3, #28]
 80009e0:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
 80009e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80009e8:	4a03      	ldr	r2, [pc, #12]	; (80009f8 <rtc_alma_config_time+0x48>)
 80009ea:	4323      	orrs	r3, r4
 80009ec:	61d3      	str	r3, [r2, #28]
}
 80009ee:	bf00      	nop
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc90      	pop	{r4, r7}
 80009f6:	4770      	bx	lr
 80009f8:	40002800 	.word	0x40002800

080009fc <rtc_set_async_prescaler>:

static void rtc_set_async_prescaler(uint32_t AsynchPrescaler)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]

	MODIFY_REG(RTC->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 8000a04:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <rtc_set_async_prescaler+0x28>)
 8000a06:	691b      	ldr	r3, [r3, #16]
 8000a08:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	041b      	lsls	r3, r3, #16
 8000a10:	4904      	ldr	r1, [pc, #16]	; (8000a24 <rtc_set_async_prescaler+0x28>)
 8000a12:	4313      	orrs	r3, r2
 8000a14:	610b      	str	r3, [r1, #16]

}
 8000a16:	bf00      	nop
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	40002800 	.word	0x40002800

08000a28 <rtc_set_synch_prescaler>:

static void rtc_set_synch_prescaler(uint32_t SynchPrescaler)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RTC->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 8000a30:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <rtc_set_synch_prescaler+0x28>)
 8000a32:	691b      	ldr	r3, [r3, #16]
 8000a34:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000a38:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000a3c:	4904      	ldr	r1, [pc, #16]	; (8000a50 <rtc_set_synch_prescaler+0x28>)
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	610b      	str	r3, [r1, #16]
}
 8000a44:	bf00      	nop
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	40002800 	.word	0x40002800

08000a54 <rtc_enable_init_mode>:

static void rtc_enable_init_mode(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
	RTC->ISR = RTC_INIT_MASK;
 8000a58:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <rtc_enable_init_mode+0x18>)
 8000a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8000a5e:	60da      	str	r2, [r3, #12]
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	40002800 	.word	0x40002800

08000a70 <rtc_isActiveflag_init>:

static uint32_t rtc_isActiveflag_init(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
	return (READ_BIT(RTC->ISR,RTC_ISR_INITF) ==  (RTC_ISR_INITF));
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <rtc_isActiveflag_init+0x20>)
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a7c:	2b40      	cmp	r3, #64	; 0x40
 8000a7e:	bf0c      	ite	eq
 8000a80:	2301      	moveq	r3, #1
 8000a82:	2300      	movne	r3, #0
 8000a84:	b2db      	uxtb	r3, r3
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	40002800 	.word	0x40002800

08000a94 <rtc_init_seq>:

static uint32_t rtc_init_seq(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
	/*Set initialization mode*/
	rtc_enable_init_mode();
 8000a98:	f7ff ffdc 	bl	8000a54 <rtc_enable_init_mode>

	/*Check if initialization mode is set*/
	while(rtc_isActiveflag_init() != 1){}
 8000a9c:	bf00      	nop
 8000a9e:	f7ff ffe7 	bl	8000a70 <rtc_isActiveflag_init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d1fa      	bne.n	8000a9e <rtc_init_seq+0xa>

	return 1;
 8000aa8:	2301      	movs	r3, #1
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	bd80      	pop	{r7, pc}
	...

08000ab0 <rtc_exit_init_mode>:



static void rtc_exit_init_mode(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
	RTC->ISR = 0;
 8000ab4:	4b03      	ldr	r3, [pc, #12]	; (8000ac4 <rtc_exit_init_mode+0x14>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]

}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	40002800 	.word	0x40002800

08000ac8 <rtc_clearflag_rs>:


void rtc_clearflag_rs(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
    WRITE_REG(RTC->ISR, (~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTC->ISR & RTC_ISR_INIT)));
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <rtc_clearflag_rs+0x20>)
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ad4:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <rtc_clearflag_rs+0x20>)
 8000ad6:	f063 03a0 	orn	r3, r3, #160	; 0xa0
 8000ada:	60d3      	str	r3, [r2, #12]

}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	40002800 	.word	0x40002800

08000aec <rtc_isActiveflag_rs>:

static uint32_t  rtc_isActiveflag_rs(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
    return (READ_BIT(RTC->ISR, RTC_ISR_RSF) == (RTC_ISR_RSF));
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <rtc_isActiveflag_rs+0x20>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	f003 0320 	and.w	r3, r3, #32
 8000af8:	2b20      	cmp	r3, #32
 8000afa:	bf0c      	ite	eq
 8000afc:	2301      	moveq	r3, #1
 8000afe:	2300      	movne	r3, #0
 8000b00:	b2db      	uxtb	r3, r3

}
 8000b02:	4618      	mov	r0, r3
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	40002800 	.word	0x40002800

08000b10 <wait_for_synchro>:
static uint32_t wait_for_synchro(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
	/*Clear RSF flag*/
	rtc_clearflag_rs();
 8000b14:	f7ff ffd8 	bl	8000ac8 <rtc_clearflag_rs>

	/*Wait for registers to be synched*/
	while(rtc_isActiveflag_rs() != 1)
 8000b18:	bf00      	nop
 8000b1a:	f7ff ffe7 	bl	8000aec <rtc_isActiveflag_rs>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d1fa      	bne.n	8000b1a <wait_for_synchro+0xa>
	{

	}

	return 0;
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <exit_init_seq>:

static uint32_t exit_init_seq(void)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	af00      	add	r7, sp, #0
	/*Disable rtc init mode*/
	rtc_exit_init_mode();
 8000b2e:	f7ff ffbf 	bl	8000ab0 <rtc_exit_init_mode>

	/*Wait for registers to be synchronised*/
	return (wait_for_synchro());
 8000b32:	f7ff ffed 	bl	8000b10 <wait_for_synchro>
 8000b36:	4603      	mov	r3, r0

}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <rtc_convert_bcd2bin>:
{
	return  (uint8_t)((((value) / 10U) << 4U) | ((value) % 10U));
}

uint8_t rtc_convert_bcd2bin(uint8_t value )
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	71fb      	strb	r3, [r7, #7]
	return (uint8_t)(((uint8_t)((value) & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U + ((value) & (uint8_t)0x0FU));
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	091b      	lsrs	r3, r3, #4
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	0092      	lsls	r2, r2, #2
 8000b50:	4413      	add	r3, r2
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	f003 030f 	and.w	r3, r3, #15
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	4413      	add	r3, r2
 8000b60:	b2db      	uxtb	r3, r3
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
	...

08000b70 <rtc_date_get_day>:



uint32_t rtc_date_get_day (void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
 return (uint32_t)((READ_BIT(RTC->DR, (RTC_DR_DT | RTC_DR_DU))) >> RTC_DR_DU_Pos);
 8000b74:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <rtc_date_get_day+0x18>)
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	40002800 	.word	0x40002800

08000b8c <rtc_date_get_year>:

uint32_t rtc_date_get_year(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
 return (uint32_t)((READ_BIT(RTC->DR, (RTC_DR_YT | RTC_DR_YU))) >> RTC_DR_YU_Pos);
 8000b90:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <rtc_date_get_year+0x18>)
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	0c1b      	lsrs	r3, r3, #16
 8000b96:	b2db      	uxtb	r3, r3
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	40002800 	.word	0x40002800

08000ba8 <rtc_date_get_month>:


uint32_t rtc_date_get_month(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
 return (uint32_t)((READ_BIT(RTC->DR, (RTC_DR_MT | RTC_DR_MU)))>> RTC_DR_MU_Pos);
 8000bac:	4b04      	ldr	r3, [pc, #16]	; (8000bc0 <rtc_date_get_month+0x18>)
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	0a1b      	lsrs	r3, r3, #8
 8000bb2:	f003 031f 	and.w	r3, r3, #31
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	40002800 	.word	0x40002800

08000bc4 <rtc_time_get_second>:

uint32_t rtc_time_get_second(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
 return (uint32_t)(READ_BIT(RTC->TR, (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8000bc8:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <rtc_time_get_second+0x18>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	40002800 	.word	0x40002800

08000be0 <rtc_time_get_minute>:

uint32_t rtc_time_get_minute(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RTC->TR, (RTC_TR_MNT | RTC_TR_MNU))>> RTC_TR_MNU_Pos);
 8000be4:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <rtc_time_get_minute+0x18>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	0a1b      	lsrs	r3, r3, #8
 8000bea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	40002800 	.word	0x40002800

08000bfc <rtc_time_get_hour>:


uint32_t rtc_time_get_hour(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
 return (uint32_t)((READ_BIT(RTC->TR, (RTC_TR_HT | RTC_TR_HU))) >> RTC_TR_HU_Pos);
 8000c00:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <rtc_time_get_hour+0x18>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	0c1b      	lsrs	r3, r3, #16
 8000c06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	40002800 	.word	0x40002800

08000c18 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
 8000c28:	e00a      	b.n	8000c40 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c2a:	f3af 8000 	nop.w
 8000c2e:	4601      	mov	r1, r0
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	1c5a      	adds	r2, r3, #1
 8000c34:	60ba      	str	r2, [r7, #8]
 8000c36:	b2ca      	uxtb	r2, r1
 8000c38:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	617b      	str	r3, [r7, #20]
 8000c40:	697a      	ldr	r2, [r7, #20]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	dbf0      	blt.n	8000c2a <_read+0x12>
	}

return len;
 8000c48:	687b      	ldr	r3, [r7, #4]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3718      	adds	r7, #24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b086      	sub	sp, #24
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	60f8      	str	r0, [r7, #12]
 8000c5a:	60b9      	str	r1, [r7, #8]
 8000c5c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]
 8000c62:	e009      	b.n	8000c78 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	1c5a      	adds	r2, r3, #1
 8000c68:	60ba      	str	r2, [r7, #8]
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff fb07 	bl	8000280 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	3301      	adds	r3, #1
 8000c76:	617b      	str	r3, [r7, #20]
 8000c78:	697a      	ldr	r2, [r7, #20]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	dbf1      	blt.n	8000c64 <_write+0x12>
	}
	return len;
 8000c80:	687b      	ldr	r3, [r7, #4]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <_close>:

int _close(int file)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
	return -1;
 8000c92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b083      	sub	sp, #12
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
 8000caa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cb2:	605a      	str	r2, [r3, #4]
	return 0;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <_isatty>:

int _isatty(int file)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	b083      	sub	sp, #12
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
	return 1;
 8000cca:	2301      	movs	r3, #1
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
	return 0;
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3714      	adds	r7, #20
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
	...

08000cf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cfc:	4a14      	ldr	r2, [pc, #80]	; (8000d50 <_sbrk+0x5c>)
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <_sbrk+0x60>)
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d08:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <_sbrk+0x64>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d102      	bne.n	8000d16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d10:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <_sbrk+0x64>)
 8000d12:	4a12      	ldr	r2, [pc, #72]	; (8000d5c <_sbrk+0x68>)
 8000d14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <_sbrk+0x64>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d207      	bcs.n	8000d34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d24:	f000 f846 	bl	8000db4 <__errno>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	220c      	movs	r2, #12
 8000d2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d32:	e009      	b.n	8000d48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <_sbrk+0x64>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d3a:	4b07      	ldr	r3, [pc, #28]	; (8000d58 <_sbrk+0x64>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	4a05      	ldr	r2, [pc, #20]	; (8000d58 <_sbrk+0x64>)
 8000d44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d46:	68fb      	ldr	r3, [r7, #12]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3718      	adds	r7, #24
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20020000 	.word	0x20020000
 8000d54:	00000400 	.word	0x00000400
 8000d58:	200004cc 	.word	0x200004cc
 8000d5c:	20000648 	.word	0x20000648

08000d60 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d60:	480d      	ldr	r0, [pc, #52]	; (8000d98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d62:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d64:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d68:	480c      	ldr	r0, [pc, #48]	; (8000d9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d6a:	490d      	ldr	r1, [pc, #52]	; (8000da0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d6c:	4a0d      	ldr	r2, [pc, #52]	; (8000da4 <LoopForever+0xe>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d70:	e002      	b.n	8000d78 <LoopCopyDataInit>

08000d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d76:	3304      	adds	r3, #4

08000d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d7c:	d3f9      	bcc.n	8000d72 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d80:	4c0a      	ldr	r4, [pc, #40]	; (8000dac <LoopForever+0x16>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d84:	e001      	b.n	8000d8a <LoopFillZerobss>

08000d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d88:	3204      	adds	r2, #4

08000d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d8c:	d3fb      	bcc.n	8000d86 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d8e:	f000 f817 	bl	8000dc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d92:	f7ff fc2f 	bl	80005f4 <main>

08000d96 <LoopForever>:

LoopForever:
    b LoopForever
 8000d96:	e7fe      	b.n	8000d96 <LoopForever>
  ldr   r0, =_estack
 8000d98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000da4:	08002174 	.word	0x08002174
  ldr r2, =_sbss
 8000da8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000dac:	20000644 	.word	0x20000644

08000db0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000db0:	e7fe      	b.n	8000db0 <ADC_IRQHandler>
	...

08000db4 <__errno>:
 8000db4:	4b01      	ldr	r3, [pc, #4]	; (8000dbc <__errno+0x8>)
 8000db6:	6818      	ldr	r0, [r3, #0]
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	20000000 	.word	0x20000000

08000dc0 <__libc_init_array>:
 8000dc0:	b570      	push	{r4, r5, r6, lr}
 8000dc2:	4d0d      	ldr	r5, [pc, #52]	; (8000df8 <__libc_init_array+0x38>)
 8000dc4:	4c0d      	ldr	r4, [pc, #52]	; (8000dfc <__libc_init_array+0x3c>)
 8000dc6:	1b64      	subs	r4, r4, r5
 8000dc8:	10a4      	asrs	r4, r4, #2
 8000dca:	2600      	movs	r6, #0
 8000dcc:	42a6      	cmp	r6, r4
 8000dce:	d109      	bne.n	8000de4 <__libc_init_array+0x24>
 8000dd0:	4d0b      	ldr	r5, [pc, #44]	; (8000e00 <__libc_init_array+0x40>)
 8000dd2:	4c0c      	ldr	r4, [pc, #48]	; (8000e04 <__libc_init_array+0x44>)
 8000dd4:	f001 f948 	bl	8002068 <_init>
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	10a4      	asrs	r4, r4, #2
 8000ddc:	2600      	movs	r6, #0
 8000dde:	42a6      	cmp	r6, r4
 8000de0:	d105      	bne.n	8000dee <__libc_init_array+0x2e>
 8000de2:	bd70      	pop	{r4, r5, r6, pc}
 8000de4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000de8:	4798      	blx	r3
 8000dea:	3601      	adds	r6, #1
 8000dec:	e7ee      	b.n	8000dcc <__libc_init_array+0xc>
 8000dee:	f855 3b04 	ldr.w	r3, [r5], #4
 8000df2:	4798      	blx	r3
 8000df4:	3601      	adds	r6, #1
 8000df6:	e7f2      	b.n	8000dde <__libc_init_array+0x1e>
 8000df8:	0800216c 	.word	0x0800216c
 8000dfc:	0800216c 	.word	0x0800216c
 8000e00:	0800216c 	.word	0x0800216c
 8000e04:	08002170 	.word	0x08002170

08000e08 <memset>:
 8000e08:	4402      	add	r2, r0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d100      	bne.n	8000e12 <memset+0xa>
 8000e10:	4770      	bx	lr
 8000e12:	f803 1b01 	strb.w	r1, [r3], #1
 8000e16:	e7f9      	b.n	8000e0c <memset+0x4>

08000e18 <iprintf>:
 8000e18:	b40f      	push	{r0, r1, r2, r3}
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <iprintf+0x2c>)
 8000e1c:	b513      	push	{r0, r1, r4, lr}
 8000e1e:	681c      	ldr	r4, [r3, #0]
 8000e20:	b124      	cbz	r4, 8000e2c <iprintf+0x14>
 8000e22:	69a3      	ldr	r3, [r4, #24]
 8000e24:	b913      	cbnz	r3, 8000e2c <iprintf+0x14>
 8000e26:	4620      	mov	r0, r4
 8000e28:	f000 f886 	bl	8000f38 <__sinit>
 8000e2c:	ab05      	add	r3, sp, #20
 8000e2e:	9a04      	ldr	r2, [sp, #16]
 8000e30:	68a1      	ldr	r1, [r4, #8]
 8000e32:	9301      	str	r3, [sp, #4]
 8000e34:	4620      	mov	r0, r4
 8000e36:	f000 faff 	bl	8001438 <_vfiprintf_r>
 8000e3a:	b002      	add	sp, #8
 8000e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e40:	b004      	add	sp, #16
 8000e42:	4770      	bx	lr
 8000e44:	20000000 	.word	0x20000000

08000e48 <siprintf>:
 8000e48:	b40e      	push	{r1, r2, r3}
 8000e4a:	b500      	push	{lr}
 8000e4c:	b09c      	sub	sp, #112	; 0x70
 8000e4e:	ab1d      	add	r3, sp, #116	; 0x74
 8000e50:	9002      	str	r0, [sp, #8]
 8000e52:	9006      	str	r0, [sp, #24]
 8000e54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000e58:	4809      	ldr	r0, [pc, #36]	; (8000e80 <siprintf+0x38>)
 8000e5a:	9107      	str	r1, [sp, #28]
 8000e5c:	9104      	str	r1, [sp, #16]
 8000e5e:	4909      	ldr	r1, [pc, #36]	; (8000e84 <siprintf+0x3c>)
 8000e60:	f853 2b04 	ldr.w	r2, [r3], #4
 8000e64:	9105      	str	r1, [sp, #20]
 8000e66:	6800      	ldr	r0, [r0, #0]
 8000e68:	9301      	str	r3, [sp, #4]
 8000e6a:	a902      	add	r1, sp, #8
 8000e6c:	f000 f9ba 	bl	80011e4 <_svfiprintf_r>
 8000e70:	9b02      	ldr	r3, [sp, #8]
 8000e72:	2200      	movs	r2, #0
 8000e74:	701a      	strb	r2, [r3, #0]
 8000e76:	b01c      	add	sp, #112	; 0x70
 8000e78:	f85d eb04 	ldr.w	lr, [sp], #4
 8000e7c:	b003      	add	sp, #12
 8000e7e:	4770      	bx	lr
 8000e80:	20000000 	.word	0x20000000
 8000e84:	ffff0208 	.word	0xffff0208

08000e88 <std>:
 8000e88:	2300      	movs	r3, #0
 8000e8a:	b510      	push	{r4, lr}
 8000e8c:	4604      	mov	r4, r0
 8000e8e:	e9c0 3300 	strd	r3, r3, [r0]
 8000e92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000e96:	6083      	str	r3, [r0, #8]
 8000e98:	8181      	strh	r1, [r0, #12]
 8000e9a:	6643      	str	r3, [r0, #100]	; 0x64
 8000e9c:	81c2      	strh	r2, [r0, #14]
 8000e9e:	6183      	str	r3, [r0, #24]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	2208      	movs	r2, #8
 8000ea4:	305c      	adds	r0, #92	; 0x5c
 8000ea6:	f7ff ffaf 	bl	8000e08 <memset>
 8000eaa:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <std+0x38>)
 8000eac:	6263      	str	r3, [r4, #36]	; 0x24
 8000eae:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <std+0x3c>)
 8000eb0:	62a3      	str	r3, [r4, #40]	; 0x28
 8000eb2:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <std+0x40>)
 8000eb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000eb6:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <std+0x44>)
 8000eb8:	6224      	str	r4, [r4, #32]
 8000eba:	6323      	str	r3, [r4, #48]	; 0x30
 8000ebc:	bd10      	pop	{r4, pc}
 8000ebe:	bf00      	nop
 8000ec0:	080019e1 	.word	0x080019e1
 8000ec4:	08001a03 	.word	0x08001a03
 8000ec8:	08001a3b 	.word	0x08001a3b
 8000ecc:	08001a5f 	.word	0x08001a5f

08000ed0 <_cleanup_r>:
 8000ed0:	4901      	ldr	r1, [pc, #4]	; (8000ed8 <_cleanup_r+0x8>)
 8000ed2:	f000 b8af 	b.w	8001034 <_fwalk_reent>
 8000ed6:	bf00      	nop
 8000ed8:	08001d39 	.word	0x08001d39

08000edc <__sfmoreglue>:
 8000edc:	b570      	push	{r4, r5, r6, lr}
 8000ede:	1e4a      	subs	r2, r1, #1
 8000ee0:	2568      	movs	r5, #104	; 0x68
 8000ee2:	4355      	muls	r5, r2
 8000ee4:	460e      	mov	r6, r1
 8000ee6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000eea:	f000 f8c5 	bl	8001078 <_malloc_r>
 8000eee:	4604      	mov	r4, r0
 8000ef0:	b140      	cbz	r0, 8000f04 <__sfmoreglue+0x28>
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	e9c0 1600 	strd	r1, r6, [r0]
 8000ef8:	300c      	adds	r0, #12
 8000efa:	60a0      	str	r0, [r4, #8]
 8000efc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000f00:	f7ff ff82 	bl	8000e08 <memset>
 8000f04:	4620      	mov	r0, r4
 8000f06:	bd70      	pop	{r4, r5, r6, pc}

08000f08 <__sfp_lock_acquire>:
 8000f08:	4801      	ldr	r0, [pc, #4]	; (8000f10 <__sfp_lock_acquire+0x8>)
 8000f0a:	f000 b8b3 	b.w	8001074 <__retarget_lock_acquire_recursive>
 8000f0e:	bf00      	nop
 8000f10:	2000063c 	.word	0x2000063c

08000f14 <__sfp_lock_release>:
 8000f14:	4801      	ldr	r0, [pc, #4]	; (8000f1c <__sfp_lock_release+0x8>)
 8000f16:	f000 b8ae 	b.w	8001076 <__retarget_lock_release_recursive>
 8000f1a:	bf00      	nop
 8000f1c:	2000063c 	.word	0x2000063c

08000f20 <__sinit_lock_acquire>:
 8000f20:	4801      	ldr	r0, [pc, #4]	; (8000f28 <__sinit_lock_acquire+0x8>)
 8000f22:	f000 b8a7 	b.w	8001074 <__retarget_lock_acquire_recursive>
 8000f26:	bf00      	nop
 8000f28:	20000637 	.word	0x20000637

08000f2c <__sinit_lock_release>:
 8000f2c:	4801      	ldr	r0, [pc, #4]	; (8000f34 <__sinit_lock_release+0x8>)
 8000f2e:	f000 b8a2 	b.w	8001076 <__retarget_lock_release_recursive>
 8000f32:	bf00      	nop
 8000f34:	20000637 	.word	0x20000637

08000f38 <__sinit>:
 8000f38:	b510      	push	{r4, lr}
 8000f3a:	4604      	mov	r4, r0
 8000f3c:	f7ff fff0 	bl	8000f20 <__sinit_lock_acquire>
 8000f40:	69a3      	ldr	r3, [r4, #24]
 8000f42:	b11b      	cbz	r3, 8000f4c <__sinit+0x14>
 8000f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f48:	f7ff bff0 	b.w	8000f2c <__sinit_lock_release>
 8000f4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000f50:	6523      	str	r3, [r4, #80]	; 0x50
 8000f52:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <__sinit+0x68>)
 8000f54:	4a13      	ldr	r2, [pc, #76]	; (8000fa4 <__sinit+0x6c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	62a2      	str	r2, [r4, #40]	; 0x28
 8000f5a:	42a3      	cmp	r3, r4
 8000f5c:	bf04      	itt	eq
 8000f5e:	2301      	moveq	r3, #1
 8000f60:	61a3      	streq	r3, [r4, #24]
 8000f62:	4620      	mov	r0, r4
 8000f64:	f000 f820 	bl	8000fa8 <__sfp>
 8000f68:	6060      	str	r0, [r4, #4]
 8000f6a:	4620      	mov	r0, r4
 8000f6c:	f000 f81c 	bl	8000fa8 <__sfp>
 8000f70:	60a0      	str	r0, [r4, #8]
 8000f72:	4620      	mov	r0, r4
 8000f74:	f000 f818 	bl	8000fa8 <__sfp>
 8000f78:	2200      	movs	r2, #0
 8000f7a:	60e0      	str	r0, [r4, #12]
 8000f7c:	2104      	movs	r1, #4
 8000f7e:	6860      	ldr	r0, [r4, #4]
 8000f80:	f7ff ff82 	bl	8000e88 <std>
 8000f84:	68a0      	ldr	r0, [r4, #8]
 8000f86:	2201      	movs	r2, #1
 8000f88:	2109      	movs	r1, #9
 8000f8a:	f7ff ff7d 	bl	8000e88 <std>
 8000f8e:	68e0      	ldr	r0, [r4, #12]
 8000f90:	2202      	movs	r2, #2
 8000f92:	2112      	movs	r1, #18
 8000f94:	f7ff ff78 	bl	8000e88 <std>
 8000f98:	2301      	movs	r3, #1
 8000f9a:	61a3      	str	r3, [r4, #24]
 8000f9c:	e7d2      	b.n	8000f44 <__sinit+0xc>
 8000f9e:	bf00      	nop
 8000fa0:	080020d4 	.word	0x080020d4
 8000fa4:	08000ed1 	.word	0x08000ed1

08000fa8 <__sfp>:
 8000fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000faa:	4607      	mov	r7, r0
 8000fac:	f7ff ffac 	bl	8000f08 <__sfp_lock_acquire>
 8000fb0:	4b1e      	ldr	r3, [pc, #120]	; (800102c <__sfp+0x84>)
 8000fb2:	681e      	ldr	r6, [r3, #0]
 8000fb4:	69b3      	ldr	r3, [r6, #24]
 8000fb6:	b913      	cbnz	r3, 8000fbe <__sfp+0x16>
 8000fb8:	4630      	mov	r0, r6
 8000fba:	f7ff ffbd 	bl	8000f38 <__sinit>
 8000fbe:	3648      	adds	r6, #72	; 0x48
 8000fc0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000fc4:	3b01      	subs	r3, #1
 8000fc6:	d503      	bpl.n	8000fd0 <__sfp+0x28>
 8000fc8:	6833      	ldr	r3, [r6, #0]
 8000fca:	b30b      	cbz	r3, 8001010 <__sfp+0x68>
 8000fcc:	6836      	ldr	r6, [r6, #0]
 8000fce:	e7f7      	b.n	8000fc0 <__sfp+0x18>
 8000fd0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000fd4:	b9d5      	cbnz	r5, 800100c <__sfp+0x64>
 8000fd6:	4b16      	ldr	r3, [pc, #88]	; (8001030 <__sfp+0x88>)
 8000fd8:	60e3      	str	r3, [r4, #12]
 8000fda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000fde:	6665      	str	r5, [r4, #100]	; 0x64
 8000fe0:	f000 f847 	bl	8001072 <__retarget_lock_init_recursive>
 8000fe4:	f7ff ff96 	bl	8000f14 <__sfp_lock_release>
 8000fe8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000fec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000ff0:	6025      	str	r5, [r4, #0]
 8000ff2:	61a5      	str	r5, [r4, #24]
 8000ff4:	2208      	movs	r2, #8
 8000ff6:	4629      	mov	r1, r5
 8000ff8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000ffc:	f7ff ff04 	bl	8000e08 <memset>
 8001000:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001004:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001008:	4620      	mov	r0, r4
 800100a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800100c:	3468      	adds	r4, #104	; 0x68
 800100e:	e7d9      	b.n	8000fc4 <__sfp+0x1c>
 8001010:	2104      	movs	r1, #4
 8001012:	4638      	mov	r0, r7
 8001014:	f7ff ff62 	bl	8000edc <__sfmoreglue>
 8001018:	4604      	mov	r4, r0
 800101a:	6030      	str	r0, [r6, #0]
 800101c:	2800      	cmp	r0, #0
 800101e:	d1d5      	bne.n	8000fcc <__sfp+0x24>
 8001020:	f7ff ff78 	bl	8000f14 <__sfp_lock_release>
 8001024:	230c      	movs	r3, #12
 8001026:	603b      	str	r3, [r7, #0]
 8001028:	e7ee      	b.n	8001008 <__sfp+0x60>
 800102a:	bf00      	nop
 800102c:	080020d4 	.word	0x080020d4
 8001030:	ffff0001 	.word	0xffff0001

08001034 <_fwalk_reent>:
 8001034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001038:	4606      	mov	r6, r0
 800103a:	4688      	mov	r8, r1
 800103c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001040:	2700      	movs	r7, #0
 8001042:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001046:	f1b9 0901 	subs.w	r9, r9, #1
 800104a:	d505      	bpl.n	8001058 <_fwalk_reent+0x24>
 800104c:	6824      	ldr	r4, [r4, #0]
 800104e:	2c00      	cmp	r4, #0
 8001050:	d1f7      	bne.n	8001042 <_fwalk_reent+0xe>
 8001052:	4638      	mov	r0, r7
 8001054:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001058:	89ab      	ldrh	r3, [r5, #12]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d907      	bls.n	800106e <_fwalk_reent+0x3a>
 800105e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001062:	3301      	adds	r3, #1
 8001064:	d003      	beq.n	800106e <_fwalk_reent+0x3a>
 8001066:	4629      	mov	r1, r5
 8001068:	4630      	mov	r0, r6
 800106a:	47c0      	blx	r8
 800106c:	4307      	orrs	r7, r0
 800106e:	3568      	adds	r5, #104	; 0x68
 8001070:	e7e9      	b.n	8001046 <_fwalk_reent+0x12>

08001072 <__retarget_lock_init_recursive>:
 8001072:	4770      	bx	lr

08001074 <__retarget_lock_acquire_recursive>:
 8001074:	4770      	bx	lr

08001076 <__retarget_lock_release_recursive>:
 8001076:	4770      	bx	lr

08001078 <_malloc_r>:
 8001078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800107a:	1ccd      	adds	r5, r1, #3
 800107c:	f025 0503 	bic.w	r5, r5, #3
 8001080:	3508      	adds	r5, #8
 8001082:	2d0c      	cmp	r5, #12
 8001084:	bf38      	it	cc
 8001086:	250c      	movcc	r5, #12
 8001088:	2d00      	cmp	r5, #0
 800108a:	4606      	mov	r6, r0
 800108c:	db01      	blt.n	8001092 <_malloc_r+0x1a>
 800108e:	42a9      	cmp	r1, r5
 8001090:	d903      	bls.n	800109a <_malloc_r+0x22>
 8001092:	230c      	movs	r3, #12
 8001094:	6033      	str	r3, [r6, #0]
 8001096:	2000      	movs	r0, #0
 8001098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800109a:	f000 ff27 	bl	8001eec <__malloc_lock>
 800109e:	4921      	ldr	r1, [pc, #132]	; (8001124 <_malloc_r+0xac>)
 80010a0:	680a      	ldr	r2, [r1, #0]
 80010a2:	4614      	mov	r4, r2
 80010a4:	b99c      	cbnz	r4, 80010ce <_malloc_r+0x56>
 80010a6:	4f20      	ldr	r7, [pc, #128]	; (8001128 <_malloc_r+0xb0>)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	b923      	cbnz	r3, 80010b6 <_malloc_r+0x3e>
 80010ac:	4621      	mov	r1, r4
 80010ae:	4630      	mov	r0, r6
 80010b0:	f000 fc86 	bl	80019c0 <_sbrk_r>
 80010b4:	6038      	str	r0, [r7, #0]
 80010b6:	4629      	mov	r1, r5
 80010b8:	4630      	mov	r0, r6
 80010ba:	f000 fc81 	bl	80019c0 <_sbrk_r>
 80010be:	1c43      	adds	r3, r0, #1
 80010c0:	d123      	bne.n	800110a <_malloc_r+0x92>
 80010c2:	230c      	movs	r3, #12
 80010c4:	6033      	str	r3, [r6, #0]
 80010c6:	4630      	mov	r0, r6
 80010c8:	f000 ff16 	bl	8001ef8 <__malloc_unlock>
 80010cc:	e7e3      	b.n	8001096 <_malloc_r+0x1e>
 80010ce:	6823      	ldr	r3, [r4, #0]
 80010d0:	1b5b      	subs	r3, r3, r5
 80010d2:	d417      	bmi.n	8001104 <_malloc_r+0x8c>
 80010d4:	2b0b      	cmp	r3, #11
 80010d6:	d903      	bls.n	80010e0 <_malloc_r+0x68>
 80010d8:	6023      	str	r3, [r4, #0]
 80010da:	441c      	add	r4, r3
 80010dc:	6025      	str	r5, [r4, #0]
 80010de:	e004      	b.n	80010ea <_malloc_r+0x72>
 80010e0:	6863      	ldr	r3, [r4, #4]
 80010e2:	42a2      	cmp	r2, r4
 80010e4:	bf0c      	ite	eq
 80010e6:	600b      	streq	r3, [r1, #0]
 80010e8:	6053      	strne	r3, [r2, #4]
 80010ea:	4630      	mov	r0, r6
 80010ec:	f000 ff04 	bl	8001ef8 <__malloc_unlock>
 80010f0:	f104 000b 	add.w	r0, r4, #11
 80010f4:	1d23      	adds	r3, r4, #4
 80010f6:	f020 0007 	bic.w	r0, r0, #7
 80010fa:	1ac2      	subs	r2, r0, r3
 80010fc:	d0cc      	beq.n	8001098 <_malloc_r+0x20>
 80010fe:	1a1b      	subs	r3, r3, r0
 8001100:	50a3      	str	r3, [r4, r2]
 8001102:	e7c9      	b.n	8001098 <_malloc_r+0x20>
 8001104:	4622      	mov	r2, r4
 8001106:	6864      	ldr	r4, [r4, #4]
 8001108:	e7cc      	b.n	80010a4 <_malloc_r+0x2c>
 800110a:	1cc4      	adds	r4, r0, #3
 800110c:	f024 0403 	bic.w	r4, r4, #3
 8001110:	42a0      	cmp	r0, r4
 8001112:	d0e3      	beq.n	80010dc <_malloc_r+0x64>
 8001114:	1a21      	subs	r1, r4, r0
 8001116:	4630      	mov	r0, r6
 8001118:	f000 fc52 	bl	80019c0 <_sbrk_r>
 800111c:	3001      	adds	r0, #1
 800111e:	d1dd      	bne.n	80010dc <_malloc_r+0x64>
 8001120:	e7cf      	b.n	80010c2 <_malloc_r+0x4a>
 8001122:	bf00      	nop
 8001124:	200004d0 	.word	0x200004d0
 8001128:	200004d4 	.word	0x200004d4

0800112c <__ssputs_r>:
 800112c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001130:	688e      	ldr	r6, [r1, #8]
 8001132:	429e      	cmp	r6, r3
 8001134:	4682      	mov	sl, r0
 8001136:	460c      	mov	r4, r1
 8001138:	4690      	mov	r8, r2
 800113a:	461f      	mov	r7, r3
 800113c:	d838      	bhi.n	80011b0 <__ssputs_r+0x84>
 800113e:	898a      	ldrh	r2, [r1, #12]
 8001140:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001144:	d032      	beq.n	80011ac <__ssputs_r+0x80>
 8001146:	6825      	ldr	r5, [r4, #0]
 8001148:	6909      	ldr	r1, [r1, #16]
 800114a:	eba5 0901 	sub.w	r9, r5, r1
 800114e:	6965      	ldr	r5, [r4, #20]
 8001150:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001154:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001158:	3301      	adds	r3, #1
 800115a:	444b      	add	r3, r9
 800115c:	106d      	asrs	r5, r5, #1
 800115e:	429d      	cmp	r5, r3
 8001160:	bf38      	it	cc
 8001162:	461d      	movcc	r5, r3
 8001164:	0553      	lsls	r3, r2, #21
 8001166:	d531      	bpl.n	80011cc <__ssputs_r+0xa0>
 8001168:	4629      	mov	r1, r5
 800116a:	f7ff ff85 	bl	8001078 <_malloc_r>
 800116e:	4606      	mov	r6, r0
 8001170:	b950      	cbnz	r0, 8001188 <__ssputs_r+0x5c>
 8001172:	230c      	movs	r3, #12
 8001174:	f8ca 3000 	str.w	r3, [sl]
 8001178:	89a3      	ldrh	r3, [r4, #12]
 800117a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800117e:	81a3      	strh	r3, [r4, #12]
 8001180:	f04f 30ff 	mov.w	r0, #4294967295
 8001184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001188:	6921      	ldr	r1, [r4, #16]
 800118a:	464a      	mov	r2, r9
 800118c:	f000 fe86 	bl	8001e9c <memcpy>
 8001190:	89a3      	ldrh	r3, [r4, #12]
 8001192:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800119a:	81a3      	strh	r3, [r4, #12]
 800119c:	6126      	str	r6, [r4, #16]
 800119e:	6165      	str	r5, [r4, #20]
 80011a0:	444e      	add	r6, r9
 80011a2:	eba5 0509 	sub.w	r5, r5, r9
 80011a6:	6026      	str	r6, [r4, #0]
 80011a8:	60a5      	str	r5, [r4, #8]
 80011aa:	463e      	mov	r6, r7
 80011ac:	42be      	cmp	r6, r7
 80011ae:	d900      	bls.n	80011b2 <__ssputs_r+0x86>
 80011b0:	463e      	mov	r6, r7
 80011b2:	4632      	mov	r2, r6
 80011b4:	6820      	ldr	r0, [r4, #0]
 80011b6:	4641      	mov	r1, r8
 80011b8:	f000 fe7e 	bl	8001eb8 <memmove>
 80011bc:	68a3      	ldr	r3, [r4, #8]
 80011be:	6822      	ldr	r2, [r4, #0]
 80011c0:	1b9b      	subs	r3, r3, r6
 80011c2:	4432      	add	r2, r6
 80011c4:	60a3      	str	r3, [r4, #8]
 80011c6:	6022      	str	r2, [r4, #0]
 80011c8:	2000      	movs	r0, #0
 80011ca:	e7db      	b.n	8001184 <__ssputs_r+0x58>
 80011cc:	462a      	mov	r2, r5
 80011ce:	f000 fee9 	bl	8001fa4 <_realloc_r>
 80011d2:	4606      	mov	r6, r0
 80011d4:	2800      	cmp	r0, #0
 80011d6:	d1e1      	bne.n	800119c <__ssputs_r+0x70>
 80011d8:	6921      	ldr	r1, [r4, #16]
 80011da:	4650      	mov	r0, sl
 80011dc:	f000 fe92 	bl	8001f04 <_free_r>
 80011e0:	e7c7      	b.n	8001172 <__ssputs_r+0x46>
	...

080011e4 <_svfiprintf_r>:
 80011e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011e8:	4698      	mov	r8, r3
 80011ea:	898b      	ldrh	r3, [r1, #12]
 80011ec:	061b      	lsls	r3, r3, #24
 80011ee:	b09d      	sub	sp, #116	; 0x74
 80011f0:	4607      	mov	r7, r0
 80011f2:	460d      	mov	r5, r1
 80011f4:	4614      	mov	r4, r2
 80011f6:	d50e      	bpl.n	8001216 <_svfiprintf_r+0x32>
 80011f8:	690b      	ldr	r3, [r1, #16]
 80011fa:	b963      	cbnz	r3, 8001216 <_svfiprintf_r+0x32>
 80011fc:	2140      	movs	r1, #64	; 0x40
 80011fe:	f7ff ff3b 	bl	8001078 <_malloc_r>
 8001202:	6028      	str	r0, [r5, #0]
 8001204:	6128      	str	r0, [r5, #16]
 8001206:	b920      	cbnz	r0, 8001212 <_svfiprintf_r+0x2e>
 8001208:	230c      	movs	r3, #12
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	f04f 30ff 	mov.w	r0, #4294967295
 8001210:	e0d1      	b.n	80013b6 <_svfiprintf_r+0x1d2>
 8001212:	2340      	movs	r3, #64	; 0x40
 8001214:	616b      	str	r3, [r5, #20]
 8001216:	2300      	movs	r3, #0
 8001218:	9309      	str	r3, [sp, #36]	; 0x24
 800121a:	2320      	movs	r3, #32
 800121c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001220:	f8cd 800c 	str.w	r8, [sp, #12]
 8001224:	2330      	movs	r3, #48	; 0x30
 8001226:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80013d0 <_svfiprintf_r+0x1ec>
 800122a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800122e:	f04f 0901 	mov.w	r9, #1
 8001232:	4623      	mov	r3, r4
 8001234:	469a      	mov	sl, r3
 8001236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800123a:	b10a      	cbz	r2, 8001240 <_svfiprintf_r+0x5c>
 800123c:	2a25      	cmp	r2, #37	; 0x25
 800123e:	d1f9      	bne.n	8001234 <_svfiprintf_r+0x50>
 8001240:	ebba 0b04 	subs.w	fp, sl, r4
 8001244:	d00b      	beq.n	800125e <_svfiprintf_r+0x7a>
 8001246:	465b      	mov	r3, fp
 8001248:	4622      	mov	r2, r4
 800124a:	4629      	mov	r1, r5
 800124c:	4638      	mov	r0, r7
 800124e:	f7ff ff6d 	bl	800112c <__ssputs_r>
 8001252:	3001      	adds	r0, #1
 8001254:	f000 80aa 	beq.w	80013ac <_svfiprintf_r+0x1c8>
 8001258:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800125a:	445a      	add	r2, fp
 800125c:	9209      	str	r2, [sp, #36]	; 0x24
 800125e:	f89a 3000 	ldrb.w	r3, [sl]
 8001262:	2b00      	cmp	r3, #0
 8001264:	f000 80a2 	beq.w	80013ac <_svfiprintf_r+0x1c8>
 8001268:	2300      	movs	r3, #0
 800126a:	f04f 32ff 	mov.w	r2, #4294967295
 800126e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001272:	f10a 0a01 	add.w	sl, sl, #1
 8001276:	9304      	str	r3, [sp, #16]
 8001278:	9307      	str	r3, [sp, #28]
 800127a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800127e:	931a      	str	r3, [sp, #104]	; 0x68
 8001280:	4654      	mov	r4, sl
 8001282:	2205      	movs	r2, #5
 8001284:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001288:	4851      	ldr	r0, [pc, #324]	; (80013d0 <_svfiprintf_r+0x1ec>)
 800128a:	f7fe ffa9 	bl	80001e0 <memchr>
 800128e:	9a04      	ldr	r2, [sp, #16]
 8001290:	b9d8      	cbnz	r0, 80012ca <_svfiprintf_r+0xe6>
 8001292:	06d0      	lsls	r0, r2, #27
 8001294:	bf44      	itt	mi
 8001296:	2320      	movmi	r3, #32
 8001298:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800129c:	0711      	lsls	r1, r2, #28
 800129e:	bf44      	itt	mi
 80012a0:	232b      	movmi	r3, #43	; 0x2b
 80012a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80012a6:	f89a 3000 	ldrb.w	r3, [sl]
 80012aa:	2b2a      	cmp	r3, #42	; 0x2a
 80012ac:	d015      	beq.n	80012da <_svfiprintf_r+0xf6>
 80012ae:	9a07      	ldr	r2, [sp, #28]
 80012b0:	4654      	mov	r4, sl
 80012b2:	2000      	movs	r0, #0
 80012b4:	f04f 0c0a 	mov.w	ip, #10
 80012b8:	4621      	mov	r1, r4
 80012ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80012be:	3b30      	subs	r3, #48	; 0x30
 80012c0:	2b09      	cmp	r3, #9
 80012c2:	d94e      	bls.n	8001362 <_svfiprintf_r+0x17e>
 80012c4:	b1b0      	cbz	r0, 80012f4 <_svfiprintf_r+0x110>
 80012c6:	9207      	str	r2, [sp, #28]
 80012c8:	e014      	b.n	80012f4 <_svfiprintf_r+0x110>
 80012ca:	eba0 0308 	sub.w	r3, r0, r8
 80012ce:	fa09 f303 	lsl.w	r3, r9, r3
 80012d2:	4313      	orrs	r3, r2
 80012d4:	9304      	str	r3, [sp, #16]
 80012d6:	46a2      	mov	sl, r4
 80012d8:	e7d2      	b.n	8001280 <_svfiprintf_r+0x9c>
 80012da:	9b03      	ldr	r3, [sp, #12]
 80012dc:	1d19      	adds	r1, r3, #4
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	9103      	str	r1, [sp, #12]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	bfbb      	ittet	lt
 80012e6:	425b      	neglt	r3, r3
 80012e8:	f042 0202 	orrlt.w	r2, r2, #2
 80012ec:	9307      	strge	r3, [sp, #28]
 80012ee:	9307      	strlt	r3, [sp, #28]
 80012f0:	bfb8      	it	lt
 80012f2:	9204      	strlt	r2, [sp, #16]
 80012f4:	7823      	ldrb	r3, [r4, #0]
 80012f6:	2b2e      	cmp	r3, #46	; 0x2e
 80012f8:	d10c      	bne.n	8001314 <_svfiprintf_r+0x130>
 80012fa:	7863      	ldrb	r3, [r4, #1]
 80012fc:	2b2a      	cmp	r3, #42	; 0x2a
 80012fe:	d135      	bne.n	800136c <_svfiprintf_r+0x188>
 8001300:	9b03      	ldr	r3, [sp, #12]
 8001302:	1d1a      	adds	r2, r3, #4
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	9203      	str	r2, [sp, #12]
 8001308:	2b00      	cmp	r3, #0
 800130a:	bfb8      	it	lt
 800130c:	f04f 33ff 	movlt.w	r3, #4294967295
 8001310:	3402      	adds	r4, #2
 8001312:	9305      	str	r3, [sp, #20]
 8001314:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80013e0 <_svfiprintf_r+0x1fc>
 8001318:	7821      	ldrb	r1, [r4, #0]
 800131a:	2203      	movs	r2, #3
 800131c:	4650      	mov	r0, sl
 800131e:	f7fe ff5f 	bl	80001e0 <memchr>
 8001322:	b140      	cbz	r0, 8001336 <_svfiprintf_r+0x152>
 8001324:	2340      	movs	r3, #64	; 0x40
 8001326:	eba0 000a 	sub.w	r0, r0, sl
 800132a:	fa03 f000 	lsl.w	r0, r3, r0
 800132e:	9b04      	ldr	r3, [sp, #16]
 8001330:	4303      	orrs	r3, r0
 8001332:	3401      	adds	r4, #1
 8001334:	9304      	str	r3, [sp, #16]
 8001336:	f814 1b01 	ldrb.w	r1, [r4], #1
 800133a:	4826      	ldr	r0, [pc, #152]	; (80013d4 <_svfiprintf_r+0x1f0>)
 800133c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001340:	2206      	movs	r2, #6
 8001342:	f7fe ff4d 	bl	80001e0 <memchr>
 8001346:	2800      	cmp	r0, #0
 8001348:	d038      	beq.n	80013bc <_svfiprintf_r+0x1d8>
 800134a:	4b23      	ldr	r3, [pc, #140]	; (80013d8 <_svfiprintf_r+0x1f4>)
 800134c:	bb1b      	cbnz	r3, 8001396 <_svfiprintf_r+0x1b2>
 800134e:	9b03      	ldr	r3, [sp, #12]
 8001350:	3307      	adds	r3, #7
 8001352:	f023 0307 	bic.w	r3, r3, #7
 8001356:	3308      	adds	r3, #8
 8001358:	9303      	str	r3, [sp, #12]
 800135a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800135c:	4433      	add	r3, r6
 800135e:	9309      	str	r3, [sp, #36]	; 0x24
 8001360:	e767      	b.n	8001232 <_svfiprintf_r+0x4e>
 8001362:	fb0c 3202 	mla	r2, ip, r2, r3
 8001366:	460c      	mov	r4, r1
 8001368:	2001      	movs	r0, #1
 800136a:	e7a5      	b.n	80012b8 <_svfiprintf_r+0xd4>
 800136c:	2300      	movs	r3, #0
 800136e:	3401      	adds	r4, #1
 8001370:	9305      	str	r3, [sp, #20]
 8001372:	4619      	mov	r1, r3
 8001374:	f04f 0c0a 	mov.w	ip, #10
 8001378:	4620      	mov	r0, r4
 800137a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800137e:	3a30      	subs	r2, #48	; 0x30
 8001380:	2a09      	cmp	r2, #9
 8001382:	d903      	bls.n	800138c <_svfiprintf_r+0x1a8>
 8001384:	2b00      	cmp	r3, #0
 8001386:	d0c5      	beq.n	8001314 <_svfiprintf_r+0x130>
 8001388:	9105      	str	r1, [sp, #20]
 800138a:	e7c3      	b.n	8001314 <_svfiprintf_r+0x130>
 800138c:	fb0c 2101 	mla	r1, ip, r1, r2
 8001390:	4604      	mov	r4, r0
 8001392:	2301      	movs	r3, #1
 8001394:	e7f0      	b.n	8001378 <_svfiprintf_r+0x194>
 8001396:	ab03      	add	r3, sp, #12
 8001398:	9300      	str	r3, [sp, #0]
 800139a:	462a      	mov	r2, r5
 800139c:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <_svfiprintf_r+0x1f8>)
 800139e:	a904      	add	r1, sp, #16
 80013a0:	4638      	mov	r0, r7
 80013a2:	f3af 8000 	nop.w
 80013a6:	1c42      	adds	r2, r0, #1
 80013a8:	4606      	mov	r6, r0
 80013aa:	d1d6      	bne.n	800135a <_svfiprintf_r+0x176>
 80013ac:	89ab      	ldrh	r3, [r5, #12]
 80013ae:	065b      	lsls	r3, r3, #25
 80013b0:	f53f af2c 	bmi.w	800120c <_svfiprintf_r+0x28>
 80013b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80013b6:	b01d      	add	sp, #116	; 0x74
 80013b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013bc:	ab03      	add	r3, sp, #12
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	462a      	mov	r2, r5
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <_svfiprintf_r+0x1f8>)
 80013c4:	a904      	add	r1, sp, #16
 80013c6:	4638      	mov	r0, r7
 80013c8:	f000 f9d4 	bl	8001774 <_printf_i>
 80013cc:	e7eb      	b.n	80013a6 <_svfiprintf_r+0x1c2>
 80013ce:	bf00      	nop
 80013d0:	08002138 	.word	0x08002138
 80013d4:	08002142 	.word	0x08002142
 80013d8:	00000000 	.word	0x00000000
 80013dc:	0800112d 	.word	0x0800112d
 80013e0:	0800213e 	.word	0x0800213e

080013e4 <__sfputc_r>:
 80013e4:	6893      	ldr	r3, [r2, #8]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	b410      	push	{r4}
 80013ec:	6093      	str	r3, [r2, #8]
 80013ee:	da08      	bge.n	8001402 <__sfputc_r+0x1e>
 80013f0:	6994      	ldr	r4, [r2, #24]
 80013f2:	42a3      	cmp	r3, r4
 80013f4:	db01      	blt.n	80013fa <__sfputc_r+0x16>
 80013f6:	290a      	cmp	r1, #10
 80013f8:	d103      	bne.n	8001402 <__sfputc_r+0x1e>
 80013fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80013fe:	f000 bb33 	b.w	8001a68 <__swbuf_r>
 8001402:	6813      	ldr	r3, [r2, #0]
 8001404:	1c58      	adds	r0, r3, #1
 8001406:	6010      	str	r0, [r2, #0]
 8001408:	7019      	strb	r1, [r3, #0]
 800140a:	4608      	mov	r0, r1
 800140c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001410:	4770      	bx	lr

08001412 <__sfputs_r>:
 8001412:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001414:	4606      	mov	r6, r0
 8001416:	460f      	mov	r7, r1
 8001418:	4614      	mov	r4, r2
 800141a:	18d5      	adds	r5, r2, r3
 800141c:	42ac      	cmp	r4, r5
 800141e:	d101      	bne.n	8001424 <__sfputs_r+0x12>
 8001420:	2000      	movs	r0, #0
 8001422:	e007      	b.n	8001434 <__sfputs_r+0x22>
 8001424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001428:	463a      	mov	r2, r7
 800142a:	4630      	mov	r0, r6
 800142c:	f7ff ffda 	bl	80013e4 <__sfputc_r>
 8001430:	1c43      	adds	r3, r0, #1
 8001432:	d1f3      	bne.n	800141c <__sfputs_r+0xa>
 8001434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001438 <_vfiprintf_r>:
 8001438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800143c:	460d      	mov	r5, r1
 800143e:	b09d      	sub	sp, #116	; 0x74
 8001440:	4614      	mov	r4, r2
 8001442:	4698      	mov	r8, r3
 8001444:	4606      	mov	r6, r0
 8001446:	b118      	cbz	r0, 8001450 <_vfiprintf_r+0x18>
 8001448:	6983      	ldr	r3, [r0, #24]
 800144a:	b90b      	cbnz	r3, 8001450 <_vfiprintf_r+0x18>
 800144c:	f7ff fd74 	bl	8000f38 <__sinit>
 8001450:	4b89      	ldr	r3, [pc, #548]	; (8001678 <_vfiprintf_r+0x240>)
 8001452:	429d      	cmp	r5, r3
 8001454:	d11b      	bne.n	800148e <_vfiprintf_r+0x56>
 8001456:	6875      	ldr	r5, [r6, #4]
 8001458:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800145a:	07d9      	lsls	r1, r3, #31
 800145c:	d405      	bmi.n	800146a <_vfiprintf_r+0x32>
 800145e:	89ab      	ldrh	r3, [r5, #12]
 8001460:	059a      	lsls	r2, r3, #22
 8001462:	d402      	bmi.n	800146a <_vfiprintf_r+0x32>
 8001464:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001466:	f7ff fe05 	bl	8001074 <__retarget_lock_acquire_recursive>
 800146a:	89ab      	ldrh	r3, [r5, #12]
 800146c:	071b      	lsls	r3, r3, #28
 800146e:	d501      	bpl.n	8001474 <_vfiprintf_r+0x3c>
 8001470:	692b      	ldr	r3, [r5, #16]
 8001472:	b9eb      	cbnz	r3, 80014b0 <_vfiprintf_r+0x78>
 8001474:	4629      	mov	r1, r5
 8001476:	4630      	mov	r0, r6
 8001478:	f000 fb5a 	bl	8001b30 <__swsetup_r>
 800147c:	b1c0      	cbz	r0, 80014b0 <_vfiprintf_r+0x78>
 800147e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001480:	07dc      	lsls	r4, r3, #31
 8001482:	d50e      	bpl.n	80014a2 <_vfiprintf_r+0x6a>
 8001484:	f04f 30ff 	mov.w	r0, #4294967295
 8001488:	b01d      	add	sp, #116	; 0x74
 800148a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800148e:	4b7b      	ldr	r3, [pc, #492]	; (800167c <_vfiprintf_r+0x244>)
 8001490:	429d      	cmp	r5, r3
 8001492:	d101      	bne.n	8001498 <_vfiprintf_r+0x60>
 8001494:	68b5      	ldr	r5, [r6, #8]
 8001496:	e7df      	b.n	8001458 <_vfiprintf_r+0x20>
 8001498:	4b79      	ldr	r3, [pc, #484]	; (8001680 <_vfiprintf_r+0x248>)
 800149a:	429d      	cmp	r5, r3
 800149c:	bf08      	it	eq
 800149e:	68f5      	ldreq	r5, [r6, #12]
 80014a0:	e7da      	b.n	8001458 <_vfiprintf_r+0x20>
 80014a2:	89ab      	ldrh	r3, [r5, #12]
 80014a4:	0598      	lsls	r0, r3, #22
 80014a6:	d4ed      	bmi.n	8001484 <_vfiprintf_r+0x4c>
 80014a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80014aa:	f7ff fde4 	bl	8001076 <__retarget_lock_release_recursive>
 80014ae:	e7e9      	b.n	8001484 <_vfiprintf_r+0x4c>
 80014b0:	2300      	movs	r3, #0
 80014b2:	9309      	str	r3, [sp, #36]	; 0x24
 80014b4:	2320      	movs	r3, #32
 80014b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80014ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80014be:	2330      	movs	r3, #48	; 0x30
 80014c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001684 <_vfiprintf_r+0x24c>
 80014c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80014c8:	f04f 0901 	mov.w	r9, #1
 80014cc:	4623      	mov	r3, r4
 80014ce:	469a      	mov	sl, r3
 80014d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80014d4:	b10a      	cbz	r2, 80014da <_vfiprintf_r+0xa2>
 80014d6:	2a25      	cmp	r2, #37	; 0x25
 80014d8:	d1f9      	bne.n	80014ce <_vfiprintf_r+0x96>
 80014da:	ebba 0b04 	subs.w	fp, sl, r4
 80014de:	d00b      	beq.n	80014f8 <_vfiprintf_r+0xc0>
 80014e0:	465b      	mov	r3, fp
 80014e2:	4622      	mov	r2, r4
 80014e4:	4629      	mov	r1, r5
 80014e6:	4630      	mov	r0, r6
 80014e8:	f7ff ff93 	bl	8001412 <__sfputs_r>
 80014ec:	3001      	adds	r0, #1
 80014ee:	f000 80aa 	beq.w	8001646 <_vfiprintf_r+0x20e>
 80014f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80014f4:	445a      	add	r2, fp
 80014f6:	9209      	str	r2, [sp, #36]	; 0x24
 80014f8:	f89a 3000 	ldrb.w	r3, [sl]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	f000 80a2 	beq.w	8001646 <_vfiprintf_r+0x20e>
 8001502:	2300      	movs	r3, #0
 8001504:	f04f 32ff 	mov.w	r2, #4294967295
 8001508:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800150c:	f10a 0a01 	add.w	sl, sl, #1
 8001510:	9304      	str	r3, [sp, #16]
 8001512:	9307      	str	r3, [sp, #28]
 8001514:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001518:	931a      	str	r3, [sp, #104]	; 0x68
 800151a:	4654      	mov	r4, sl
 800151c:	2205      	movs	r2, #5
 800151e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001522:	4858      	ldr	r0, [pc, #352]	; (8001684 <_vfiprintf_r+0x24c>)
 8001524:	f7fe fe5c 	bl	80001e0 <memchr>
 8001528:	9a04      	ldr	r2, [sp, #16]
 800152a:	b9d8      	cbnz	r0, 8001564 <_vfiprintf_r+0x12c>
 800152c:	06d1      	lsls	r1, r2, #27
 800152e:	bf44      	itt	mi
 8001530:	2320      	movmi	r3, #32
 8001532:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001536:	0713      	lsls	r3, r2, #28
 8001538:	bf44      	itt	mi
 800153a:	232b      	movmi	r3, #43	; 0x2b
 800153c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001540:	f89a 3000 	ldrb.w	r3, [sl]
 8001544:	2b2a      	cmp	r3, #42	; 0x2a
 8001546:	d015      	beq.n	8001574 <_vfiprintf_r+0x13c>
 8001548:	9a07      	ldr	r2, [sp, #28]
 800154a:	4654      	mov	r4, sl
 800154c:	2000      	movs	r0, #0
 800154e:	f04f 0c0a 	mov.w	ip, #10
 8001552:	4621      	mov	r1, r4
 8001554:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001558:	3b30      	subs	r3, #48	; 0x30
 800155a:	2b09      	cmp	r3, #9
 800155c:	d94e      	bls.n	80015fc <_vfiprintf_r+0x1c4>
 800155e:	b1b0      	cbz	r0, 800158e <_vfiprintf_r+0x156>
 8001560:	9207      	str	r2, [sp, #28]
 8001562:	e014      	b.n	800158e <_vfiprintf_r+0x156>
 8001564:	eba0 0308 	sub.w	r3, r0, r8
 8001568:	fa09 f303 	lsl.w	r3, r9, r3
 800156c:	4313      	orrs	r3, r2
 800156e:	9304      	str	r3, [sp, #16]
 8001570:	46a2      	mov	sl, r4
 8001572:	e7d2      	b.n	800151a <_vfiprintf_r+0xe2>
 8001574:	9b03      	ldr	r3, [sp, #12]
 8001576:	1d19      	adds	r1, r3, #4
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	9103      	str	r1, [sp, #12]
 800157c:	2b00      	cmp	r3, #0
 800157e:	bfbb      	ittet	lt
 8001580:	425b      	neglt	r3, r3
 8001582:	f042 0202 	orrlt.w	r2, r2, #2
 8001586:	9307      	strge	r3, [sp, #28]
 8001588:	9307      	strlt	r3, [sp, #28]
 800158a:	bfb8      	it	lt
 800158c:	9204      	strlt	r2, [sp, #16]
 800158e:	7823      	ldrb	r3, [r4, #0]
 8001590:	2b2e      	cmp	r3, #46	; 0x2e
 8001592:	d10c      	bne.n	80015ae <_vfiprintf_r+0x176>
 8001594:	7863      	ldrb	r3, [r4, #1]
 8001596:	2b2a      	cmp	r3, #42	; 0x2a
 8001598:	d135      	bne.n	8001606 <_vfiprintf_r+0x1ce>
 800159a:	9b03      	ldr	r3, [sp, #12]
 800159c:	1d1a      	adds	r2, r3, #4
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	9203      	str	r2, [sp, #12]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	bfb8      	it	lt
 80015a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80015aa:	3402      	adds	r4, #2
 80015ac:	9305      	str	r3, [sp, #20]
 80015ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001694 <_vfiprintf_r+0x25c>
 80015b2:	7821      	ldrb	r1, [r4, #0]
 80015b4:	2203      	movs	r2, #3
 80015b6:	4650      	mov	r0, sl
 80015b8:	f7fe fe12 	bl	80001e0 <memchr>
 80015bc:	b140      	cbz	r0, 80015d0 <_vfiprintf_r+0x198>
 80015be:	2340      	movs	r3, #64	; 0x40
 80015c0:	eba0 000a 	sub.w	r0, r0, sl
 80015c4:	fa03 f000 	lsl.w	r0, r3, r0
 80015c8:	9b04      	ldr	r3, [sp, #16]
 80015ca:	4303      	orrs	r3, r0
 80015cc:	3401      	adds	r4, #1
 80015ce:	9304      	str	r3, [sp, #16]
 80015d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80015d4:	482c      	ldr	r0, [pc, #176]	; (8001688 <_vfiprintf_r+0x250>)
 80015d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80015da:	2206      	movs	r2, #6
 80015dc:	f7fe fe00 	bl	80001e0 <memchr>
 80015e0:	2800      	cmp	r0, #0
 80015e2:	d03f      	beq.n	8001664 <_vfiprintf_r+0x22c>
 80015e4:	4b29      	ldr	r3, [pc, #164]	; (800168c <_vfiprintf_r+0x254>)
 80015e6:	bb1b      	cbnz	r3, 8001630 <_vfiprintf_r+0x1f8>
 80015e8:	9b03      	ldr	r3, [sp, #12]
 80015ea:	3307      	adds	r3, #7
 80015ec:	f023 0307 	bic.w	r3, r3, #7
 80015f0:	3308      	adds	r3, #8
 80015f2:	9303      	str	r3, [sp, #12]
 80015f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80015f6:	443b      	add	r3, r7
 80015f8:	9309      	str	r3, [sp, #36]	; 0x24
 80015fa:	e767      	b.n	80014cc <_vfiprintf_r+0x94>
 80015fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8001600:	460c      	mov	r4, r1
 8001602:	2001      	movs	r0, #1
 8001604:	e7a5      	b.n	8001552 <_vfiprintf_r+0x11a>
 8001606:	2300      	movs	r3, #0
 8001608:	3401      	adds	r4, #1
 800160a:	9305      	str	r3, [sp, #20]
 800160c:	4619      	mov	r1, r3
 800160e:	f04f 0c0a 	mov.w	ip, #10
 8001612:	4620      	mov	r0, r4
 8001614:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001618:	3a30      	subs	r2, #48	; 0x30
 800161a:	2a09      	cmp	r2, #9
 800161c:	d903      	bls.n	8001626 <_vfiprintf_r+0x1ee>
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0c5      	beq.n	80015ae <_vfiprintf_r+0x176>
 8001622:	9105      	str	r1, [sp, #20]
 8001624:	e7c3      	b.n	80015ae <_vfiprintf_r+0x176>
 8001626:	fb0c 2101 	mla	r1, ip, r1, r2
 800162a:	4604      	mov	r4, r0
 800162c:	2301      	movs	r3, #1
 800162e:	e7f0      	b.n	8001612 <_vfiprintf_r+0x1da>
 8001630:	ab03      	add	r3, sp, #12
 8001632:	9300      	str	r3, [sp, #0]
 8001634:	462a      	mov	r2, r5
 8001636:	4b16      	ldr	r3, [pc, #88]	; (8001690 <_vfiprintf_r+0x258>)
 8001638:	a904      	add	r1, sp, #16
 800163a:	4630      	mov	r0, r6
 800163c:	f3af 8000 	nop.w
 8001640:	4607      	mov	r7, r0
 8001642:	1c78      	adds	r0, r7, #1
 8001644:	d1d6      	bne.n	80015f4 <_vfiprintf_r+0x1bc>
 8001646:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001648:	07d9      	lsls	r1, r3, #31
 800164a:	d405      	bmi.n	8001658 <_vfiprintf_r+0x220>
 800164c:	89ab      	ldrh	r3, [r5, #12]
 800164e:	059a      	lsls	r2, r3, #22
 8001650:	d402      	bmi.n	8001658 <_vfiprintf_r+0x220>
 8001652:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001654:	f7ff fd0f 	bl	8001076 <__retarget_lock_release_recursive>
 8001658:	89ab      	ldrh	r3, [r5, #12]
 800165a:	065b      	lsls	r3, r3, #25
 800165c:	f53f af12 	bmi.w	8001484 <_vfiprintf_r+0x4c>
 8001660:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001662:	e711      	b.n	8001488 <_vfiprintf_r+0x50>
 8001664:	ab03      	add	r3, sp, #12
 8001666:	9300      	str	r3, [sp, #0]
 8001668:	462a      	mov	r2, r5
 800166a:	4b09      	ldr	r3, [pc, #36]	; (8001690 <_vfiprintf_r+0x258>)
 800166c:	a904      	add	r1, sp, #16
 800166e:	4630      	mov	r0, r6
 8001670:	f000 f880 	bl	8001774 <_printf_i>
 8001674:	e7e4      	b.n	8001640 <_vfiprintf_r+0x208>
 8001676:	bf00      	nop
 8001678:	080020f8 	.word	0x080020f8
 800167c:	08002118 	.word	0x08002118
 8001680:	080020d8 	.word	0x080020d8
 8001684:	08002138 	.word	0x08002138
 8001688:	08002142 	.word	0x08002142
 800168c:	00000000 	.word	0x00000000
 8001690:	08001413 	.word	0x08001413
 8001694:	0800213e 	.word	0x0800213e

08001698 <_printf_common>:
 8001698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800169c:	4616      	mov	r6, r2
 800169e:	4699      	mov	r9, r3
 80016a0:	688a      	ldr	r2, [r1, #8]
 80016a2:	690b      	ldr	r3, [r1, #16]
 80016a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80016a8:	4293      	cmp	r3, r2
 80016aa:	bfb8      	it	lt
 80016ac:	4613      	movlt	r3, r2
 80016ae:	6033      	str	r3, [r6, #0]
 80016b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80016b4:	4607      	mov	r7, r0
 80016b6:	460c      	mov	r4, r1
 80016b8:	b10a      	cbz	r2, 80016be <_printf_common+0x26>
 80016ba:	3301      	adds	r3, #1
 80016bc:	6033      	str	r3, [r6, #0]
 80016be:	6823      	ldr	r3, [r4, #0]
 80016c0:	0699      	lsls	r1, r3, #26
 80016c2:	bf42      	ittt	mi
 80016c4:	6833      	ldrmi	r3, [r6, #0]
 80016c6:	3302      	addmi	r3, #2
 80016c8:	6033      	strmi	r3, [r6, #0]
 80016ca:	6825      	ldr	r5, [r4, #0]
 80016cc:	f015 0506 	ands.w	r5, r5, #6
 80016d0:	d106      	bne.n	80016e0 <_printf_common+0x48>
 80016d2:	f104 0a19 	add.w	sl, r4, #25
 80016d6:	68e3      	ldr	r3, [r4, #12]
 80016d8:	6832      	ldr	r2, [r6, #0]
 80016da:	1a9b      	subs	r3, r3, r2
 80016dc:	42ab      	cmp	r3, r5
 80016de:	dc26      	bgt.n	800172e <_printf_common+0x96>
 80016e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80016e4:	1e13      	subs	r3, r2, #0
 80016e6:	6822      	ldr	r2, [r4, #0]
 80016e8:	bf18      	it	ne
 80016ea:	2301      	movne	r3, #1
 80016ec:	0692      	lsls	r2, r2, #26
 80016ee:	d42b      	bmi.n	8001748 <_printf_common+0xb0>
 80016f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80016f4:	4649      	mov	r1, r9
 80016f6:	4638      	mov	r0, r7
 80016f8:	47c0      	blx	r8
 80016fa:	3001      	adds	r0, #1
 80016fc:	d01e      	beq.n	800173c <_printf_common+0xa4>
 80016fe:	6823      	ldr	r3, [r4, #0]
 8001700:	68e5      	ldr	r5, [r4, #12]
 8001702:	6832      	ldr	r2, [r6, #0]
 8001704:	f003 0306 	and.w	r3, r3, #6
 8001708:	2b04      	cmp	r3, #4
 800170a:	bf08      	it	eq
 800170c:	1aad      	subeq	r5, r5, r2
 800170e:	68a3      	ldr	r3, [r4, #8]
 8001710:	6922      	ldr	r2, [r4, #16]
 8001712:	bf0c      	ite	eq
 8001714:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001718:	2500      	movne	r5, #0
 800171a:	4293      	cmp	r3, r2
 800171c:	bfc4      	itt	gt
 800171e:	1a9b      	subgt	r3, r3, r2
 8001720:	18ed      	addgt	r5, r5, r3
 8001722:	2600      	movs	r6, #0
 8001724:	341a      	adds	r4, #26
 8001726:	42b5      	cmp	r5, r6
 8001728:	d11a      	bne.n	8001760 <_printf_common+0xc8>
 800172a:	2000      	movs	r0, #0
 800172c:	e008      	b.n	8001740 <_printf_common+0xa8>
 800172e:	2301      	movs	r3, #1
 8001730:	4652      	mov	r2, sl
 8001732:	4649      	mov	r1, r9
 8001734:	4638      	mov	r0, r7
 8001736:	47c0      	blx	r8
 8001738:	3001      	adds	r0, #1
 800173a:	d103      	bne.n	8001744 <_printf_common+0xac>
 800173c:	f04f 30ff 	mov.w	r0, #4294967295
 8001740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001744:	3501      	adds	r5, #1
 8001746:	e7c6      	b.n	80016d6 <_printf_common+0x3e>
 8001748:	18e1      	adds	r1, r4, r3
 800174a:	1c5a      	adds	r2, r3, #1
 800174c:	2030      	movs	r0, #48	; 0x30
 800174e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001752:	4422      	add	r2, r4
 8001754:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001758:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800175c:	3302      	adds	r3, #2
 800175e:	e7c7      	b.n	80016f0 <_printf_common+0x58>
 8001760:	2301      	movs	r3, #1
 8001762:	4622      	mov	r2, r4
 8001764:	4649      	mov	r1, r9
 8001766:	4638      	mov	r0, r7
 8001768:	47c0      	blx	r8
 800176a:	3001      	adds	r0, #1
 800176c:	d0e6      	beq.n	800173c <_printf_common+0xa4>
 800176e:	3601      	adds	r6, #1
 8001770:	e7d9      	b.n	8001726 <_printf_common+0x8e>
	...

08001774 <_printf_i>:
 8001774:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001778:	460c      	mov	r4, r1
 800177a:	4691      	mov	r9, r2
 800177c:	7e27      	ldrb	r7, [r4, #24]
 800177e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001780:	2f78      	cmp	r7, #120	; 0x78
 8001782:	4680      	mov	r8, r0
 8001784:	469a      	mov	sl, r3
 8001786:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800178a:	d807      	bhi.n	800179c <_printf_i+0x28>
 800178c:	2f62      	cmp	r7, #98	; 0x62
 800178e:	d80a      	bhi.n	80017a6 <_printf_i+0x32>
 8001790:	2f00      	cmp	r7, #0
 8001792:	f000 80d8 	beq.w	8001946 <_printf_i+0x1d2>
 8001796:	2f58      	cmp	r7, #88	; 0x58
 8001798:	f000 80a3 	beq.w	80018e2 <_printf_i+0x16e>
 800179c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80017a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80017a4:	e03a      	b.n	800181c <_printf_i+0xa8>
 80017a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80017aa:	2b15      	cmp	r3, #21
 80017ac:	d8f6      	bhi.n	800179c <_printf_i+0x28>
 80017ae:	a001      	add	r0, pc, #4	; (adr r0, 80017b4 <_printf_i+0x40>)
 80017b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80017b4:	0800180d 	.word	0x0800180d
 80017b8:	08001821 	.word	0x08001821
 80017bc:	0800179d 	.word	0x0800179d
 80017c0:	0800179d 	.word	0x0800179d
 80017c4:	0800179d 	.word	0x0800179d
 80017c8:	0800179d 	.word	0x0800179d
 80017cc:	08001821 	.word	0x08001821
 80017d0:	0800179d 	.word	0x0800179d
 80017d4:	0800179d 	.word	0x0800179d
 80017d8:	0800179d 	.word	0x0800179d
 80017dc:	0800179d 	.word	0x0800179d
 80017e0:	0800192d 	.word	0x0800192d
 80017e4:	08001851 	.word	0x08001851
 80017e8:	0800190f 	.word	0x0800190f
 80017ec:	0800179d 	.word	0x0800179d
 80017f0:	0800179d 	.word	0x0800179d
 80017f4:	0800194f 	.word	0x0800194f
 80017f8:	0800179d 	.word	0x0800179d
 80017fc:	08001851 	.word	0x08001851
 8001800:	0800179d 	.word	0x0800179d
 8001804:	0800179d 	.word	0x0800179d
 8001808:	08001917 	.word	0x08001917
 800180c:	680b      	ldr	r3, [r1, #0]
 800180e:	1d1a      	adds	r2, r3, #4
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	600a      	str	r2, [r1, #0]
 8001814:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001818:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800181c:	2301      	movs	r3, #1
 800181e:	e0a3      	b.n	8001968 <_printf_i+0x1f4>
 8001820:	6825      	ldr	r5, [r4, #0]
 8001822:	6808      	ldr	r0, [r1, #0]
 8001824:	062e      	lsls	r6, r5, #24
 8001826:	f100 0304 	add.w	r3, r0, #4
 800182a:	d50a      	bpl.n	8001842 <_printf_i+0xce>
 800182c:	6805      	ldr	r5, [r0, #0]
 800182e:	600b      	str	r3, [r1, #0]
 8001830:	2d00      	cmp	r5, #0
 8001832:	da03      	bge.n	800183c <_printf_i+0xc8>
 8001834:	232d      	movs	r3, #45	; 0x2d
 8001836:	426d      	negs	r5, r5
 8001838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800183c:	485e      	ldr	r0, [pc, #376]	; (80019b8 <_printf_i+0x244>)
 800183e:	230a      	movs	r3, #10
 8001840:	e019      	b.n	8001876 <_printf_i+0x102>
 8001842:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001846:	6805      	ldr	r5, [r0, #0]
 8001848:	600b      	str	r3, [r1, #0]
 800184a:	bf18      	it	ne
 800184c:	b22d      	sxthne	r5, r5
 800184e:	e7ef      	b.n	8001830 <_printf_i+0xbc>
 8001850:	680b      	ldr	r3, [r1, #0]
 8001852:	6825      	ldr	r5, [r4, #0]
 8001854:	1d18      	adds	r0, r3, #4
 8001856:	6008      	str	r0, [r1, #0]
 8001858:	0628      	lsls	r0, r5, #24
 800185a:	d501      	bpl.n	8001860 <_printf_i+0xec>
 800185c:	681d      	ldr	r5, [r3, #0]
 800185e:	e002      	b.n	8001866 <_printf_i+0xf2>
 8001860:	0669      	lsls	r1, r5, #25
 8001862:	d5fb      	bpl.n	800185c <_printf_i+0xe8>
 8001864:	881d      	ldrh	r5, [r3, #0]
 8001866:	4854      	ldr	r0, [pc, #336]	; (80019b8 <_printf_i+0x244>)
 8001868:	2f6f      	cmp	r7, #111	; 0x6f
 800186a:	bf0c      	ite	eq
 800186c:	2308      	moveq	r3, #8
 800186e:	230a      	movne	r3, #10
 8001870:	2100      	movs	r1, #0
 8001872:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001876:	6866      	ldr	r6, [r4, #4]
 8001878:	60a6      	str	r6, [r4, #8]
 800187a:	2e00      	cmp	r6, #0
 800187c:	bfa2      	ittt	ge
 800187e:	6821      	ldrge	r1, [r4, #0]
 8001880:	f021 0104 	bicge.w	r1, r1, #4
 8001884:	6021      	strge	r1, [r4, #0]
 8001886:	b90d      	cbnz	r5, 800188c <_printf_i+0x118>
 8001888:	2e00      	cmp	r6, #0
 800188a:	d04d      	beq.n	8001928 <_printf_i+0x1b4>
 800188c:	4616      	mov	r6, r2
 800188e:	fbb5 f1f3 	udiv	r1, r5, r3
 8001892:	fb03 5711 	mls	r7, r3, r1, r5
 8001896:	5dc7      	ldrb	r7, [r0, r7]
 8001898:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800189c:	462f      	mov	r7, r5
 800189e:	42bb      	cmp	r3, r7
 80018a0:	460d      	mov	r5, r1
 80018a2:	d9f4      	bls.n	800188e <_printf_i+0x11a>
 80018a4:	2b08      	cmp	r3, #8
 80018a6:	d10b      	bne.n	80018c0 <_printf_i+0x14c>
 80018a8:	6823      	ldr	r3, [r4, #0]
 80018aa:	07df      	lsls	r7, r3, #31
 80018ac:	d508      	bpl.n	80018c0 <_printf_i+0x14c>
 80018ae:	6923      	ldr	r3, [r4, #16]
 80018b0:	6861      	ldr	r1, [r4, #4]
 80018b2:	4299      	cmp	r1, r3
 80018b4:	bfde      	ittt	le
 80018b6:	2330      	movle	r3, #48	; 0x30
 80018b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80018bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80018c0:	1b92      	subs	r2, r2, r6
 80018c2:	6122      	str	r2, [r4, #16]
 80018c4:	f8cd a000 	str.w	sl, [sp]
 80018c8:	464b      	mov	r3, r9
 80018ca:	aa03      	add	r2, sp, #12
 80018cc:	4621      	mov	r1, r4
 80018ce:	4640      	mov	r0, r8
 80018d0:	f7ff fee2 	bl	8001698 <_printf_common>
 80018d4:	3001      	adds	r0, #1
 80018d6:	d14c      	bne.n	8001972 <_printf_i+0x1fe>
 80018d8:	f04f 30ff 	mov.w	r0, #4294967295
 80018dc:	b004      	add	sp, #16
 80018de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018e2:	4835      	ldr	r0, [pc, #212]	; (80019b8 <_printf_i+0x244>)
 80018e4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80018e8:	6823      	ldr	r3, [r4, #0]
 80018ea:	680e      	ldr	r6, [r1, #0]
 80018ec:	061f      	lsls	r7, r3, #24
 80018ee:	f856 5b04 	ldr.w	r5, [r6], #4
 80018f2:	600e      	str	r6, [r1, #0]
 80018f4:	d514      	bpl.n	8001920 <_printf_i+0x1ac>
 80018f6:	07d9      	lsls	r1, r3, #31
 80018f8:	bf44      	itt	mi
 80018fa:	f043 0320 	orrmi.w	r3, r3, #32
 80018fe:	6023      	strmi	r3, [r4, #0]
 8001900:	b91d      	cbnz	r5, 800190a <_printf_i+0x196>
 8001902:	6823      	ldr	r3, [r4, #0]
 8001904:	f023 0320 	bic.w	r3, r3, #32
 8001908:	6023      	str	r3, [r4, #0]
 800190a:	2310      	movs	r3, #16
 800190c:	e7b0      	b.n	8001870 <_printf_i+0xfc>
 800190e:	6823      	ldr	r3, [r4, #0]
 8001910:	f043 0320 	orr.w	r3, r3, #32
 8001914:	6023      	str	r3, [r4, #0]
 8001916:	2378      	movs	r3, #120	; 0x78
 8001918:	4828      	ldr	r0, [pc, #160]	; (80019bc <_printf_i+0x248>)
 800191a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800191e:	e7e3      	b.n	80018e8 <_printf_i+0x174>
 8001920:	065e      	lsls	r6, r3, #25
 8001922:	bf48      	it	mi
 8001924:	b2ad      	uxthmi	r5, r5
 8001926:	e7e6      	b.n	80018f6 <_printf_i+0x182>
 8001928:	4616      	mov	r6, r2
 800192a:	e7bb      	b.n	80018a4 <_printf_i+0x130>
 800192c:	680b      	ldr	r3, [r1, #0]
 800192e:	6826      	ldr	r6, [r4, #0]
 8001930:	6960      	ldr	r0, [r4, #20]
 8001932:	1d1d      	adds	r5, r3, #4
 8001934:	600d      	str	r5, [r1, #0]
 8001936:	0635      	lsls	r5, r6, #24
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	d501      	bpl.n	8001940 <_printf_i+0x1cc>
 800193c:	6018      	str	r0, [r3, #0]
 800193e:	e002      	b.n	8001946 <_printf_i+0x1d2>
 8001940:	0671      	lsls	r1, r6, #25
 8001942:	d5fb      	bpl.n	800193c <_printf_i+0x1c8>
 8001944:	8018      	strh	r0, [r3, #0]
 8001946:	2300      	movs	r3, #0
 8001948:	6123      	str	r3, [r4, #16]
 800194a:	4616      	mov	r6, r2
 800194c:	e7ba      	b.n	80018c4 <_printf_i+0x150>
 800194e:	680b      	ldr	r3, [r1, #0]
 8001950:	1d1a      	adds	r2, r3, #4
 8001952:	600a      	str	r2, [r1, #0]
 8001954:	681e      	ldr	r6, [r3, #0]
 8001956:	6862      	ldr	r2, [r4, #4]
 8001958:	2100      	movs	r1, #0
 800195a:	4630      	mov	r0, r6
 800195c:	f7fe fc40 	bl	80001e0 <memchr>
 8001960:	b108      	cbz	r0, 8001966 <_printf_i+0x1f2>
 8001962:	1b80      	subs	r0, r0, r6
 8001964:	6060      	str	r0, [r4, #4]
 8001966:	6863      	ldr	r3, [r4, #4]
 8001968:	6123      	str	r3, [r4, #16]
 800196a:	2300      	movs	r3, #0
 800196c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001970:	e7a8      	b.n	80018c4 <_printf_i+0x150>
 8001972:	6923      	ldr	r3, [r4, #16]
 8001974:	4632      	mov	r2, r6
 8001976:	4649      	mov	r1, r9
 8001978:	4640      	mov	r0, r8
 800197a:	47d0      	blx	sl
 800197c:	3001      	adds	r0, #1
 800197e:	d0ab      	beq.n	80018d8 <_printf_i+0x164>
 8001980:	6823      	ldr	r3, [r4, #0]
 8001982:	079b      	lsls	r3, r3, #30
 8001984:	d413      	bmi.n	80019ae <_printf_i+0x23a>
 8001986:	68e0      	ldr	r0, [r4, #12]
 8001988:	9b03      	ldr	r3, [sp, #12]
 800198a:	4298      	cmp	r0, r3
 800198c:	bfb8      	it	lt
 800198e:	4618      	movlt	r0, r3
 8001990:	e7a4      	b.n	80018dc <_printf_i+0x168>
 8001992:	2301      	movs	r3, #1
 8001994:	4632      	mov	r2, r6
 8001996:	4649      	mov	r1, r9
 8001998:	4640      	mov	r0, r8
 800199a:	47d0      	blx	sl
 800199c:	3001      	adds	r0, #1
 800199e:	d09b      	beq.n	80018d8 <_printf_i+0x164>
 80019a0:	3501      	adds	r5, #1
 80019a2:	68e3      	ldr	r3, [r4, #12]
 80019a4:	9903      	ldr	r1, [sp, #12]
 80019a6:	1a5b      	subs	r3, r3, r1
 80019a8:	42ab      	cmp	r3, r5
 80019aa:	dcf2      	bgt.n	8001992 <_printf_i+0x21e>
 80019ac:	e7eb      	b.n	8001986 <_printf_i+0x212>
 80019ae:	2500      	movs	r5, #0
 80019b0:	f104 0619 	add.w	r6, r4, #25
 80019b4:	e7f5      	b.n	80019a2 <_printf_i+0x22e>
 80019b6:	bf00      	nop
 80019b8:	08002149 	.word	0x08002149
 80019bc:	0800215a 	.word	0x0800215a

080019c0 <_sbrk_r>:
 80019c0:	b538      	push	{r3, r4, r5, lr}
 80019c2:	4d06      	ldr	r5, [pc, #24]	; (80019dc <_sbrk_r+0x1c>)
 80019c4:	2300      	movs	r3, #0
 80019c6:	4604      	mov	r4, r0
 80019c8:	4608      	mov	r0, r1
 80019ca:	602b      	str	r3, [r5, #0]
 80019cc:	f7ff f992 	bl	8000cf4 <_sbrk>
 80019d0:	1c43      	adds	r3, r0, #1
 80019d2:	d102      	bne.n	80019da <_sbrk_r+0x1a>
 80019d4:	682b      	ldr	r3, [r5, #0]
 80019d6:	b103      	cbz	r3, 80019da <_sbrk_r+0x1a>
 80019d8:	6023      	str	r3, [r4, #0]
 80019da:	bd38      	pop	{r3, r4, r5, pc}
 80019dc:	20000640 	.word	0x20000640

080019e0 <__sread>:
 80019e0:	b510      	push	{r4, lr}
 80019e2:	460c      	mov	r4, r1
 80019e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019e8:	f000 fb02 	bl	8001ff0 <_read_r>
 80019ec:	2800      	cmp	r0, #0
 80019ee:	bfab      	itete	ge
 80019f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80019f2:	89a3      	ldrhlt	r3, [r4, #12]
 80019f4:	181b      	addge	r3, r3, r0
 80019f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80019fa:	bfac      	ite	ge
 80019fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80019fe:	81a3      	strhlt	r3, [r4, #12]
 8001a00:	bd10      	pop	{r4, pc}

08001a02 <__swrite>:
 8001a02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a06:	461f      	mov	r7, r3
 8001a08:	898b      	ldrh	r3, [r1, #12]
 8001a0a:	05db      	lsls	r3, r3, #23
 8001a0c:	4605      	mov	r5, r0
 8001a0e:	460c      	mov	r4, r1
 8001a10:	4616      	mov	r6, r2
 8001a12:	d505      	bpl.n	8001a20 <__swrite+0x1e>
 8001a14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a18:	2302      	movs	r3, #2
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f000 f9c8 	bl	8001db0 <_lseek_r>
 8001a20:	89a3      	ldrh	r3, [r4, #12]
 8001a22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001a26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a2a:	81a3      	strh	r3, [r4, #12]
 8001a2c:	4632      	mov	r2, r6
 8001a2e:	463b      	mov	r3, r7
 8001a30:	4628      	mov	r0, r5
 8001a32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001a36:	f000 b869 	b.w	8001b0c <_write_r>

08001a3a <__sseek>:
 8001a3a:	b510      	push	{r4, lr}
 8001a3c:	460c      	mov	r4, r1
 8001a3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a42:	f000 f9b5 	bl	8001db0 <_lseek_r>
 8001a46:	1c43      	adds	r3, r0, #1
 8001a48:	89a3      	ldrh	r3, [r4, #12]
 8001a4a:	bf15      	itete	ne
 8001a4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8001a4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001a52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001a56:	81a3      	strheq	r3, [r4, #12]
 8001a58:	bf18      	it	ne
 8001a5a:	81a3      	strhne	r3, [r4, #12]
 8001a5c:	bd10      	pop	{r4, pc}

08001a5e <__sclose>:
 8001a5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a62:	f000 b8d3 	b.w	8001c0c <_close_r>
	...

08001a68 <__swbuf_r>:
 8001a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a6a:	460e      	mov	r6, r1
 8001a6c:	4614      	mov	r4, r2
 8001a6e:	4605      	mov	r5, r0
 8001a70:	b118      	cbz	r0, 8001a7a <__swbuf_r+0x12>
 8001a72:	6983      	ldr	r3, [r0, #24]
 8001a74:	b90b      	cbnz	r3, 8001a7a <__swbuf_r+0x12>
 8001a76:	f7ff fa5f 	bl	8000f38 <__sinit>
 8001a7a:	4b21      	ldr	r3, [pc, #132]	; (8001b00 <__swbuf_r+0x98>)
 8001a7c:	429c      	cmp	r4, r3
 8001a7e:	d12b      	bne.n	8001ad8 <__swbuf_r+0x70>
 8001a80:	686c      	ldr	r4, [r5, #4]
 8001a82:	69a3      	ldr	r3, [r4, #24]
 8001a84:	60a3      	str	r3, [r4, #8]
 8001a86:	89a3      	ldrh	r3, [r4, #12]
 8001a88:	071a      	lsls	r2, r3, #28
 8001a8a:	d52f      	bpl.n	8001aec <__swbuf_r+0x84>
 8001a8c:	6923      	ldr	r3, [r4, #16]
 8001a8e:	b36b      	cbz	r3, 8001aec <__swbuf_r+0x84>
 8001a90:	6923      	ldr	r3, [r4, #16]
 8001a92:	6820      	ldr	r0, [r4, #0]
 8001a94:	1ac0      	subs	r0, r0, r3
 8001a96:	6963      	ldr	r3, [r4, #20]
 8001a98:	b2f6      	uxtb	r6, r6
 8001a9a:	4283      	cmp	r3, r0
 8001a9c:	4637      	mov	r7, r6
 8001a9e:	dc04      	bgt.n	8001aaa <__swbuf_r+0x42>
 8001aa0:	4621      	mov	r1, r4
 8001aa2:	4628      	mov	r0, r5
 8001aa4:	f000 f948 	bl	8001d38 <_fflush_r>
 8001aa8:	bb30      	cbnz	r0, 8001af8 <__swbuf_r+0x90>
 8001aaa:	68a3      	ldr	r3, [r4, #8]
 8001aac:	3b01      	subs	r3, #1
 8001aae:	60a3      	str	r3, [r4, #8]
 8001ab0:	6823      	ldr	r3, [r4, #0]
 8001ab2:	1c5a      	adds	r2, r3, #1
 8001ab4:	6022      	str	r2, [r4, #0]
 8001ab6:	701e      	strb	r6, [r3, #0]
 8001ab8:	6963      	ldr	r3, [r4, #20]
 8001aba:	3001      	adds	r0, #1
 8001abc:	4283      	cmp	r3, r0
 8001abe:	d004      	beq.n	8001aca <__swbuf_r+0x62>
 8001ac0:	89a3      	ldrh	r3, [r4, #12]
 8001ac2:	07db      	lsls	r3, r3, #31
 8001ac4:	d506      	bpl.n	8001ad4 <__swbuf_r+0x6c>
 8001ac6:	2e0a      	cmp	r6, #10
 8001ac8:	d104      	bne.n	8001ad4 <__swbuf_r+0x6c>
 8001aca:	4621      	mov	r1, r4
 8001acc:	4628      	mov	r0, r5
 8001ace:	f000 f933 	bl	8001d38 <_fflush_r>
 8001ad2:	b988      	cbnz	r0, 8001af8 <__swbuf_r+0x90>
 8001ad4:	4638      	mov	r0, r7
 8001ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ad8:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <__swbuf_r+0x9c>)
 8001ada:	429c      	cmp	r4, r3
 8001adc:	d101      	bne.n	8001ae2 <__swbuf_r+0x7a>
 8001ade:	68ac      	ldr	r4, [r5, #8]
 8001ae0:	e7cf      	b.n	8001a82 <__swbuf_r+0x1a>
 8001ae2:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <__swbuf_r+0xa0>)
 8001ae4:	429c      	cmp	r4, r3
 8001ae6:	bf08      	it	eq
 8001ae8:	68ec      	ldreq	r4, [r5, #12]
 8001aea:	e7ca      	b.n	8001a82 <__swbuf_r+0x1a>
 8001aec:	4621      	mov	r1, r4
 8001aee:	4628      	mov	r0, r5
 8001af0:	f000 f81e 	bl	8001b30 <__swsetup_r>
 8001af4:	2800      	cmp	r0, #0
 8001af6:	d0cb      	beq.n	8001a90 <__swbuf_r+0x28>
 8001af8:	f04f 37ff 	mov.w	r7, #4294967295
 8001afc:	e7ea      	b.n	8001ad4 <__swbuf_r+0x6c>
 8001afe:	bf00      	nop
 8001b00:	080020f8 	.word	0x080020f8
 8001b04:	08002118 	.word	0x08002118
 8001b08:	080020d8 	.word	0x080020d8

08001b0c <_write_r>:
 8001b0c:	b538      	push	{r3, r4, r5, lr}
 8001b0e:	4d07      	ldr	r5, [pc, #28]	; (8001b2c <_write_r+0x20>)
 8001b10:	4604      	mov	r4, r0
 8001b12:	4608      	mov	r0, r1
 8001b14:	4611      	mov	r1, r2
 8001b16:	2200      	movs	r2, #0
 8001b18:	602a      	str	r2, [r5, #0]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	f7ff f899 	bl	8000c52 <_write>
 8001b20:	1c43      	adds	r3, r0, #1
 8001b22:	d102      	bne.n	8001b2a <_write_r+0x1e>
 8001b24:	682b      	ldr	r3, [r5, #0]
 8001b26:	b103      	cbz	r3, 8001b2a <_write_r+0x1e>
 8001b28:	6023      	str	r3, [r4, #0]
 8001b2a:	bd38      	pop	{r3, r4, r5, pc}
 8001b2c:	20000640 	.word	0x20000640

08001b30 <__swsetup_r>:
 8001b30:	4b32      	ldr	r3, [pc, #200]	; (8001bfc <__swsetup_r+0xcc>)
 8001b32:	b570      	push	{r4, r5, r6, lr}
 8001b34:	681d      	ldr	r5, [r3, #0]
 8001b36:	4606      	mov	r6, r0
 8001b38:	460c      	mov	r4, r1
 8001b3a:	b125      	cbz	r5, 8001b46 <__swsetup_r+0x16>
 8001b3c:	69ab      	ldr	r3, [r5, #24]
 8001b3e:	b913      	cbnz	r3, 8001b46 <__swsetup_r+0x16>
 8001b40:	4628      	mov	r0, r5
 8001b42:	f7ff f9f9 	bl	8000f38 <__sinit>
 8001b46:	4b2e      	ldr	r3, [pc, #184]	; (8001c00 <__swsetup_r+0xd0>)
 8001b48:	429c      	cmp	r4, r3
 8001b4a:	d10f      	bne.n	8001b6c <__swsetup_r+0x3c>
 8001b4c:	686c      	ldr	r4, [r5, #4]
 8001b4e:	89a3      	ldrh	r3, [r4, #12]
 8001b50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001b54:	0719      	lsls	r1, r3, #28
 8001b56:	d42c      	bmi.n	8001bb2 <__swsetup_r+0x82>
 8001b58:	06dd      	lsls	r5, r3, #27
 8001b5a:	d411      	bmi.n	8001b80 <__swsetup_r+0x50>
 8001b5c:	2309      	movs	r3, #9
 8001b5e:	6033      	str	r3, [r6, #0]
 8001b60:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001b64:	81a3      	strh	r3, [r4, #12]
 8001b66:	f04f 30ff 	mov.w	r0, #4294967295
 8001b6a:	e03e      	b.n	8001bea <__swsetup_r+0xba>
 8001b6c:	4b25      	ldr	r3, [pc, #148]	; (8001c04 <__swsetup_r+0xd4>)
 8001b6e:	429c      	cmp	r4, r3
 8001b70:	d101      	bne.n	8001b76 <__swsetup_r+0x46>
 8001b72:	68ac      	ldr	r4, [r5, #8]
 8001b74:	e7eb      	b.n	8001b4e <__swsetup_r+0x1e>
 8001b76:	4b24      	ldr	r3, [pc, #144]	; (8001c08 <__swsetup_r+0xd8>)
 8001b78:	429c      	cmp	r4, r3
 8001b7a:	bf08      	it	eq
 8001b7c:	68ec      	ldreq	r4, [r5, #12]
 8001b7e:	e7e6      	b.n	8001b4e <__swsetup_r+0x1e>
 8001b80:	0758      	lsls	r0, r3, #29
 8001b82:	d512      	bpl.n	8001baa <__swsetup_r+0x7a>
 8001b84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001b86:	b141      	cbz	r1, 8001b9a <__swsetup_r+0x6a>
 8001b88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001b8c:	4299      	cmp	r1, r3
 8001b8e:	d002      	beq.n	8001b96 <__swsetup_r+0x66>
 8001b90:	4630      	mov	r0, r6
 8001b92:	f000 f9b7 	bl	8001f04 <_free_r>
 8001b96:	2300      	movs	r3, #0
 8001b98:	6363      	str	r3, [r4, #52]	; 0x34
 8001b9a:	89a3      	ldrh	r3, [r4, #12]
 8001b9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001ba0:	81a3      	strh	r3, [r4, #12]
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	6063      	str	r3, [r4, #4]
 8001ba6:	6923      	ldr	r3, [r4, #16]
 8001ba8:	6023      	str	r3, [r4, #0]
 8001baa:	89a3      	ldrh	r3, [r4, #12]
 8001bac:	f043 0308 	orr.w	r3, r3, #8
 8001bb0:	81a3      	strh	r3, [r4, #12]
 8001bb2:	6923      	ldr	r3, [r4, #16]
 8001bb4:	b94b      	cbnz	r3, 8001bca <__swsetup_r+0x9a>
 8001bb6:	89a3      	ldrh	r3, [r4, #12]
 8001bb8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001bbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bc0:	d003      	beq.n	8001bca <__swsetup_r+0x9a>
 8001bc2:	4621      	mov	r1, r4
 8001bc4:	4630      	mov	r0, r6
 8001bc6:	f000 f929 	bl	8001e1c <__smakebuf_r>
 8001bca:	89a0      	ldrh	r0, [r4, #12]
 8001bcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001bd0:	f010 0301 	ands.w	r3, r0, #1
 8001bd4:	d00a      	beq.n	8001bec <__swsetup_r+0xbc>
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60a3      	str	r3, [r4, #8]
 8001bda:	6963      	ldr	r3, [r4, #20]
 8001bdc:	425b      	negs	r3, r3
 8001bde:	61a3      	str	r3, [r4, #24]
 8001be0:	6923      	ldr	r3, [r4, #16]
 8001be2:	b943      	cbnz	r3, 8001bf6 <__swsetup_r+0xc6>
 8001be4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001be8:	d1ba      	bne.n	8001b60 <__swsetup_r+0x30>
 8001bea:	bd70      	pop	{r4, r5, r6, pc}
 8001bec:	0781      	lsls	r1, r0, #30
 8001bee:	bf58      	it	pl
 8001bf0:	6963      	ldrpl	r3, [r4, #20]
 8001bf2:	60a3      	str	r3, [r4, #8]
 8001bf4:	e7f4      	b.n	8001be0 <__swsetup_r+0xb0>
 8001bf6:	2000      	movs	r0, #0
 8001bf8:	e7f7      	b.n	8001bea <__swsetup_r+0xba>
 8001bfa:	bf00      	nop
 8001bfc:	20000000 	.word	0x20000000
 8001c00:	080020f8 	.word	0x080020f8
 8001c04:	08002118 	.word	0x08002118
 8001c08:	080020d8 	.word	0x080020d8

08001c0c <_close_r>:
 8001c0c:	b538      	push	{r3, r4, r5, lr}
 8001c0e:	4d06      	ldr	r5, [pc, #24]	; (8001c28 <_close_r+0x1c>)
 8001c10:	2300      	movs	r3, #0
 8001c12:	4604      	mov	r4, r0
 8001c14:	4608      	mov	r0, r1
 8001c16:	602b      	str	r3, [r5, #0]
 8001c18:	f7ff f837 	bl	8000c8a <_close>
 8001c1c:	1c43      	adds	r3, r0, #1
 8001c1e:	d102      	bne.n	8001c26 <_close_r+0x1a>
 8001c20:	682b      	ldr	r3, [r5, #0]
 8001c22:	b103      	cbz	r3, 8001c26 <_close_r+0x1a>
 8001c24:	6023      	str	r3, [r4, #0]
 8001c26:	bd38      	pop	{r3, r4, r5, pc}
 8001c28:	20000640 	.word	0x20000640

08001c2c <__sflush_r>:
 8001c2c:	898a      	ldrh	r2, [r1, #12]
 8001c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c32:	4605      	mov	r5, r0
 8001c34:	0710      	lsls	r0, r2, #28
 8001c36:	460c      	mov	r4, r1
 8001c38:	d458      	bmi.n	8001cec <__sflush_r+0xc0>
 8001c3a:	684b      	ldr	r3, [r1, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	dc05      	bgt.n	8001c4c <__sflush_r+0x20>
 8001c40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	dc02      	bgt.n	8001c4c <__sflush_r+0x20>
 8001c46:	2000      	movs	r0, #0
 8001c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001c4e:	2e00      	cmp	r6, #0
 8001c50:	d0f9      	beq.n	8001c46 <__sflush_r+0x1a>
 8001c52:	2300      	movs	r3, #0
 8001c54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001c58:	682f      	ldr	r7, [r5, #0]
 8001c5a:	602b      	str	r3, [r5, #0]
 8001c5c:	d032      	beq.n	8001cc4 <__sflush_r+0x98>
 8001c5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001c60:	89a3      	ldrh	r3, [r4, #12]
 8001c62:	075a      	lsls	r2, r3, #29
 8001c64:	d505      	bpl.n	8001c72 <__sflush_r+0x46>
 8001c66:	6863      	ldr	r3, [r4, #4]
 8001c68:	1ac0      	subs	r0, r0, r3
 8001c6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001c6c:	b10b      	cbz	r3, 8001c72 <__sflush_r+0x46>
 8001c6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c70:	1ac0      	subs	r0, r0, r3
 8001c72:	2300      	movs	r3, #0
 8001c74:	4602      	mov	r2, r0
 8001c76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001c78:	6a21      	ldr	r1, [r4, #32]
 8001c7a:	4628      	mov	r0, r5
 8001c7c:	47b0      	blx	r6
 8001c7e:	1c43      	adds	r3, r0, #1
 8001c80:	89a3      	ldrh	r3, [r4, #12]
 8001c82:	d106      	bne.n	8001c92 <__sflush_r+0x66>
 8001c84:	6829      	ldr	r1, [r5, #0]
 8001c86:	291d      	cmp	r1, #29
 8001c88:	d82c      	bhi.n	8001ce4 <__sflush_r+0xb8>
 8001c8a:	4a2a      	ldr	r2, [pc, #168]	; (8001d34 <__sflush_r+0x108>)
 8001c8c:	40ca      	lsrs	r2, r1
 8001c8e:	07d6      	lsls	r6, r2, #31
 8001c90:	d528      	bpl.n	8001ce4 <__sflush_r+0xb8>
 8001c92:	2200      	movs	r2, #0
 8001c94:	6062      	str	r2, [r4, #4]
 8001c96:	04d9      	lsls	r1, r3, #19
 8001c98:	6922      	ldr	r2, [r4, #16]
 8001c9a:	6022      	str	r2, [r4, #0]
 8001c9c:	d504      	bpl.n	8001ca8 <__sflush_r+0x7c>
 8001c9e:	1c42      	adds	r2, r0, #1
 8001ca0:	d101      	bne.n	8001ca6 <__sflush_r+0x7a>
 8001ca2:	682b      	ldr	r3, [r5, #0]
 8001ca4:	b903      	cbnz	r3, 8001ca8 <__sflush_r+0x7c>
 8001ca6:	6560      	str	r0, [r4, #84]	; 0x54
 8001ca8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001caa:	602f      	str	r7, [r5, #0]
 8001cac:	2900      	cmp	r1, #0
 8001cae:	d0ca      	beq.n	8001c46 <__sflush_r+0x1a>
 8001cb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001cb4:	4299      	cmp	r1, r3
 8001cb6:	d002      	beq.n	8001cbe <__sflush_r+0x92>
 8001cb8:	4628      	mov	r0, r5
 8001cba:	f000 f923 	bl	8001f04 <_free_r>
 8001cbe:	2000      	movs	r0, #0
 8001cc0:	6360      	str	r0, [r4, #52]	; 0x34
 8001cc2:	e7c1      	b.n	8001c48 <__sflush_r+0x1c>
 8001cc4:	6a21      	ldr	r1, [r4, #32]
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	4628      	mov	r0, r5
 8001cca:	47b0      	blx	r6
 8001ccc:	1c41      	adds	r1, r0, #1
 8001cce:	d1c7      	bne.n	8001c60 <__sflush_r+0x34>
 8001cd0:	682b      	ldr	r3, [r5, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d0c4      	beq.n	8001c60 <__sflush_r+0x34>
 8001cd6:	2b1d      	cmp	r3, #29
 8001cd8:	d001      	beq.n	8001cde <__sflush_r+0xb2>
 8001cda:	2b16      	cmp	r3, #22
 8001cdc:	d101      	bne.n	8001ce2 <__sflush_r+0xb6>
 8001cde:	602f      	str	r7, [r5, #0]
 8001ce0:	e7b1      	b.n	8001c46 <__sflush_r+0x1a>
 8001ce2:	89a3      	ldrh	r3, [r4, #12]
 8001ce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ce8:	81a3      	strh	r3, [r4, #12]
 8001cea:	e7ad      	b.n	8001c48 <__sflush_r+0x1c>
 8001cec:	690f      	ldr	r7, [r1, #16]
 8001cee:	2f00      	cmp	r7, #0
 8001cf0:	d0a9      	beq.n	8001c46 <__sflush_r+0x1a>
 8001cf2:	0793      	lsls	r3, r2, #30
 8001cf4:	680e      	ldr	r6, [r1, #0]
 8001cf6:	bf08      	it	eq
 8001cf8:	694b      	ldreq	r3, [r1, #20]
 8001cfa:	600f      	str	r7, [r1, #0]
 8001cfc:	bf18      	it	ne
 8001cfe:	2300      	movne	r3, #0
 8001d00:	eba6 0807 	sub.w	r8, r6, r7
 8001d04:	608b      	str	r3, [r1, #8]
 8001d06:	f1b8 0f00 	cmp.w	r8, #0
 8001d0a:	dd9c      	ble.n	8001c46 <__sflush_r+0x1a>
 8001d0c:	6a21      	ldr	r1, [r4, #32]
 8001d0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001d10:	4643      	mov	r3, r8
 8001d12:	463a      	mov	r2, r7
 8001d14:	4628      	mov	r0, r5
 8001d16:	47b0      	blx	r6
 8001d18:	2800      	cmp	r0, #0
 8001d1a:	dc06      	bgt.n	8001d2a <__sflush_r+0xfe>
 8001d1c:	89a3      	ldrh	r3, [r4, #12]
 8001d1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d22:	81a3      	strh	r3, [r4, #12]
 8001d24:	f04f 30ff 	mov.w	r0, #4294967295
 8001d28:	e78e      	b.n	8001c48 <__sflush_r+0x1c>
 8001d2a:	4407      	add	r7, r0
 8001d2c:	eba8 0800 	sub.w	r8, r8, r0
 8001d30:	e7e9      	b.n	8001d06 <__sflush_r+0xda>
 8001d32:	bf00      	nop
 8001d34:	20400001 	.word	0x20400001

08001d38 <_fflush_r>:
 8001d38:	b538      	push	{r3, r4, r5, lr}
 8001d3a:	690b      	ldr	r3, [r1, #16]
 8001d3c:	4605      	mov	r5, r0
 8001d3e:	460c      	mov	r4, r1
 8001d40:	b913      	cbnz	r3, 8001d48 <_fflush_r+0x10>
 8001d42:	2500      	movs	r5, #0
 8001d44:	4628      	mov	r0, r5
 8001d46:	bd38      	pop	{r3, r4, r5, pc}
 8001d48:	b118      	cbz	r0, 8001d52 <_fflush_r+0x1a>
 8001d4a:	6983      	ldr	r3, [r0, #24]
 8001d4c:	b90b      	cbnz	r3, 8001d52 <_fflush_r+0x1a>
 8001d4e:	f7ff f8f3 	bl	8000f38 <__sinit>
 8001d52:	4b14      	ldr	r3, [pc, #80]	; (8001da4 <_fflush_r+0x6c>)
 8001d54:	429c      	cmp	r4, r3
 8001d56:	d11b      	bne.n	8001d90 <_fflush_r+0x58>
 8001d58:	686c      	ldr	r4, [r5, #4]
 8001d5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0ef      	beq.n	8001d42 <_fflush_r+0xa>
 8001d62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001d64:	07d0      	lsls	r0, r2, #31
 8001d66:	d404      	bmi.n	8001d72 <_fflush_r+0x3a>
 8001d68:	0599      	lsls	r1, r3, #22
 8001d6a:	d402      	bmi.n	8001d72 <_fflush_r+0x3a>
 8001d6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001d6e:	f7ff f981 	bl	8001074 <__retarget_lock_acquire_recursive>
 8001d72:	4628      	mov	r0, r5
 8001d74:	4621      	mov	r1, r4
 8001d76:	f7ff ff59 	bl	8001c2c <__sflush_r>
 8001d7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001d7c:	07da      	lsls	r2, r3, #31
 8001d7e:	4605      	mov	r5, r0
 8001d80:	d4e0      	bmi.n	8001d44 <_fflush_r+0xc>
 8001d82:	89a3      	ldrh	r3, [r4, #12]
 8001d84:	059b      	lsls	r3, r3, #22
 8001d86:	d4dd      	bmi.n	8001d44 <_fflush_r+0xc>
 8001d88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001d8a:	f7ff f974 	bl	8001076 <__retarget_lock_release_recursive>
 8001d8e:	e7d9      	b.n	8001d44 <_fflush_r+0xc>
 8001d90:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <_fflush_r+0x70>)
 8001d92:	429c      	cmp	r4, r3
 8001d94:	d101      	bne.n	8001d9a <_fflush_r+0x62>
 8001d96:	68ac      	ldr	r4, [r5, #8]
 8001d98:	e7df      	b.n	8001d5a <_fflush_r+0x22>
 8001d9a:	4b04      	ldr	r3, [pc, #16]	; (8001dac <_fflush_r+0x74>)
 8001d9c:	429c      	cmp	r4, r3
 8001d9e:	bf08      	it	eq
 8001da0:	68ec      	ldreq	r4, [r5, #12]
 8001da2:	e7da      	b.n	8001d5a <_fflush_r+0x22>
 8001da4:	080020f8 	.word	0x080020f8
 8001da8:	08002118 	.word	0x08002118
 8001dac:	080020d8 	.word	0x080020d8

08001db0 <_lseek_r>:
 8001db0:	b538      	push	{r3, r4, r5, lr}
 8001db2:	4d07      	ldr	r5, [pc, #28]	; (8001dd0 <_lseek_r+0x20>)
 8001db4:	4604      	mov	r4, r0
 8001db6:	4608      	mov	r0, r1
 8001db8:	4611      	mov	r1, r2
 8001dba:	2200      	movs	r2, #0
 8001dbc:	602a      	str	r2, [r5, #0]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	f7fe ff8a 	bl	8000cd8 <_lseek>
 8001dc4:	1c43      	adds	r3, r0, #1
 8001dc6:	d102      	bne.n	8001dce <_lseek_r+0x1e>
 8001dc8:	682b      	ldr	r3, [r5, #0]
 8001dca:	b103      	cbz	r3, 8001dce <_lseek_r+0x1e>
 8001dcc:	6023      	str	r3, [r4, #0]
 8001dce:	bd38      	pop	{r3, r4, r5, pc}
 8001dd0:	20000640 	.word	0x20000640

08001dd4 <__swhatbuf_r>:
 8001dd4:	b570      	push	{r4, r5, r6, lr}
 8001dd6:	460e      	mov	r6, r1
 8001dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ddc:	2900      	cmp	r1, #0
 8001dde:	b096      	sub	sp, #88	; 0x58
 8001de0:	4614      	mov	r4, r2
 8001de2:	461d      	mov	r5, r3
 8001de4:	da07      	bge.n	8001df6 <__swhatbuf_r+0x22>
 8001de6:	2300      	movs	r3, #0
 8001de8:	602b      	str	r3, [r5, #0]
 8001dea:	89b3      	ldrh	r3, [r6, #12]
 8001dec:	061a      	lsls	r2, r3, #24
 8001dee:	d410      	bmi.n	8001e12 <__swhatbuf_r+0x3e>
 8001df0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001df4:	e00e      	b.n	8001e14 <__swhatbuf_r+0x40>
 8001df6:	466a      	mov	r2, sp
 8001df8:	f000 f90c 	bl	8002014 <_fstat_r>
 8001dfc:	2800      	cmp	r0, #0
 8001dfe:	dbf2      	blt.n	8001de6 <__swhatbuf_r+0x12>
 8001e00:	9a01      	ldr	r2, [sp, #4]
 8001e02:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001e06:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001e0a:	425a      	negs	r2, r3
 8001e0c:	415a      	adcs	r2, r3
 8001e0e:	602a      	str	r2, [r5, #0]
 8001e10:	e7ee      	b.n	8001df0 <__swhatbuf_r+0x1c>
 8001e12:	2340      	movs	r3, #64	; 0x40
 8001e14:	2000      	movs	r0, #0
 8001e16:	6023      	str	r3, [r4, #0]
 8001e18:	b016      	add	sp, #88	; 0x58
 8001e1a:	bd70      	pop	{r4, r5, r6, pc}

08001e1c <__smakebuf_r>:
 8001e1c:	898b      	ldrh	r3, [r1, #12]
 8001e1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001e20:	079d      	lsls	r5, r3, #30
 8001e22:	4606      	mov	r6, r0
 8001e24:	460c      	mov	r4, r1
 8001e26:	d507      	bpl.n	8001e38 <__smakebuf_r+0x1c>
 8001e28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001e2c:	6023      	str	r3, [r4, #0]
 8001e2e:	6123      	str	r3, [r4, #16]
 8001e30:	2301      	movs	r3, #1
 8001e32:	6163      	str	r3, [r4, #20]
 8001e34:	b002      	add	sp, #8
 8001e36:	bd70      	pop	{r4, r5, r6, pc}
 8001e38:	ab01      	add	r3, sp, #4
 8001e3a:	466a      	mov	r2, sp
 8001e3c:	f7ff ffca 	bl	8001dd4 <__swhatbuf_r>
 8001e40:	9900      	ldr	r1, [sp, #0]
 8001e42:	4605      	mov	r5, r0
 8001e44:	4630      	mov	r0, r6
 8001e46:	f7ff f917 	bl	8001078 <_malloc_r>
 8001e4a:	b948      	cbnz	r0, 8001e60 <__smakebuf_r+0x44>
 8001e4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e50:	059a      	lsls	r2, r3, #22
 8001e52:	d4ef      	bmi.n	8001e34 <__smakebuf_r+0x18>
 8001e54:	f023 0303 	bic.w	r3, r3, #3
 8001e58:	f043 0302 	orr.w	r3, r3, #2
 8001e5c:	81a3      	strh	r3, [r4, #12]
 8001e5e:	e7e3      	b.n	8001e28 <__smakebuf_r+0xc>
 8001e60:	4b0d      	ldr	r3, [pc, #52]	; (8001e98 <__smakebuf_r+0x7c>)
 8001e62:	62b3      	str	r3, [r6, #40]	; 0x28
 8001e64:	89a3      	ldrh	r3, [r4, #12]
 8001e66:	6020      	str	r0, [r4, #0]
 8001e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e6c:	81a3      	strh	r3, [r4, #12]
 8001e6e:	9b00      	ldr	r3, [sp, #0]
 8001e70:	6163      	str	r3, [r4, #20]
 8001e72:	9b01      	ldr	r3, [sp, #4]
 8001e74:	6120      	str	r0, [r4, #16]
 8001e76:	b15b      	cbz	r3, 8001e90 <__smakebuf_r+0x74>
 8001e78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e7c:	4630      	mov	r0, r6
 8001e7e:	f000 f8db 	bl	8002038 <_isatty_r>
 8001e82:	b128      	cbz	r0, 8001e90 <__smakebuf_r+0x74>
 8001e84:	89a3      	ldrh	r3, [r4, #12]
 8001e86:	f023 0303 	bic.w	r3, r3, #3
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	81a3      	strh	r3, [r4, #12]
 8001e90:	89a0      	ldrh	r0, [r4, #12]
 8001e92:	4305      	orrs	r5, r0
 8001e94:	81a5      	strh	r5, [r4, #12]
 8001e96:	e7cd      	b.n	8001e34 <__smakebuf_r+0x18>
 8001e98:	08000ed1 	.word	0x08000ed1

08001e9c <memcpy>:
 8001e9c:	440a      	add	r2, r1
 8001e9e:	4291      	cmp	r1, r2
 8001ea0:	f100 33ff 	add.w	r3, r0, #4294967295
 8001ea4:	d100      	bne.n	8001ea8 <memcpy+0xc>
 8001ea6:	4770      	bx	lr
 8001ea8:	b510      	push	{r4, lr}
 8001eaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001eae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001eb2:	4291      	cmp	r1, r2
 8001eb4:	d1f9      	bne.n	8001eaa <memcpy+0xe>
 8001eb6:	bd10      	pop	{r4, pc}

08001eb8 <memmove>:
 8001eb8:	4288      	cmp	r0, r1
 8001eba:	b510      	push	{r4, lr}
 8001ebc:	eb01 0402 	add.w	r4, r1, r2
 8001ec0:	d902      	bls.n	8001ec8 <memmove+0x10>
 8001ec2:	4284      	cmp	r4, r0
 8001ec4:	4623      	mov	r3, r4
 8001ec6:	d807      	bhi.n	8001ed8 <memmove+0x20>
 8001ec8:	1e43      	subs	r3, r0, #1
 8001eca:	42a1      	cmp	r1, r4
 8001ecc:	d008      	beq.n	8001ee0 <memmove+0x28>
 8001ece:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001ed2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001ed6:	e7f8      	b.n	8001eca <memmove+0x12>
 8001ed8:	4402      	add	r2, r0
 8001eda:	4601      	mov	r1, r0
 8001edc:	428a      	cmp	r2, r1
 8001ede:	d100      	bne.n	8001ee2 <memmove+0x2a>
 8001ee0:	bd10      	pop	{r4, pc}
 8001ee2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001ee6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001eea:	e7f7      	b.n	8001edc <memmove+0x24>

08001eec <__malloc_lock>:
 8001eec:	4801      	ldr	r0, [pc, #4]	; (8001ef4 <__malloc_lock+0x8>)
 8001eee:	f7ff b8c1 	b.w	8001074 <__retarget_lock_acquire_recursive>
 8001ef2:	bf00      	nop
 8001ef4:	20000638 	.word	0x20000638

08001ef8 <__malloc_unlock>:
 8001ef8:	4801      	ldr	r0, [pc, #4]	; (8001f00 <__malloc_unlock+0x8>)
 8001efa:	f7ff b8bc 	b.w	8001076 <__retarget_lock_release_recursive>
 8001efe:	bf00      	nop
 8001f00:	20000638 	.word	0x20000638

08001f04 <_free_r>:
 8001f04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001f06:	2900      	cmp	r1, #0
 8001f08:	d048      	beq.n	8001f9c <_free_r+0x98>
 8001f0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f0e:	9001      	str	r0, [sp, #4]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f1a1 0404 	sub.w	r4, r1, #4
 8001f16:	bfb8      	it	lt
 8001f18:	18e4      	addlt	r4, r4, r3
 8001f1a:	f7ff ffe7 	bl	8001eec <__malloc_lock>
 8001f1e:	4a20      	ldr	r2, [pc, #128]	; (8001fa0 <_free_r+0x9c>)
 8001f20:	9801      	ldr	r0, [sp, #4]
 8001f22:	6813      	ldr	r3, [r2, #0]
 8001f24:	4615      	mov	r5, r2
 8001f26:	b933      	cbnz	r3, 8001f36 <_free_r+0x32>
 8001f28:	6063      	str	r3, [r4, #4]
 8001f2a:	6014      	str	r4, [r2, #0]
 8001f2c:	b003      	add	sp, #12
 8001f2e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001f32:	f7ff bfe1 	b.w	8001ef8 <__malloc_unlock>
 8001f36:	42a3      	cmp	r3, r4
 8001f38:	d90b      	bls.n	8001f52 <_free_r+0x4e>
 8001f3a:	6821      	ldr	r1, [r4, #0]
 8001f3c:	1862      	adds	r2, r4, r1
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	bf04      	itt	eq
 8001f42:	681a      	ldreq	r2, [r3, #0]
 8001f44:	685b      	ldreq	r3, [r3, #4]
 8001f46:	6063      	str	r3, [r4, #4]
 8001f48:	bf04      	itt	eq
 8001f4a:	1852      	addeq	r2, r2, r1
 8001f4c:	6022      	streq	r2, [r4, #0]
 8001f4e:	602c      	str	r4, [r5, #0]
 8001f50:	e7ec      	b.n	8001f2c <_free_r+0x28>
 8001f52:	461a      	mov	r2, r3
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	b10b      	cbz	r3, 8001f5c <_free_r+0x58>
 8001f58:	42a3      	cmp	r3, r4
 8001f5a:	d9fa      	bls.n	8001f52 <_free_r+0x4e>
 8001f5c:	6811      	ldr	r1, [r2, #0]
 8001f5e:	1855      	adds	r5, r2, r1
 8001f60:	42a5      	cmp	r5, r4
 8001f62:	d10b      	bne.n	8001f7c <_free_r+0x78>
 8001f64:	6824      	ldr	r4, [r4, #0]
 8001f66:	4421      	add	r1, r4
 8001f68:	1854      	adds	r4, r2, r1
 8001f6a:	42a3      	cmp	r3, r4
 8001f6c:	6011      	str	r1, [r2, #0]
 8001f6e:	d1dd      	bne.n	8001f2c <_free_r+0x28>
 8001f70:	681c      	ldr	r4, [r3, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	6053      	str	r3, [r2, #4]
 8001f76:	4421      	add	r1, r4
 8001f78:	6011      	str	r1, [r2, #0]
 8001f7a:	e7d7      	b.n	8001f2c <_free_r+0x28>
 8001f7c:	d902      	bls.n	8001f84 <_free_r+0x80>
 8001f7e:	230c      	movs	r3, #12
 8001f80:	6003      	str	r3, [r0, #0]
 8001f82:	e7d3      	b.n	8001f2c <_free_r+0x28>
 8001f84:	6825      	ldr	r5, [r4, #0]
 8001f86:	1961      	adds	r1, r4, r5
 8001f88:	428b      	cmp	r3, r1
 8001f8a:	bf04      	itt	eq
 8001f8c:	6819      	ldreq	r1, [r3, #0]
 8001f8e:	685b      	ldreq	r3, [r3, #4]
 8001f90:	6063      	str	r3, [r4, #4]
 8001f92:	bf04      	itt	eq
 8001f94:	1949      	addeq	r1, r1, r5
 8001f96:	6021      	streq	r1, [r4, #0]
 8001f98:	6054      	str	r4, [r2, #4]
 8001f9a:	e7c7      	b.n	8001f2c <_free_r+0x28>
 8001f9c:	b003      	add	sp, #12
 8001f9e:	bd30      	pop	{r4, r5, pc}
 8001fa0:	200004d0 	.word	0x200004d0

08001fa4 <_realloc_r>:
 8001fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fa6:	4607      	mov	r7, r0
 8001fa8:	4614      	mov	r4, r2
 8001faa:	460e      	mov	r6, r1
 8001fac:	b921      	cbnz	r1, 8001fb8 <_realloc_r+0x14>
 8001fae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001fb2:	4611      	mov	r1, r2
 8001fb4:	f7ff b860 	b.w	8001078 <_malloc_r>
 8001fb8:	b922      	cbnz	r2, 8001fc4 <_realloc_r+0x20>
 8001fba:	f7ff ffa3 	bl	8001f04 <_free_r>
 8001fbe:	4625      	mov	r5, r4
 8001fc0:	4628      	mov	r0, r5
 8001fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fc4:	f000 f848 	bl	8002058 <_malloc_usable_size_r>
 8001fc8:	42a0      	cmp	r0, r4
 8001fca:	d20f      	bcs.n	8001fec <_realloc_r+0x48>
 8001fcc:	4621      	mov	r1, r4
 8001fce:	4638      	mov	r0, r7
 8001fd0:	f7ff f852 	bl	8001078 <_malloc_r>
 8001fd4:	4605      	mov	r5, r0
 8001fd6:	2800      	cmp	r0, #0
 8001fd8:	d0f2      	beq.n	8001fc0 <_realloc_r+0x1c>
 8001fda:	4631      	mov	r1, r6
 8001fdc:	4622      	mov	r2, r4
 8001fde:	f7ff ff5d 	bl	8001e9c <memcpy>
 8001fe2:	4631      	mov	r1, r6
 8001fe4:	4638      	mov	r0, r7
 8001fe6:	f7ff ff8d 	bl	8001f04 <_free_r>
 8001fea:	e7e9      	b.n	8001fc0 <_realloc_r+0x1c>
 8001fec:	4635      	mov	r5, r6
 8001fee:	e7e7      	b.n	8001fc0 <_realloc_r+0x1c>

08001ff0 <_read_r>:
 8001ff0:	b538      	push	{r3, r4, r5, lr}
 8001ff2:	4d07      	ldr	r5, [pc, #28]	; (8002010 <_read_r+0x20>)
 8001ff4:	4604      	mov	r4, r0
 8001ff6:	4608      	mov	r0, r1
 8001ff8:	4611      	mov	r1, r2
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	602a      	str	r2, [r5, #0]
 8001ffe:	461a      	mov	r2, r3
 8002000:	f7fe fe0a 	bl	8000c18 <_read>
 8002004:	1c43      	adds	r3, r0, #1
 8002006:	d102      	bne.n	800200e <_read_r+0x1e>
 8002008:	682b      	ldr	r3, [r5, #0]
 800200a:	b103      	cbz	r3, 800200e <_read_r+0x1e>
 800200c:	6023      	str	r3, [r4, #0]
 800200e:	bd38      	pop	{r3, r4, r5, pc}
 8002010:	20000640 	.word	0x20000640

08002014 <_fstat_r>:
 8002014:	b538      	push	{r3, r4, r5, lr}
 8002016:	4d07      	ldr	r5, [pc, #28]	; (8002034 <_fstat_r+0x20>)
 8002018:	2300      	movs	r3, #0
 800201a:	4604      	mov	r4, r0
 800201c:	4608      	mov	r0, r1
 800201e:	4611      	mov	r1, r2
 8002020:	602b      	str	r3, [r5, #0]
 8002022:	f7fe fe3e 	bl	8000ca2 <_fstat>
 8002026:	1c43      	adds	r3, r0, #1
 8002028:	d102      	bne.n	8002030 <_fstat_r+0x1c>
 800202a:	682b      	ldr	r3, [r5, #0]
 800202c:	b103      	cbz	r3, 8002030 <_fstat_r+0x1c>
 800202e:	6023      	str	r3, [r4, #0]
 8002030:	bd38      	pop	{r3, r4, r5, pc}
 8002032:	bf00      	nop
 8002034:	20000640 	.word	0x20000640

08002038 <_isatty_r>:
 8002038:	b538      	push	{r3, r4, r5, lr}
 800203a:	4d06      	ldr	r5, [pc, #24]	; (8002054 <_isatty_r+0x1c>)
 800203c:	2300      	movs	r3, #0
 800203e:	4604      	mov	r4, r0
 8002040:	4608      	mov	r0, r1
 8002042:	602b      	str	r3, [r5, #0]
 8002044:	f7fe fe3d 	bl	8000cc2 <_isatty>
 8002048:	1c43      	adds	r3, r0, #1
 800204a:	d102      	bne.n	8002052 <_isatty_r+0x1a>
 800204c:	682b      	ldr	r3, [r5, #0]
 800204e:	b103      	cbz	r3, 8002052 <_isatty_r+0x1a>
 8002050:	6023      	str	r3, [r4, #0]
 8002052:	bd38      	pop	{r3, r4, r5, pc}
 8002054:	20000640 	.word	0x20000640

08002058 <_malloc_usable_size_r>:
 8002058:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800205c:	1f18      	subs	r0, r3, #4
 800205e:	2b00      	cmp	r3, #0
 8002060:	bfbc      	itt	lt
 8002062:	580b      	ldrlt	r3, [r1, r0]
 8002064:	18c0      	addlt	r0, r0, r3
 8002066:	4770      	bx	lr

08002068 <_init>:
 8002068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800206a:	bf00      	nop
 800206c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800206e:	bc08      	pop	{r3}
 8002070:	469e      	mov	lr, r3
 8002072:	4770      	bx	lr

08002074 <_fini>:
 8002074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002076:	bf00      	nop
 8002078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800207a:	bc08      	pop	{r3}
 800207c:	469e      	mov	lr, r3
 800207e:	4770      	bx	lr
