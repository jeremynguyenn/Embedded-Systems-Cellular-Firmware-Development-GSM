
13__A6_app_hdrw_ctrl_frm_sms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022b0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003dc  08002450  08002450  00012450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800282c  0800282c  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  0800282c  0800282c  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800282c  0800282c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800282c  0800282c  0001282c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002830  08002830  00012830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08002834  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c0  20000090  080028c4  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000750  080028c4  00020750  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005d51  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001150  00000000  00000000  00025e11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003e8  00000000  00000000  00026f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000360  00000000  00000000  00027350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001035e  00000000  00000000  000276b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003ea6  00000000  00000000  00037a0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00056274  00000000  00000000  0003b8b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00091b28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000163c  00000000  00000000  00091b7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002438 	.word	0x08002438

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	08002438 	.word	0x08002438

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__io_putchar>:

static uint16_t compute_uart_bd(uint32_t periph_clk,uint32_t baudrate);
static void debug_uart_write(int ch);

int __io_putchar(int ch)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	debug_uart_write(ch);
 8000288:	6878      	ldr	r0, [r7, #4]
 800028a:	f000 f913 	bl	80004b4 <debug_uart_write>
	return ch;
 800028e:	687b      	ldr	r3, [r7, #4]
}
 8000290:	4618      	mov	r0, r3
 8000292:	3708      	adds	r7, #8
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}

08000298 <debug_uart_init>:

void debug_uart_init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	/*1. Enable clock access to UART pins' GPIO port (GPIOA)*/
	RCC->AHB1ENR |= GPIOAEN;
 800029c:	4b36      	ldr	r3, [pc, #216]	; (8000378 <debug_uart_init+0xe0>)
 800029e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a0:	4a35      	ldr	r2, [pc, #212]	; (8000378 <debug_uart_init+0xe0>)
 80002a2:	f043 0301 	orr.w	r3, r3, #1
 80002a6:	6313      	str	r3, [r2, #48]	; 0x30

	/*2. Set PA2 mode to alternate function*/
	GPIOA->MODER &= ~(1U<<4);
 80002a8:	4b34      	ldr	r3, [pc, #208]	; (800037c <debug_uart_init+0xe4>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a33      	ldr	r2, [pc, #204]	; (800037c <debug_uart_init+0xe4>)
 80002ae:	f023 0310 	bic.w	r3, r3, #16
 80002b2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 80002b4:	4b31      	ldr	r3, [pc, #196]	; (800037c <debug_uart_init+0xe4>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a30      	ldr	r2, [pc, #192]	; (800037c <debug_uart_init+0xe4>)
 80002ba:	f043 0320 	orr.w	r3, r3, #32
 80002be:	6013      	str	r3, [r2, #0]

	/*3. Set PA3 mode to alternate function*/
	GPIOA->MODER &= ~(1U<<6);
 80002c0:	4b2e      	ldr	r3, [pc, #184]	; (800037c <debug_uart_init+0xe4>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a2d      	ldr	r2, [pc, #180]	; (800037c <debug_uart_init+0xe4>)
 80002c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80002ca:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 80002cc:	4b2b      	ldr	r3, [pc, #172]	; (800037c <debug_uart_init+0xe4>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a2a      	ldr	r2, [pc, #168]	; (800037c <debug_uart_init+0xe4>)
 80002d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002d6:	6013      	str	r3, [r2, #0]

	/*4.Set PA2 alternate function type to UART2_TX (AF07)*/
	GPIOA->AFR[0] |=(1U<<8);
 80002d8:	4b28      	ldr	r3, [pc, #160]	; (800037c <debug_uart_init+0xe4>)
 80002da:	6a1b      	ldr	r3, [r3, #32]
 80002dc:	4a27      	ldr	r2, [pc, #156]	; (800037c <debug_uart_init+0xe4>)
 80002de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002e2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 80002e4:	4b25      	ldr	r3, [pc, #148]	; (800037c <debug_uart_init+0xe4>)
 80002e6:	6a1b      	ldr	r3, [r3, #32]
 80002e8:	4a24      	ldr	r2, [pc, #144]	; (800037c <debug_uart_init+0xe4>)
 80002ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002ee:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 80002f0:	4b22      	ldr	r3, [pc, #136]	; (800037c <debug_uart_init+0xe4>)
 80002f2:	6a1b      	ldr	r3, [r3, #32]
 80002f4:	4a21      	ldr	r2, [pc, #132]	; (800037c <debug_uart_init+0xe4>)
 80002f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002fa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 80002fc:	4b1f      	ldr	r3, [pc, #124]	; (800037c <debug_uart_init+0xe4>)
 80002fe:	6a1b      	ldr	r3, [r3, #32]
 8000300:	4a1e      	ldr	r2, [pc, #120]	; (800037c <debug_uart_init+0xe4>)
 8000302:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000306:	6213      	str	r3, [r2, #32]

	/*4.Set PA3 alternate function type to UART2_RX (AF07)*/
	GPIOA->AFR[0] |=(1U<<12);
 8000308:	4b1c      	ldr	r3, [pc, #112]	; (800037c <debug_uart_init+0xe4>)
 800030a:	6a1b      	ldr	r3, [r3, #32]
 800030c:	4a1b      	ldr	r2, [pc, #108]	; (800037c <debug_uart_init+0xe4>)
 800030e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000312:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<13);
 8000314:	4b19      	ldr	r3, [pc, #100]	; (800037c <debug_uart_init+0xe4>)
 8000316:	6a1b      	ldr	r3, [r3, #32]
 8000318:	4a18      	ldr	r2, [pc, #96]	; (800037c <debug_uart_init+0xe4>)
 800031a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800031e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<14);
 8000320:	4b16      	ldr	r3, [pc, #88]	; (800037c <debug_uart_init+0xe4>)
 8000322:	6a1b      	ldr	r3, [r3, #32]
 8000324:	4a15      	ldr	r2, [pc, #84]	; (800037c <debug_uart_init+0xe4>)
 8000326:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800032a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<15);
 800032c:	4b13      	ldr	r3, [pc, #76]	; (800037c <debug_uart_init+0xe4>)
 800032e:	6a1b      	ldr	r3, [r3, #32]
 8000330:	4a12      	ldr	r2, [pc, #72]	; (800037c <debug_uart_init+0xe4>)
 8000332:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000336:	6213      	str	r3, [r2, #32]

	/*Configure UART module*/

	/*5. Enable clock access to the UART module*/
	RCC->APB1ENR |= UART2EN;
 8000338:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <debug_uart_init+0xe0>)
 800033a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800033c:	4a0e      	ldr	r2, [pc, #56]	; (8000378 <debug_uart_init+0xe0>)
 800033e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000342:	6413      	str	r3, [r2, #64]	; 0x40

	/*6. Disable UART module*/
	USART2->CR1 &=~CR1_UE;
 8000344:	4b0e      	ldr	r3, [pc, #56]	; (8000380 <debug_uart_init+0xe8>)
 8000346:	68db      	ldr	r3, [r3, #12]
 8000348:	4a0d      	ldr	r2, [pc, #52]	; (8000380 <debug_uart_init+0xe8>)
 800034a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800034e:	60d3      	str	r3, [r2, #12]

	/*7. Set UART baudrate*/
	USART2->BRR =  compute_uart_bd(SYS_FREQ,UART_BAUDRATE);
 8000350:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000354:	480b      	ldr	r0, [pc, #44]	; (8000384 <debug_uart_init+0xec>)
 8000356:	f000 f8c5 	bl	80004e4 <compute_uart_bd>
 800035a:	4603      	mov	r3, r0
 800035c:	461a      	mov	r2, r3
 800035e:	4b08      	ldr	r3, [pc, #32]	; (8000380 <debug_uart_init+0xe8>)
 8000360:	609a      	str	r2, [r3, #8]

    /*8. Set trnasfer direction*/
	USART2->CR1 = (CR1_TE | CR1_RE);
 8000362:	4b07      	ldr	r3, [pc, #28]	; (8000380 <debug_uart_init+0xe8>)
 8000364:	220c      	movs	r2, #12
 8000366:	60da      	str	r2, [r3, #12]

	/*9. Enable UART module*/
	USART2->CR1 |= CR1_UE;
 8000368:	4b05      	ldr	r3, [pc, #20]	; (8000380 <debug_uart_init+0xe8>)
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	4a04      	ldr	r2, [pc, #16]	; (8000380 <debug_uart_init+0xe8>)
 800036e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000372:	60d3      	str	r3, [r2, #12]


}
 8000374:	bf00      	nop
 8000376:	bd80      	pop	{r7, pc}
 8000378:	40023800 	.word	0x40023800
 800037c:	40020000 	.word	0x40020000
 8000380:	40004400 	.word	0x40004400
 8000384:	00f42400 	.word	0x00f42400

08000388 <a6_uart_init>:
 * A6 TX Pin   ==> PA10(RX)
 * A6 RX Pin   ==> PA9(TX)
 * */

void a6_uart_init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
	/*1. Enable clock access to UART pins' GPIO port (GPIOA)*/
	RCC->AHB1ENR |= GPIOAEN;
 800038c:	4b39      	ldr	r3, [pc, #228]	; (8000474 <a6_uart_init+0xec>)
 800038e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000390:	4a38      	ldr	r2, [pc, #224]	; (8000474 <a6_uart_init+0xec>)
 8000392:	f043 0301 	orr.w	r3, r3, #1
 8000396:	6313      	str	r3, [r2, #48]	; 0x30

	/*2. Set PA9 mode to alternate function*/
	GPIOA->MODER &= ~(1U<<18);
 8000398:	4b37      	ldr	r3, [pc, #220]	; (8000478 <a6_uart_init+0xf0>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a36      	ldr	r2, [pc, #216]	; (8000478 <a6_uart_init+0xf0>)
 800039e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80003a2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<19);
 80003a4:	4b34      	ldr	r3, [pc, #208]	; (8000478 <a6_uart_init+0xf0>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a33      	ldr	r2, [pc, #204]	; (8000478 <a6_uart_init+0xf0>)
 80003aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003ae:	6013      	str	r3, [r2, #0]

	/*3. Set PA10 mode to alternate function*/
	GPIOA->MODER &= ~(1U<<20);
 80003b0:	4b31      	ldr	r3, [pc, #196]	; (8000478 <a6_uart_init+0xf0>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a30      	ldr	r2, [pc, #192]	; (8000478 <a6_uart_init+0xf0>)
 80003b6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80003ba:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<21);
 80003bc:	4b2e      	ldr	r3, [pc, #184]	; (8000478 <a6_uart_init+0xf0>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a2d      	ldr	r2, [pc, #180]	; (8000478 <a6_uart_init+0xf0>)
 80003c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003c6:	6013      	str	r3, [r2, #0]

	/*4.Set PA9 alternate function type to UART1_TX (AF07)*/
	GPIOA->AFR[1] |=(1U<<4);
 80003c8:	4b2b      	ldr	r3, [pc, #172]	; (8000478 <a6_uart_init+0xf0>)
 80003ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003cc:	4a2a      	ldr	r2, [pc, #168]	; (8000478 <a6_uart_init+0xf0>)
 80003ce:	f043 0310 	orr.w	r3, r3, #16
 80003d2:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |=(1U<<5);
 80003d4:	4b28      	ldr	r3, [pc, #160]	; (8000478 <a6_uart_init+0xf0>)
 80003d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003d8:	4a27      	ldr	r2, [pc, #156]	; (8000478 <a6_uart_init+0xf0>)
 80003da:	f043 0320 	orr.w	r3, r3, #32
 80003de:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |=(1U<<6);
 80003e0:	4b25      	ldr	r3, [pc, #148]	; (8000478 <a6_uart_init+0xf0>)
 80003e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003e4:	4a24      	ldr	r2, [pc, #144]	; (8000478 <a6_uart_init+0xf0>)
 80003e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003ea:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] &= ~(1U<<7);
 80003ec:	4b22      	ldr	r3, [pc, #136]	; (8000478 <a6_uart_init+0xf0>)
 80003ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003f0:	4a21      	ldr	r2, [pc, #132]	; (8000478 <a6_uart_init+0xf0>)
 80003f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80003f6:	6253      	str	r3, [r2, #36]	; 0x24

	/*4.Set PA10 alternate function type to UART1_RX (AF07)*/
	GPIOA->AFR[1] |=(1U<<8);
 80003f8:	4b1f      	ldr	r3, [pc, #124]	; (8000478 <a6_uart_init+0xf0>)
 80003fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003fc:	4a1e      	ldr	r2, [pc, #120]	; (8000478 <a6_uart_init+0xf0>)
 80003fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000402:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |=(1U<<9);
 8000404:	4b1c      	ldr	r3, [pc, #112]	; (8000478 <a6_uart_init+0xf0>)
 8000406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000408:	4a1b      	ldr	r2, [pc, #108]	; (8000478 <a6_uart_init+0xf0>)
 800040a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800040e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |=(1U<<10);
 8000410:	4b19      	ldr	r3, [pc, #100]	; (8000478 <a6_uart_init+0xf0>)
 8000412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000414:	4a18      	ldr	r2, [pc, #96]	; (8000478 <a6_uart_init+0xf0>)
 8000416:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800041a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] &= ~(1U<<11);
 800041c:	4b16      	ldr	r3, [pc, #88]	; (8000478 <a6_uart_init+0xf0>)
 800041e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000420:	4a15      	ldr	r2, [pc, #84]	; (8000478 <a6_uart_init+0xf0>)
 8000422:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000426:	6253      	str	r3, [r2, #36]	; 0x24

	/*Configure UART module*/

    /*5. Enable clock access to the UART module*/
     RCC->APB2ENR |= UART1EN;
 8000428:	4b12      	ldr	r3, [pc, #72]	; (8000474 <a6_uart_init+0xec>)
 800042a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800042c:	4a11      	ldr	r2, [pc, #68]	; (8000474 <a6_uart_init+0xec>)
 800042e:	f043 0310 	orr.w	r3, r3, #16
 8000432:	6453      	str	r3, [r2, #68]	; 0x44

 	/*6. Disable UART module*/
 	 USART1->CR1 &=~CR1_UE;
 8000434:	4b11      	ldr	r3, [pc, #68]	; (800047c <a6_uart_init+0xf4>)
 8000436:	68db      	ldr	r3, [r3, #12]
 8000438:	4a10      	ldr	r2, [pc, #64]	; (800047c <a6_uart_init+0xf4>)
 800043a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800043e:	60d3      	str	r3, [r2, #12]

 	/*7. Set UART baudrate*/
 	USART1->BRR =  compute_uart_bd(SYS_FREQ,UART_BAUDRATE);
 8000440:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000444:	480e      	ldr	r0, [pc, #56]	; (8000480 <a6_uart_init+0xf8>)
 8000446:	f000 f84d 	bl	80004e4 <compute_uart_bd>
 800044a:	4603      	mov	r3, r0
 800044c:	461a      	mov	r2, r3
 800044e:	4b0b      	ldr	r3, [pc, #44]	; (800047c <a6_uart_init+0xf4>)
 8000450:	609a      	str	r2, [r3, #8]

    /*8. Set trnasfer direction*/
	USART1->CR1 = (CR1_TE | CR1_RE);
 8000452:	4b0a      	ldr	r3, [pc, #40]	; (800047c <a6_uart_init+0xf4>)
 8000454:	220c      	movs	r2, #12
 8000456:	60da      	str	r2, [r3, #12]

	/*9. Enable RXNEIE/*/

	USART1->CR1 |= CR1_RXNEIE;
 8000458:	4b08      	ldr	r3, [pc, #32]	; (800047c <a6_uart_init+0xf4>)
 800045a:	68db      	ldr	r3, [r3, #12]
 800045c:	4a07      	ldr	r2, [pc, #28]	; (800047c <a6_uart_init+0xf4>)
 800045e:	f043 0320 	orr.w	r3, r3, #32
 8000462:	60d3      	str	r3, [r2, #12]


 	/*6. Disable UART module*/
 	USART1->CR1 |= CR1_UE;
 8000464:	4b05      	ldr	r3, [pc, #20]	; (800047c <a6_uart_init+0xf4>)
 8000466:	68db      	ldr	r3, [r3, #12]
 8000468:	4a04      	ldr	r2, [pc, #16]	; (800047c <a6_uart_init+0xf4>)
 800046a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800046e:	60d3      	str	r3, [r2, #12]


}
 8000470:	bf00      	nop
 8000472:	bd80      	pop	{r7, pc}
 8000474:	40023800 	.word	0x40023800
 8000478:	40020000 	.word	0x40020000
 800047c:	40011000 	.word	0x40011000
 8000480:	00f42400 	.word	0x00f42400

08000484 <a6_uart_write_char>:

void a6_uart_write_char(char ch)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	71fb      	strb	r3, [r7, #7]
	/*Make sure the transmit data register is empty*/
	while(!(USART1->SR & SR_TXE)){}
 800048e:	bf00      	nop
 8000490:	4b07      	ldr	r3, [pc, #28]	; (80004b0 <a6_uart_write_char+0x2c>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000498:	2b00      	cmp	r3, #0
 800049a:	d0f9      	beq.n	8000490 <a6_uart_write_char+0xc>

	/*Write to transmit data register*/
	USART1->DR = (ch & 0xFF);
 800049c:	4a04      	ldr	r2, [pc, #16]	; (80004b0 <a6_uart_write_char+0x2c>)
 800049e:	79fb      	ldrb	r3, [r7, #7]
 80004a0:	6053      	str	r3, [r2, #4]

}
 80004a2:	bf00      	nop
 80004a4:	370c      	adds	r7, #12
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	40011000 	.word	0x40011000

080004b4 <debug_uart_write>:

static void debug_uart_write(int ch)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}
 80004bc:	bf00      	nop
 80004be:	4b08      	ldr	r3, [pc, #32]	; (80004e0 <debug_uart_write+0x2c>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d0f9      	beq.n	80004be <debug_uart_write+0xa>

	/*Write to transmit data register*/
	USART2->DR = (ch & 0xFF);
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4a04      	ldr	r2, [pc, #16]	; (80004e0 <debug_uart_write+0x2c>)
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	6053      	str	r3, [r2, #4]
}
 80004d2:	bf00      	nop
 80004d4:	370c      	adds	r7, #12
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	40004400 	.word	0x40004400

080004e4 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t periph_clk,uint32_t baudrate)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	085a      	lsrs	r2, r3, #1
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	441a      	add	r2, r3
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80004fc:	b29b      	uxth	r3, r3
}
 80004fe:	4618      	mov	r0, r3
 8000500:	370c      	adds	r7, #12
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
	...

0800050c <systick_delay_ms>:


void systick_delay_ms(uint32_t delay)
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
	/*1.Reload with number of clocks per millisecond*/
	SysTick->LOAD = SYSTICK_LOAD_VAL;
 8000514:	4b11      	ldr	r3, [pc, #68]	; (800055c <systick_delay_ms+0x50>)
 8000516:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800051a:	605a      	str	r2, [r3, #4]

	/*2. Clear systick current value register*/
	SysTick->VAL = 0;
 800051c:	4b0f      	ldr	r3, [pc, #60]	; (800055c <systick_delay_ms+0x50>)
 800051e:	2200      	movs	r2, #0
 8000520:	609a      	str	r2, [r3, #8]

	/*3. Enable systick and select internal clk src*/
	SysTick->CTRL = (CTRL_CLKSRC | CTRL_ENABLE);
 8000522:	4b0e      	ldr	r3, [pc, #56]	; (800055c <systick_delay_ms+0x50>)
 8000524:	2205      	movs	r2, #5
 8000526:	601a      	str	r2, [r3, #0]

	for(int i = 0 ; i < delay ; i++  )
 8000528:	2300      	movs	r3, #0
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	e009      	b.n	8000542 <systick_delay_ms+0x36>
	{
		while((SysTick->CTRL & CTRL_COUNTFLAG) == 0){}
 800052e:	bf00      	nop
 8000530:	4b0a      	ldr	r3, [pc, #40]	; (800055c <systick_delay_ms+0x50>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000538:	2b00      	cmp	r3, #0
 800053a:	d0f9      	beq.n	8000530 <systick_delay_ms+0x24>
	for(int i = 0 ; i < delay ; i++  )
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	3301      	adds	r3, #1
 8000540:	60fb      	str	r3, [r7, #12]
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	429a      	cmp	r2, r3
 8000548:	d8f1      	bhi.n	800052e <systick_delay_ms+0x22>
	}

	SysTick->CTRL = 0;
 800054a:	4b04      	ldr	r3, [pc, #16]	; (800055c <systick_delay_ms+0x50>)
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
}
 8000550:	bf00      	nop
 8000552:	3714      	adds	r7, #20
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr
 800055c:	e000e010 	.word	0xe000e010

08000560 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800056a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800056e:	2b00      	cmp	r3, #0
 8000570:	db0b      	blt.n	800058a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	f003 021f 	and.w	r2, r3, #31
 8000578:	4907      	ldr	r1, [pc, #28]	; (8000598 <__NVIC_EnableIRQ+0x38>)
 800057a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800057e:	095b      	lsrs	r3, r3, #5
 8000580:	2001      	movs	r0, #1
 8000582:	fa00 f202 	lsl.w	r2, r0, r2
 8000586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	e000e100 	.word	0xe000e100

0800059c <a6_module_init>:
char sms_msg[SMS_MSG_LEN]		  = {'\0'};


uint8_t SMS_NOTIF = 0;
void a6_module_init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	/*Enable fifos*/
	tx_fifo_init();
 80005a0:	f000 fb7a 	bl	8000c98 <tx_fifo_init>
	rx_fifo_init();
 80005a4:	f000 fbec 	bl	8000d80 <rx_fifo_init>

	/*Enable a6 uart*/
	a6_uart_init();
 80005a8:	f7ff feee 	bl	8000388 <a6_uart_init>

	/*Enable debug uart*/
	debug_uart_init();
 80005ac:	f7ff fe74 	bl	8000298 <debug_uart_init>

	/*Initialize flags*/
	searching   = false;
 80005b0:	4b0a      	ldr	r3, [pc, #40]	; (80005dc <a6_module_init+0x40>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	701a      	strb	r2, [r3, #0]
	is_response	= false;
 80005b6:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <a6_module_init+0x44>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	701a      	strb	r2, [r3, #0]

	printf("A6 Initialization...\n\r");
 80005bc:	4809      	ldr	r0, [pc, #36]	; (80005e4 <a6_module_init+0x48>)
 80005be:	f000 ffb7 	bl	8001530 <iprintf>

	/*Enable interrupt*/
	NVIC_EnableIRQ(USART1_IRQn);
 80005c2:	2025      	movs	r0, #37	; 0x25
 80005c4:	f7ff ffcc 	bl	8000560 <__NVIC_EnableIRQ>

	/*Run test command*/
	a6_startup_test();
 80005c8:	f000 f8f6 	bl	80007b8 <a6_startup_test>

	/*Check signal quality*/
	a6_signal_quality();
 80005cc:	f000 f928 	bl	8000820 <a6_signal_quality>

	/*Check network registration status*/
	a6_network_reg();
 80005d0:	f000 f9f0 	bl	80009b4 <a6_network_reg>

	/*Get module name*/
	a6_module_name();
 80005d4:	f000 fa22 	bl	8000a1c <a6_module_name>
}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	200000ac 	.word	0x200000ac
 80005e0:	200000ad 	.word	0x200000ad
 80005e4:	08002450 	.word	0x08002450

080005e8 <a6_set_sms_format_to_text>:
	return 0;
}


uint8_t a6_set_sms_format_to_text(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
	uint8_t num_of_try  = MAX_NUM_OF_TRY;
 80005ee:	230a      	movs	r3, #10
 80005f0:	71fb      	strb	r3, [r7, #7]
	wait_resp("ok\r\n");
 80005f2:	4812      	ldr	r0, [pc, #72]	; (800063c <a6_set_sms_format_to_text+0x54>)
 80005f4:	f000 fa8c 	bl	8000b10 <wait_resp>

	while(num_of_try)
 80005f8:	e015      	b.n	8000626 <a6_set_sms_format_to_text+0x3e>
	{
		a6_send_cmd("AT+CMGF=1\r\n");
 80005fa:	4811      	ldr	r0, [pc, #68]	; (8000640 <a6_set_sms_format_to_text+0x58>)
 80005fc:	f000 fb2a 	bl	8000c54 <a6_send_cmd>
		systick_delay_ms(3000);
 8000600:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000604:	f7ff ff82 	bl	800050c <systick_delay_ms>

		if(is_response)
 8000608:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <a6_set_sms_format_to_text+0x5c>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	2b00      	cmp	r3, #0
 8000610:	d006      	beq.n	8000620 <a6_set_sms_format_to_text+0x38>
		{
			/*Success*/
			printf("Format set successfully.....\n\r");
 8000612:	480d      	ldr	r0, [pc, #52]	; (8000648 <a6_set_sms_format_to_text+0x60>)
 8000614:	f000 ff8c 	bl	8001530 <iprintf>
			flush_buffer();
 8000618:	f000 face 	bl	8000bb8 <flush_buffer>

			return 1;
 800061c:	2301      	movs	r3, #1
 800061e:	e009      	b.n	8000634 <a6_set_sms_format_to_text+0x4c>
		}
		num_of_try--;
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	3b01      	subs	r3, #1
 8000624:	71fb      	strb	r3, [r7, #7]
	while(num_of_try)
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d1e6      	bne.n	80005fa <a6_set_sms_format_to_text+0x12>
	}

	printf("ERR : Format set  failure....\n\r");
 800062c:	4807      	ldr	r0, [pc, #28]	; (800064c <a6_set_sms_format_to_text+0x64>)
 800062e:	f000 ff7f 	bl	8001530 <iprintf>
	return 0;
 8000632:	2300      	movs	r3, #0

}
 8000634:	4618      	mov	r0, r3
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	08002468 	.word	0x08002468
 8000640:	080024e8 	.word	0x080024e8
 8000644:	200000ad 	.word	0x200000ad
 8000648:	080024f4 	.word	0x080024f4
 800064c:	08002514 	.word	0x08002514

08000650 <a6_send_sms>:


uint8_t a6_send_sms(char* message, char* phone_number)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08e      	sub	sp, #56	; 0x38
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	6039      	str	r1, [r7, #0]
	uint8_t num_of_try  = MAX_NUM_OF_TRY;
 800065a:	230a      	movs	r3, #10
 800065c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	wait_resp("ok\r\n");
 8000660:	4834      	ldr	r0, [pc, #208]	; (8000734 <a6_send_sms+0xe4>)
 8000662:	f000 fa55 	bl	8000b10 <wait_resp>

	while(num_of_try)
 8000666:	e059      	b.n	800071c <a6_send_sms+0xcc>
	{
		char SMS_AT_CMD1[] = "AT+CMGF=1\r\n";
 8000668:	4a33      	ldr	r2, [pc, #204]	; (8000738 <a6_send_sms+0xe8>)
 800066a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800066e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000670:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		char SMS_AT_CMD2[21]= "AT+CMGS=+44"; /*+44  is UK code*/
 8000674:	4a31      	ldr	r2, [pc, #196]	; (800073c <a6_send_sms+0xec>)
 8000676:	f107 0310 	add.w	r3, r7, #16
 800067a:	ca07      	ldmia	r2, {r0, r1, r2}
 800067c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000680:	f107 031c 	add.w	r3, r7, #28
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	721a      	strb	r2, [r3, #8]
		char CR[] = "\r\n";
 800068c:	4a2c      	ldr	r2, [pc, #176]	; (8000740 <a6_send_sms+0xf0>)
 800068e:	f107 030c 	add.w	r3, r7, #12
 8000692:	6812      	ldr	r2, [r2, #0]
 8000694:	4611      	mov	r1, r2
 8000696:	8019      	strh	r1, [r3, #0]
 8000698:	3302      	adds	r3, #2
 800069a:	0c12      	lsrs	r2, r2, #16
 800069c:	701a      	strb	r2, [r3, #0]


		uint8_t MSG_END[] = {26};
 800069e:	231a      	movs	r3, #26
 80006a0:	723b      	strb	r3, [r7, #8]

		strcat(SMS_AT_CMD2,phone_number);
 80006a2:	f107 0310 	add.w	r3, r7, #16
 80006a6:	6839      	ldr	r1, [r7, #0]
 80006a8:	4618      	mov	r0, r3
 80006aa:	f000 ff59 	bl	8001560 <strcat>
		strcat(SMS_AT_CMD2,CR);
 80006ae:	f107 020c 	add.w	r2, r7, #12
 80006b2:	f107 0310 	add.w	r3, r7, #16
 80006b6:	4611      	mov	r1, r2
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 ff51 	bl	8001560 <strcat>

		/*Set message format to text*/
		a6_send_cmd(SMS_AT_CMD1);
 80006be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 fac6 	bl	8000c54 <a6_send_cmd>
		systick_delay_ms(750);
 80006c8:	f240 20ee 	movw	r0, #750	; 0x2ee
 80006cc:	f7ff ff1e 	bl	800050c <systick_delay_ms>

		/*Send phone number*/
		a6_send_cmd(SMS_AT_CMD2);
 80006d0:	f107 0310 	add.w	r3, r7, #16
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 fabd 	bl	8000c54 <a6_send_cmd>
		systick_delay_ms(750);
 80006da:	f240 20ee 	movw	r0, #750	; 0x2ee
 80006de:	f7ff ff15 	bl	800050c <systick_delay_ms>

		/*Send the sms message*/
		a6_send_cmd(message);
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f000 fab6 	bl	8000c54 <a6_send_cmd>
		systick_delay_ms(750);
 80006e8:	f240 20ee 	movw	r0, #750	; 0x2ee
 80006ec:	f7ff ff0e 	bl	800050c <systick_delay_ms>

		/*Send message end*/
		a6_send_cmd((char *)MSG_END);
 80006f0:	f107 0308 	add.w	r3, r7, #8
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 faad 	bl	8000c54 <a6_send_cmd>

		if(is_response)
 80006fa:	4b12      	ldr	r3, [pc, #72]	; (8000744 <a6_send_sms+0xf4>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	2b00      	cmp	r3, #0
 8000702:	d006      	beq.n	8000712 <a6_send_sms+0xc2>
		{
		   printf("SMS sent...\n\r");
 8000704:	4810      	ldr	r0, [pc, #64]	; (8000748 <a6_send_sms+0xf8>)
 8000706:	f000 ff13 	bl	8001530 <iprintf>
		   flush_buffer();
 800070a:	f000 fa55 	bl	8000bb8 <flush_buffer>
		   return 1;
 800070e:	2301      	movs	r3, #1
 8000710:	e00c      	b.n	800072c <a6_send_sms+0xdc>
		}

		num_of_try--;
 8000712:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000716:	3b01      	subs	r3, #1
 8000718:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	while(num_of_try)
 800071c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000720:	2b00      	cmp	r3, #0
 8000722:	d1a1      	bne.n	8000668 <a6_send_sms+0x18>


	}

	printf("Unable to send SMS...\n\r");
 8000724:	4809      	ldr	r0, [pc, #36]	; (800074c <a6_send_sms+0xfc>)
 8000726:	f000 ff03 	bl	8001530 <iprintf>

	return 0;
 800072a:	2300      	movs	r3, #0


}
 800072c:	4618      	mov	r0, r3
 800072e:	3738      	adds	r7, #56	; 0x38
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	08002468 	.word	0x08002468
 8000738:	080024e8 	.word	0x080024e8
 800073c:	0800255c 	.word	0x0800255c
 8000740:	080024e4 	.word	0x080024e4
 8000744:	200000ad 	.word	0x200000ad
 8000748:	08002534 	.word	0x08002534
 800074c:	08002544 	.word	0x08002544

08000750 <a6_delete_all_sms>:


 uint8_t a6_delete_all_sms(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
	uint8_t num_of_try  = MAX_NUM_OF_TRY;
 8000756:	230a      	movs	r3, #10
 8000758:	71fb      	strb	r3, [r7, #7]
	wait_resp("ok\r\n");
 800075a:	4812      	ldr	r0, [pc, #72]	; (80007a4 <a6_delete_all_sms+0x54>)
 800075c:	f000 f9d8 	bl	8000b10 <wait_resp>

	while(num_of_try)
 8000760:	e015      	b.n	800078e <a6_delete_all_sms+0x3e>
	{
		a6_send_cmd("AT+CMGD=1,4\r\n");
 8000762:	4811      	ldr	r0, [pc, #68]	; (80007a8 <a6_delete_all_sms+0x58>)
 8000764:	f000 fa76 	bl	8000c54 <a6_send_cmd>
		systick_delay_ms(3000);
 8000768:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800076c:	f7ff fece 	bl	800050c <systick_delay_ms>

		if(is_response)
 8000770:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <a6_delete_all_sms+0x5c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	b2db      	uxtb	r3, r3
 8000776:	2b00      	cmp	r3, #0
 8000778:	d006      	beq.n	8000788 <a6_delete_all_sms+0x38>
		{
			/*Success*/
			printf("All messages deleted successfully.....\n\r");
 800077a:	480d      	ldr	r0, [pc, #52]	; (80007b0 <a6_delete_all_sms+0x60>)
 800077c:	f000 fed8 	bl	8001530 <iprintf>
			flush_buffer();
 8000780:	f000 fa1a 	bl	8000bb8 <flush_buffer>
			return 1;
 8000784:	2301      	movs	r3, #1
 8000786:	e009      	b.n	800079c <a6_delete_all_sms+0x4c>
		}
		num_of_try--;
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	3b01      	subs	r3, #1
 800078c:	71fb      	strb	r3, [r7, #7]
	while(num_of_try)
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d1e6      	bne.n	8000762 <a6_delete_all_sms+0x12>
	}

	printf("ERR : Message deletion failed....\n\r");
 8000794:	4807      	ldr	r0, [pc, #28]	; (80007b4 <a6_delete_all_sms+0x64>)
 8000796:	f000 fecb 	bl	8001530 <iprintf>
	return 0;
 800079a:	2300      	movs	r3, #0

}
 800079c:	4618      	mov	r0, r3
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	08002468 	.word	0x08002468
 80007a8:	08002574 	.word	0x08002574
 80007ac:	200000ad 	.word	0x200000ad
 80007b0:	08002584 	.word	0x08002584
 80007b4:	080025b0 	.word	0x080025b0

080007b8 <a6_startup_test>:


static uint8_t a6_startup_test(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
	uint8_t num_of_try  = MAX_NUM_OF_TRY;
 80007be:	230a      	movs	r3, #10
 80007c0:	71fb      	strb	r3, [r7, #7]
	wait_resp("ok\r\n");
 80007c2:	4812      	ldr	r0, [pc, #72]	; (800080c <a6_startup_test+0x54>)
 80007c4:	f000 f9a4 	bl	8000b10 <wait_resp>

	while(num_of_try)
 80007c8:	e015      	b.n	80007f6 <a6_startup_test+0x3e>
	{
		a6_send_cmd("AT+COPN=?\r\n");
 80007ca:	4811      	ldr	r0, [pc, #68]	; (8000810 <a6_startup_test+0x58>)
 80007cc:	f000 fa42 	bl	8000c54 <a6_send_cmd>
		systick_delay_ms(3000);
 80007d0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80007d4:	f7ff fe9a 	bl	800050c <systick_delay_ms>

		if(is_response)
 80007d8:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <a6_startup_test+0x5c>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d006      	beq.n	80007f0 <a6_startup_test+0x38>
		{
			/*Success*/
			printf("Test was successful.....\n\r");
 80007e2:	480d      	ldr	r0, [pc, #52]	; (8000818 <a6_startup_test+0x60>)
 80007e4:	f000 fea4 	bl	8001530 <iprintf>
			flush_buffer();
 80007e8:	f000 f9e6 	bl	8000bb8 <flush_buffer>
			return 1;
 80007ec:	2301      	movs	r3, #1
 80007ee:	e009      	b.n	8000804 <a6_startup_test+0x4c>
		}
		num_of_try--;
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	3b01      	subs	r3, #1
 80007f4:	71fb      	strb	r3, [r7, #7]
	while(num_of_try)
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d1e6      	bne.n	80007ca <a6_startup_test+0x12>
	}

	printf("ERR : Test failure....\n\r");
 80007fc:	4807      	ldr	r0, [pc, #28]	; (800081c <a6_startup_test+0x64>)
 80007fe:	f000 fe97 	bl	8001530 <iprintf>
	return 0;
 8000802:	2300      	movs	r3, #0

}
 8000804:	4618      	mov	r0, r3
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	08002468 	.word	0x08002468
 8000810:	080025d4 	.word	0x080025d4
 8000814:	200000ad 	.word	0x200000ad
 8000818:	080025e0 	.word	0x080025e0
 800081c:	080025fc 	.word	0x080025fc

08000820 <a6_signal_quality>:

static uint8_t a6_signal_quality(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
	uint8_t num_of_try  = MAX_NUM_OF_TRY;
 8000826:	230a      	movs	r3, #10
 8000828:	71fb      	strb	r3, [r7, #7]
	wait_resp("ok\r\n");
 800082a:	4812      	ldr	r0, [pc, #72]	; (8000874 <a6_signal_quality+0x54>)
 800082c:	f000 f970 	bl	8000b10 <wait_resp>

	while(num_of_try)
 8000830:	e015      	b.n	800085e <a6_signal_quality+0x3e>
	{
		a6_send_cmd("AT+CSQ=?\r\n");
 8000832:	4811      	ldr	r0, [pc, #68]	; (8000878 <a6_signal_quality+0x58>)
 8000834:	f000 fa0e 	bl	8000c54 <a6_send_cmd>
		systick_delay_ms(3000);
 8000838:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800083c:	f7ff fe66 	bl	800050c <systick_delay_ms>

		if(is_response)
 8000840:	4b0e      	ldr	r3, [pc, #56]	; (800087c <a6_signal_quality+0x5c>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	b2db      	uxtb	r3, r3
 8000846:	2b00      	cmp	r3, #0
 8000848:	d006      	beq.n	8000858 <a6_signal_quality+0x38>
		{
			/*Success*/
			printf("Signal check successful.....\n\r");
 800084a:	480d      	ldr	r0, [pc, #52]	; (8000880 <a6_signal_quality+0x60>)
 800084c:	f000 fe70 	bl	8001530 <iprintf>
			flush_buffer();
 8000850:	f000 f9b2 	bl	8000bb8 <flush_buffer>
			return 1;
 8000854:	2301      	movs	r3, #1
 8000856:	e009      	b.n	800086c <a6_signal_quality+0x4c>
		}
		num_of_try--;
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	3b01      	subs	r3, #1
 800085c:	71fb      	strb	r3, [r7, #7]
	while(num_of_try)
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d1e6      	bne.n	8000832 <a6_signal_quality+0x12>
	}

	printf("ERR : Signal check failure....\n\r");
 8000864:	4807      	ldr	r0, [pc, #28]	; (8000884 <a6_signal_quality+0x64>)
 8000866:	f000 fe63 	bl	8001530 <iprintf>
	return 0;
 800086a:	2300      	movs	r3, #0

}
 800086c:	4618      	mov	r0, r3
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	08002468 	.word	0x08002468
 8000878:	08002618 	.word	0x08002618
 800087c:	200000ad 	.word	0x200000ad
 8000880:	08002624 	.word	0x08002624
 8000884:	08002644 	.word	0x08002644

08000888 <a6_is_sms>:


uint8_t a6_is_sms(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
	char* ptr = NULL;
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]

	ptr =  strstr(temp_buffer,"MESSAGE");
 8000892:	4907      	ldr	r1, [pc, #28]	; (80008b0 <a6_is_sms+0x28>)
 8000894:	4807      	ldr	r0, [pc, #28]	; (80008b4 <a6_is_sms+0x2c>)
 8000896:	f000 fe7a 	bl	800158e <strstr>
 800089a:	6078      	str	r0, [r7, #4]

	if(ptr == NULL)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d101      	bne.n	80008a6 <a6_is_sms+0x1e>
	{
		/*No message*/
		return 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	e000      	b.n	80008a8 <a6_is_sms+0x20>
	}
	else
	{
		return 1;
 80008a6:	2301      	movs	r3, #1
	}

}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	08002668 	.word	0x08002668
 80008b4:	20000604 	.word	0x20000604

080008b8 <get_raw_sms>:


void get_raw_sms(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0

	char* ptr = NULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	603b      	str	r3, [r7, #0]

	ptr =  strstr(temp_buffer,"+CMT");
 80008c2:	490f      	ldr	r1, [pc, #60]	; (8000900 <get_raw_sms+0x48>)
 80008c4:	480f      	ldr	r0, [pc, #60]	; (8000904 <get_raw_sms+0x4c>)
 80008c6:	f000 fe62 	bl	800158e <strstr>
 80008ca:	6038      	str	r0, [r7, #0]

	if(NULL != ptr)
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d011      	beq.n	80008f6 <get_raw_sms+0x3e>
	{
	   for( int j = 0 ; j < RAW_SMS_LEN ; j++)
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	e00b      	b.n	80008f0 <get_raw_sms+0x38>
	   {
		   raw_msg[j] = ptr[j];
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	683a      	ldr	r2, [r7, #0]
 80008dc:	4413      	add	r3, r2
 80008de:	7819      	ldrb	r1, [r3, #0]
 80008e0:	4a09      	ldr	r2, [pc, #36]	; (8000908 <get_raw_sms+0x50>)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4413      	add	r3, r2
 80008e6:	460a      	mov	r2, r1
 80008e8:	701a      	strb	r2, [r3, #0]
	   for( int j = 0 ; j < RAW_SMS_LEN ; j++)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	3301      	adds	r3, #1
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2bc7      	cmp	r3, #199	; 0xc7
 80008f4:	ddf0      	ble.n	80008d8 <get_raw_sms+0x20>
	   }
	}
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	08002670 	.word	0x08002670
 8000904:	20000604 	.word	0x20000604
 8000908:	200000c8 	.word	0x200000c8

0800090c <get_sms_msg>:

void get_sms_msg(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
	char* ptr = NULL;
 8000912:	2300      	movs	r3, #0
 8000914:	603b      	str	r3, [r7, #0]

	ptr =  strstr(raw_msg,"\"20");
 8000916:	490f      	ldr	r1, [pc, #60]	; (8000954 <get_sms_msg+0x48>)
 8000918:	480f      	ldr	r0, [pc, #60]	; (8000958 <get_sms_msg+0x4c>)
 800091a:	f000 fe38 	bl	800158e <strstr>
 800091e:	6038      	str	r0, [r7, #0]

	if( ptr !=NULL )
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d011      	beq.n	800094a <get_sms_msg+0x3e>
	{
		   for( int j = 0 ; j < SMS_MSG_LEN ; j++)
 8000926:	2300      	movs	r3, #0
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	e00b      	b.n	8000944 <get_sms_msg+0x38>
		   {
			   sms_msg[j] = ptr[j];
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	683a      	ldr	r2, [r7, #0]
 8000930:	4413      	add	r3, r2
 8000932:	7819      	ldrb	r1, [r3, #0]
 8000934:	4a09      	ldr	r2, [pc, #36]	; (800095c <get_sms_msg+0x50>)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4413      	add	r3, r2
 800093a:	460a      	mov	r2, r1
 800093c:	701a      	strb	r2, [r3, #0]
		   for( int j = 0 ; j < SMS_MSG_LEN ; j++)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	3301      	adds	r3, #1
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2b45      	cmp	r3, #69	; 0x45
 8000948:	ddf0      	ble.n	800092c <get_sms_msg+0x20>
		   }
	}

}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	08002678 	.word	0x08002678
 8000958:	200000c8 	.word	0x200000c8
 800095c:	20000190 	.word	0x20000190

08000960 <get_sender_number>:



void get_sender_number(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
	char* ptr = NULL;
 8000966:	2300      	movs	r3, #0
 8000968:	603b      	str	r3, [r7, #0]

	ptr =  strstr(raw_msg,"+44");
 800096a:	490f      	ldr	r1, [pc, #60]	; (80009a8 <get_sender_number+0x48>)
 800096c:	480f      	ldr	r0, [pc, #60]	; (80009ac <get_sender_number+0x4c>)
 800096e:	f000 fe0e 	bl	800158e <strstr>
 8000972:	6038      	str	r0, [r7, #0]

	if( ptr !=NULL )
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d011      	beq.n	800099e <get_sender_number+0x3e>
	{
		   for( int j = 0 ; j < PHONE_NUM_LEN ; j++)
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	e00b      	b.n	8000998 <get_sender_number+0x38>
		   {
			   sender_number[j] = ptr[j];
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	683a      	ldr	r2, [r7, #0]
 8000984:	4413      	add	r3, r2
 8000986:	7819      	ldrb	r1, [r3, #0]
 8000988:	4a09      	ldr	r2, [pc, #36]	; (80009b0 <get_sender_number+0x50>)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4413      	add	r3, r2
 800098e:	460a      	mov	r2, r1
 8000990:	701a      	strb	r2, [r3, #0]
		   for( int j = 0 ; j < PHONE_NUM_LEN ; j++)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	3301      	adds	r3, #1
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2b0c      	cmp	r3, #12
 800099c:	ddf0      	ble.n	8000980 <get_sender_number+0x20>
		   }
	}

}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	0800267c 	.word	0x0800267c
 80009ac:	200000c8 	.word	0x200000c8
 80009b0:	200000b8 	.word	0x200000b8

080009b4 <a6_network_reg>:

static uint8_t a6_network_reg(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
	uint8_t num_of_try  = MAX_NUM_OF_TRY;
 80009ba:	230a      	movs	r3, #10
 80009bc:	71fb      	strb	r3, [r7, #7]
	wait_resp("ok\r\n");
 80009be:	4812      	ldr	r0, [pc, #72]	; (8000a08 <a6_network_reg+0x54>)
 80009c0:	f000 f8a6 	bl	8000b10 <wait_resp>

	while(num_of_try)
 80009c4:	e015      	b.n	80009f2 <a6_network_reg+0x3e>
	{
		a6_send_cmd("AT+CREG=?\r\n");
 80009c6:	4811      	ldr	r0, [pc, #68]	; (8000a0c <a6_network_reg+0x58>)
 80009c8:	f000 f944 	bl	8000c54 <a6_send_cmd>
		systick_delay_ms(3000);
 80009cc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80009d0:	f7ff fd9c 	bl	800050c <systick_delay_ms>

		if(is_response)
 80009d4:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <a6_network_reg+0x5c>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d006      	beq.n	80009ec <a6_network_reg+0x38>
		{
			/*Success*/
			printf("Network registration status retrieved.....\n\r");
 80009de:	480d      	ldr	r0, [pc, #52]	; (8000a14 <a6_network_reg+0x60>)
 80009e0:	f000 fda6 	bl	8001530 <iprintf>
			flush_buffer();
 80009e4:	f000 f8e8 	bl	8000bb8 <flush_buffer>
			return 1;
 80009e8:	2301      	movs	r3, #1
 80009ea:	e009      	b.n	8000a00 <a6_network_reg+0x4c>
		}
		num_of_try--;
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	3b01      	subs	r3, #1
 80009f0:	71fb      	strb	r3, [r7, #7]
	while(num_of_try)
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d1e6      	bne.n	80009c6 <a6_network_reg+0x12>
	}

	printf("ERR : Registration status retrieval error....\n\r");
 80009f8:	4807      	ldr	r0, [pc, #28]	; (8000a18 <a6_network_reg+0x64>)
 80009fa:	f000 fd99 	bl	8001530 <iprintf>
	return 0;
 80009fe:	2300      	movs	r3, #0

}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	08002468 	.word	0x08002468
 8000a0c:	08002680 	.word	0x08002680
 8000a10:	200000ad 	.word	0x200000ad
 8000a14:	0800268c 	.word	0x0800268c
 8000a18:	080026bc 	.word	0x080026bc

08000a1c <a6_module_name>:

static uint8_t a6_module_name(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
	uint8_t num_of_try  = MAX_NUM_OF_TRY;
 8000a22:	230a      	movs	r3, #10
 8000a24:	71fb      	strb	r3, [r7, #7]
	wait_resp("ok\r\n");
 8000a26:	4812      	ldr	r0, [pc, #72]	; (8000a70 <a6_module_name+0x54>)
 8000a28:	f000 f872 	bl	8000b10 <wait_resp>

	while(num_of_try)
 8000a2c:	e015      	b.n	8000a5a <a6_module_name+0x3e>
	{
		a6_send_cmd("ATI\r\n");
 8000a2e:	4811      	ldr	r0, [pc, #68]	; (8000a74 <a6_module_name+0x58>)
 8000a30:	f000 f910 	bl	8000c54 <a6_send_cmd>
		systick_delay_ms(3000);
 8000a34:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000a38:	f7ff fd68 	bl	800050c <systick_delay_ms>

		if(is_response)
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <a6_module_name+0x5c>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d006      	beq.n	8000a54 <a6_module_name+0x38>
		{
			/*Success*/
			printf("Module name retrieved successfully.....\n\r");
 8000a46:	480d      	ldr	r0, [pc, #52]	; (8000a7c <a6_module_name+0x60>)
 8000a48:	f000 fd72 	bl	8001530 <iprintf>
			flush_buffer();
 8000a4c:	f000 f8b4 	bl	8000bb8 <flush_buffer>
			return 1;
 8000a50:	2301      	movs	r3, #1
 8000a52:	e009      	b.n	8000a68 <a6_module_name+0x4c>
		}
		num_of_try--;
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	3b01      	subs	r3, #1
 8000a58:	71fb      	strb	r3, [r7, #7]
	while(num_of_try)
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d1e6      	bne.n	8000a2e <a6_module_name+0x12>
	}

	printf("ERR : Module name  retrieval error....\n\r");
 8000a60:	4807      	ldr	r0, [pc, #28]	; (8000a80 <a6_module_name+0x64>)
 8000a62:	f000 fd65 	bl	8001530 <iprintf>
	return 0;
 8000a66:	2300      	movs	r3, #0

}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	08002468 	.word	0x08002468
 8000a74:	080026ec 	.word	0x080026ec
 8000a78:	200000ad 	.word	0x200000ad
 8000a7c:	080026f4 	.word	0x080026f4
 8000a80:	08002720 	.word	0x08002720

08000a84 <cpy_to_uart>:


/*Copy content of tx_fifo into debug uart*/
static void cpy_to_uart(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
	char letter;

	/*Make sure transmit data register is empty and
	 * fifo has content*/
	while((USART2->SR  & SR_TXE) && tx_fifo_size() >0)
 8000a8a:	e006      	b.n	8000a9a <cpy_to_uart+0x16>
	{
		/*Get char from fifo*/
		tx_fifo_get(&letter);
 8000a8c:	1dfb      	adds	r3, r7, #7
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f000 f940 	bl	8000d14 <tx_fifo_get>

		/*Put into uart data register*/
		USART2->DR = letter;
 8000a94:	79fa      	ldrb	r2, [r7, #7]
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <cpy_to_uart+0x34>)
 8000a98:	605a      	str	r2, [r3, #4]
	while((USART2->SR  & SR_TXE) && tx_fifo_size() >0)
 8000a9a:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <cpy_to_uart+0x34>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d004      	beq.n	8000ab0 <cpy_to_uart+0x2c>
 8000aa6:	f000 f95b 	bl	8000d60 <tx_fifo_size>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d1ed      	bne.n	8000a8c <cpy_to_uart+0x8>
	}

}
 8000ab0:	bf00      	nop
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40004400 	.word	0x40004400

08000abc <uart_output_char>:

/*Output uart character*/
static void uart_output_char(char data)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	71fb      	strb	r3, [r7, #7]
     if(tx_fifo_put(data) == FIFOFAIL)
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f000 f8f7 	bl	8000cbc <tx_fifo_put>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d002      	beq.n	8000ada <uart_output_char+0x1e>
     {
    	 return;
     }

     cpy_to_uart();
 8000ad4:	f7ff ffd6 	bl	8000a84 <cpy_to_uart>
 8000ad8:	e000      	b.n	8000adc <uart_output_char+0x20>
    	 return;
 8000ada:	bf00      	nop
}
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <to_lower>:



static char to_lower(char letter)

{
 8000ae2:	b480      	push	{r7}
 8000ae4:	b083      	sub	sp, #12
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	4603      	mov	r3, r0
 8000aea:	71fb      	strb	r3, [r7, #7]
	if((letter >= 'A') && (letter <= 'Z'))
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	2b40      	cmp	r3, #64	; 0x40
 8000af0:	d906      	bls.n	8000b00 <to_lower+0x1e>
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	2b5a      	cmp	r3, #90	; 0x5a
 8000af6:	d803      	bhi.n	8000b00 <to_lower+0x1e>
	{
		letter |=0x20;
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	f043 0320 	orr.w	r3, r3, #32
 8000afe:	71fb      	strb	r3, [r7, #7]
	}

	return letter;
 8000b00:	79fb      	ldrb	r3, [r7, #7]
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
	...

08000b10 <wait_resp>:


/*Initialize the string search in the rx data stream*/

static void wait_resp(char *pt)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	strcpy(sub_str,pt);
 8000b18:	6879      	ldr	r1, [r7, #4]
 8000b1a:	4808      	ldr	r0, [pc, #32]	; (8000b3c <wait_resp+0x2c>)
 8000b1c:	f000 fd2f 	bl	800157e <strcpy>
	search_idx 	= 0;
 8000b20:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <wait_resp+0x30>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
	is_response = false;
 8000b26:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <wait_resp+0x34>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	701a      	strb	r2, [r3, #0]
	searching 	= true;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <wait_resp+0x38>)
 8000b2e:	2201      	movs	r2, #1
 8000b30:	701a      	strb	r2, [r3, #0]
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	200005e4 	.word	0x200005e4
 8000b40:	200000b0 	.word	0x200000b0
 8000b44:	200000ad 	.word	0x200000ad
 8000b48:	200000ac 	.word	0x200000ac

08000b4c <search_check>:



/*Search for string in rx data stream*/
static void search_check(char letter)
{
 8000b4c:	b590      	push	{r4, r7, lr}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	71fb      	strb	r3, [r7, #7]
	if(searching)
 8000b56:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <search_check+0x5c>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d01f      	beq.n	8000ba0 <search_check+0x54>
	{
		/*Check if characters match*/
		if(sub_str[search_idx] == to_lower(letter))
 8000b60:	4b12      	ldr	r3, [pc, #72]	; (8000bac <search_check+0x60>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a12      	ldr	r2, [pc, #72]	; (8000bb0 <search_check+0x64>)
 8000b66:	5cd4      	ldrb	r4, [r2, r3]
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff ffb9 	bl	8000ae2 <to_lower>
 8000b70:	4603      	mov	r3, r0
 8000b72:	429c      	cmp	r4, r3
 8000b74:	d111      	bne.n	8000b9a <search_check+0x4e>
		{
			search_idx++;
 8000b76:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <search_check+0x60>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	4a0b      	ldr	r2, [pc, #44]	; (8000bac <search_check+0x60>)
 8000b7e:	6013      	str	r3, [r2, #0]

			/* Check if end of string */
			if(sub_str[search_idx] == 0)
 8000b80:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <search_check+0x60>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a0a      	ldr	r2, [pc, #40]	; (8000bb0 <search_check+0x64>)
 8000b86:	5cd3      	ldrb	r3, [r2, r3]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d109      	bne.n	8000ba0 <search_check+0x54>
			{
				is_response =  true;
 8000b8c:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <search_check+0x68>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	701a      	strb	r2, [r3, #0]
				searching   =  false;
 8000b92:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <search_check+0x5c>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	701a      	strb	r2, [r3, #0]
		{
			/*Start over*/
			search_idx = 0;
		}
	}
}
 8000b98:	e002      	b.n	8000ba0 <search_check+0x54>
			search_idx = 0;
 8000b9a:	4b04      	ldr	r3, [pc, #16]	; (8000bac <search_check+0x60>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
}
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd90      	pop	{r4, r7, pc}
 8000ba8:	200000ac 	.word	0x200000ac
 8000bac:	200000b0 	.word	0x200000b0
 8000bb0:	200005e4 	.word	0x200005e4
 8000bb4:	200000ad 	.word	0x200000ad

08000bb8 <flush_buffer>:

 void flush_buffer(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
	itr = 0;
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <flush_buffer+0x38>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]

	for(int i =0 ;i <TEMP_BUFF_SIZE; i++)
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	e007      	b.n	8000bda <flush_buffer+0x22>
	{
		temp_buffer[i] = '\0';
 8000bca:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <flush_buffer+0x3c>)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4413      	add	r3, r2
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	701a      	strb	r2, [r3, #0]
	for(int i =0 ;i <TEMP_BUFF_SIZE; i++)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000be0:	dbf3      	blt.n	8000bca <flush_buffer+0x12>
	}

}
 8000be2:	bf00      	nop
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	200000b4 	.word	0x200000b4
 8000bf4:	20000604 	.word	0x20000604

08000bf8 <a6_process_data>:

static void a6_process_data(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
	char letter;

	/*Check if there is new data in data register*/
	if(USART1->SR & SR_RXNE)
 8000bfe:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <a6_process_data+0x4c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f003 0320 	and.w	r3, r3, #32
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d018      	beq.n	8000c3c <a6_process_data+0x44>
	{
		/*Store data from a6 uart data register to local variable*/
       letter  =  USART1->DR;
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <a6_process_data+0x4c>)
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	71fb      	strb	r3, [r7, #7]
       temp_buffer[itr++] = letter;
 8000c10:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <a6_process_data+0x50>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	1c5a      	adds	r2, r3, #1
 8000c16:	490c      	ldr	r1, [pc, #48]	; (8000c48 <a6_process_data+0x50>)
 8000c18:	600a      	str	r2, [r1, #0]
 8000c1a:	490c      	ldr	r1, [pc, #48]	; (8000c4c <a6_process_data+0x54>)
 8000c1c:	79fa      	ldrb	r2, [r7, #7]
 8000c1e:	54ca      	strb	r2, [r1, r3]

       /*Print data from a6 uart data register to debug uart, meaning, your computer */
       uart_output_char(letter);
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff ff4a 	bl	8000abc <uart_output_char>


       /*Check for response*/
       search_check(letter);
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff ff8e 	bl	8000b4c <search_check>

       /*Check if SMS*/
       SMS_NOTIF = a6_is_sms();
 8000c30:	f7ff fe2a 	bl	8000888 <a6_is_sms>
 8000c34:	4603      	mov	r3, r0
 8000c36:	461a      	mov	r2, r3
 8000c38:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <a6_process_data+0x58>)
 8000c3a:	701a      	strb	r2, [r3, #0]
	}

}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40011000 	.word	0x40011000
 8000c48:	200000b4 	.word	0x200000b4
 8000c4c:	20000604 	.word	0x20000604
 8000c50:	200001d6 	.word	0x200001d6

08000c54 <a6_send_cmd>:


/*Send command to a6*/
static void a6_send_cmd(const char * cmd)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
	int index = 0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]

	while(cmd[index] != 0)
 8000c60:	e009      	b.n	8000c76 <a6_send_cmd+0x22>
	{
		a6_uart_write_char(cmd[index++]);
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	1c5a      	adds	r2, r3, #1
 8000c66:	60fa      	str	r2, [r7, #12]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff fc07 	bl	8000484 <a6_uart_write_char>
	while(cmd[index] != 0)
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d1ef      	bne.n	8000c62 <a6_send_cmd+0xe>
	}
}
 8000c82:	bf00      	nop
 8000c84:	bf00      	nop
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0

	a6_process_data();
 8000c90:	f7ff ffb2 	bl	8000bf8 <a6_process_data>
}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <tx_fifo_init>:


/*Initialize tx fifo*/

void tx_fifo_init(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
	tx_put_itr = 0;
 8000c9c:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <tx_fifo_init+0x1c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
	tx_get_itr = 0;
 8000ca2:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <tx_fifo_init+0x20>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	2000073c 	.word	0x2000073c
 8000cb8:	20000738 	.word	0x20000738

08000cbc <tx_fifo_put>:

/*Put data into tx fifo*/

uint8_t tx_fifo_put(tx_dataType data)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]

	/*Check if fifo is full*/
	if((tx_put_itr - tx_get_itr) & ~(TXFIFOSIZE -1))
 8000cc6:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <tx_fifo_put+0x4c>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <tx_fifo_put+0x50>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	1ad3      	subs	r3, r2, r3
 8000cd0:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000cd4:	f023 0303 	bic.w	r3, r3, #3
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <tx_fifo_put+0x24>
	{
		/*fifo is full*/
		return (TXFAIL);
 8000cdc:	2300      	movs	r3, #0
 8000cde:	e00c      	b.n	8000cfa <tx_fifo_put+0x3e>
	}
	/*Put data into fifo*/
	TX_FIFO[tx_put_itr & (TXFIFOSIZE-1)] =  data;
 8000ce0:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <tx_fifo_put+0x4c>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ce8:	4909      	ldr	r1, [pc, #36]	; (8000d10 <tx_fifo_put+0x54>)
 8000cea:	79fa      	ldrb	r2, [r7, #7]
 8000cec:	54ca      	strb	r2, [r1, r3]

	/*Increment itr*/
	tx_put_itr++;
 8000cee:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <tx_fifo_put+0x4c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	4a04      	ldr	r2, [pc, #16]	; (8000d08 <tx_fifo_put+0x4c>)
 8000cf6:	6013      	str	r3, [r2, #0]

	return(TXSUCCESS);
 8000cf8:	2301      	movs	r3, #1
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	2000073c 	.word	0x2000073c
 8000d0c:	20000738 	.word	0x20000738
 8000d10:	200001d8 	.word	0x200001d8

08000d14 <tx_fifo_get>:

uint8_t tx_fifo_get(tx_dataType *pdata)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
   /*Check if fifo is empty*/
	if(tx_put_itr == tx_get_itr)
 8000d1c:	4b0d      	ldr	r3, [pc, #52]	; (8000d54 <tx_fifo_get+0x40>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	4b0d      	ldr	r3, [pc, #52]	; (8000d58 <tx_fifo_get+0x44>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d101      	bne.n	8000d2c <tx_fifo_get+0x18>
	{
		/*fifo empty*/
		return (TXFAIL);
 8000d28:	2300      	movs	r3, #0
 8000d2a:	e00d      	b.n	8000d48 <tx_fifo_get+0x34>
	}

	/*Get the data*/
	*pdata =  TX_FIFO[tx_get_itr & (TXFIFOSIZE - 1)];
 8000d2c:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <tx_fifo_get+0x44>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d34:	4a09      	ldr	r2, [pc, #36]	; (8000d5c <tx_fifo_get+0x48>)
 8000d36:	5cd2      	ldrb	r2, [r2, r3]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	701a      	strb	r2, [r3, #0]

	/*Increment the itr*/
	tx_get_itr++;
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <tx_fifo_get+0x44>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	3301      	adds	r3, #1
 8000d42:	4a05      	ldr	r2, [pc, #20]	; (8000d58 <tx_fifo_get+0x44>)
 8000d44:	6013      	str	r3, [r2, #0]

	return (TXSUCCESS);
 8000d46:	2301      	movs	r3, #1
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	2000073c 	.word	0x2000073c
 8000d58:	20000738 	.word	0x20000738
 8000d5c:	200001d8 	.word	0x200001d8

08000d60 <tx_fifo_size>:


uint32_t tx_fifo_size(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
	return (uint32_t)(tx_put_itr -  tx_get_itr);
 8000d64:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <tx_fifo_size+0x18>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <tx_fifo_size+0x1c>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	1ad3      	subs	r3, r2, r3
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	2000073c 	.word	0x2000073c
 8000d7c:	20000738 	.word	0x20000738

08000d80 <rx_fifo_init>:


/*Initialize rx fifo*/

void rx_fifo_init(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
	rx_put_itr = 0;
 8000d84:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <rx_fifo_init+0x1c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
	rx_get_itr = 0;
 8000d8a:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <rx_fifo_init+0x20>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	20000730 	.word	0x20000730
 8000da0:	20000734 	.word	0x20000734

08000da4 <light_init>:
#define CR2_SWSTART (1U<<30)
#define SR_EOC		(1U<<1)


void light_init(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |=GPIOAEN;
 8000da8:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <light_init+0x34>)
 8000daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dac:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <light_init+0x34>)
 8000dae:	f043 0301 	orr.w	r3, r3, #1
 8000db2:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA5 as output*/
	GPIOA->MODER |=(1U<<10);
 8000db4:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <light_init+0x38>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a08      	ldr	r2, [pc, #32]	; (8000ddc <light_init+0x38>)
 8000dba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dbe:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<11);
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <light_init+0x38>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a05      	ldr	r2, [pc, #20]	; (8000ddc <light_init+0x38>)
 8000dc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000dca:	6013      	str	r3, [r2, #0]
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40020000 	.word	0x40020000

08000de0 <light_on>:



void light_on(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
	/*Set PA5 output to high*/
	GPIOA->ODR |=(1U<<5);
 8000de4:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <light_on+0x1c>)
 8000de6:	695b      	ldr	r3, [r3, #20]
 8000de8:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <light_on+0x1c>)
 8000dea:	f043 0320 	orr.w	r3, r3, #32
 8000dee:	6153      	str	r3, [r2, #20]
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	40020000 	.word	0x40020000

08000e00 <light_off>:


void light_off(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
	/*Set PA5 output to low*/
	GPIOA->ODR &=~(1U<<5);
 8000e04:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <light_off+0x1c>)
 8000e06:	695b      	ldr	r3, [r3, #20]
 8000e08:	4a04      	ldr	r2, [pc, #16]	; (8000e1c <light_off+0x1c>)
 8000e0a:	f023 0320 	bic.w	r3, r3, #32
 8000e0e:	6153      	str	r3, [r2, #20]
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	40020000 	.word	0x40020000

08000e20 <main>:

extern char sms_msg[SMS_MSG_LEN];
static void process_cmd(void);
extern uint8_t SMS_NOTIF;
int main()
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0

	debug_uart_init();
 8000e26:	f7ff fa37 	bl	8000298 <debug_uart_init>
	a6_uart_init();
 8000e2a:	f7ff faad 	bl	8000388 <a6_uart_init>
	light_init();
 8000e2e:	f7ff ffb9 	bl	8000da4 <light_init>
	rtc_init();
 8000e32:	f000 f8a1 	bl	8000f78 <rtc_init>
	rtc_alarm_init();
 8000e36:	f000 f8f9 	bl	800102c <rtc_alarm_init>
	a6_module_init();
 8000e3a:	f7ff fbaf 	bl	800059c <a6_module_init>

	a6_set_sms_format_to_text();
 8000e3e:	f7ff fbd3 	bl	80005e8 <a6_set_sms_format_to_text>

	/*Delete all received messages*/
	a6_delete_all_sms();
 8000e42:	f7ff fc85 	bl	8000750 <a6_delete_all_sms>

	a6_send_sms(sms_message,receiver_number);
 8000e46:	4913      	ldr	r1, [pc, #76]	; (8000e94 <main+0x74>)
 8000e48:	4813      	ldr	r0, [pc, #76]	; (8000e98 <main+0x78>)
 8000e4a:	f7ff fc01 	bl	8000650 <a6_send_sms>

	while(1)
	{

		for(int i = 0 ; i<10; i++)
 8000e4e:	2300      	movs	r3, #0
 8000e50:	607b      	str	r3, [r7, #4]
 8000e52:	e00b      	b.n	8000e6c <main+0x4c>
		{
			SMS_NOTIF = a6_is_sms();
 8000e54:	f7ff fd18 	bl	8000888 <a6_is_sms>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <main+0x7c>)
 8000e5e:	701a      	strb	r2, [r3, #0]
			systick_delay_ms(1);
 8000e60:	2001      	movs	r0, #1
 8000e62:	f7ff fb53 	bl	800050c <systick_delay_ms>
		for(int i = 0 ; i<10; i++)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2b09      	cmp	r3, #9
 8000e70:	ddf0      	ble.n	8000e54 <main+0x34>
		}

		if(SMS_NOTIF)
 8000e72:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <main+0x7c>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d0e9      	beq.n	8000e4e <main+0x2e>
         {
        	 get_raw_sms();
 8000e7a:	f7ff fd1d 	bl	80008b8 <get_raw_sms>
        	 get_sms_msg();
 8000e7e:	f7ff fd45 	bl	800090c <get_sms_msg>
        	 get_sender_number();
 8000e82:	f7ff fd6d 	bl	8000960 <get_sender_number>

        	 /*Process command*/
        	 process_cmd();
 8000e86:	f000 f80b 	bl	8000ea0 <process_cmd>

        	 SMS_NOTIF = 0;
 8000e8a:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <main+0x7c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	701a      	strb	r2, [r3, #0]
		for(int i = 0 ; i<10; i++)
 8000e90:	e7dd      	b.n	8000e4e <main+0x2e>
 8000e92:	bf00      	nop
 8000e94:	20000000 	.word	0x20000000
 8000e98:	2000000c 	.word	0x2000000c
 8000e9c:	200001d6 	.word	0x200001d6

08000ea0 <process_cmd>:

}


static void process_cmd(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
	char * ptr1 =  strstr(sms_msg,"LEDON");
 8000ea6:	490e      	ldr	r1, [pc, #56]	; (8000ee0 <process_cmd+0x40>)
 8000ea8:	480e      	ldr	r0, [pc, #56]	; (8000ee4 <process_cmd+0x44>)
 8000eaa:	f000 fb70 	bl	800158e <strstr>
 8000eae:	6078      	str	r0, [r7, #4]
	if(ptr1 != NULL)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d003      	beq.n	8000ebe <process_cmd+0x1e>
	{
		light_on();
 8000eb6:	f7ff ff93 	bl	8000de0 <light_on>
		flush_buffer();
 8000eba:	f7ff fe7d 	bl	8000bb8 <flush_buffer>
	}

	char * ptr2 =  strstr(sms_msg,"LEDOFF");
 8000ebe:	490a      	ldr	r1, [pc, #40]	; (8000ee8 <process_cmd+0x48>)
 8000ec0:	4808      	ldr	r0, [pc, #32]	; (8000ee4 <process_cmd+0x44>)
 8000ec2:	f000 fb64 	bl	800158e <strstr>
 8000ec6:	6038      	str	r0, [r7, #0]
	if(ptr2 != NULL)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d003      	beq.n	8000ed6 <process_cmd+0x36>
	{
		light_off();
 8000ece:	f7ff ff97 	bl	8000e00 <light_off>
		flush_buffer();
 8000ed2:	f7ff fe71 	bl	8000bb8 <flush_buffer>
	}


}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	0800274c 	.word	0x0800274c
 8000ee4:	20000190 	.word	0x20000190
 8000ee8:	08002754 	.word	0x08002754

08000eec <alarm_callback>:

}


void alarm_callback(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0

}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
	...

08000efc <RTC_Alarm_IRQHandler>:

void RTC_Alarm_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	/*Get the alarm interrupt source enable status*/
	if((RTC->CR & CR_ALRAIE) != 0)
 8000f00:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <RTC_Alarm_IRQHandler+0x38>)
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d00d      	beq.n	8000f28 <RTC_Alarm_IRQHandler+0x2c>
	{
		/*Get the pending status of the Alarm interrupt*/
		if((RTC->ISR & ISR_ALRAF) != 0)
 8000f0c:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <RTC_Alarm_IRQHandler+0x38>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d007      	beq.n	8000f28 <RTC_Alarm_IRQHandler+0x2c>
		{
			/*Do something...*/
			alarm_callback();
 8000f18:	f7ff ffe8 	bl	8000eec <alarm_callback>

			/*Clear the alarm interrupt pending bit*/
			RTC->ISR &=~(ISR_INIT);
 8000f1c:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <RTC_Alarm_IRQHandler+0x38>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	4a04      	ldr	r2, [pc, #16]	; (8000f34 <RTC_Alarm_IRQHandler+0x38>)
 8000f22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000f26:	60d3      	str	r3, [r2, #12]
		}
	}

	/*Clear the EXTI's flag for RTC alarm*/
	EXTI->PR = (1U<<17);
 8000f28:	4b03      	ldr	r3, [pc, #12]	; (8000f38 <RTC_Alarm_IRQHandler+0x3c>)
 8000f2a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f2e:	615a      	str	r2, [r3, #20]
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40002800 	.word	0x40002800
 8000f38:	40013c00 	.word	0x40013c00

08000f3c <__NVIC_EnableIRQ>:
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	db0b      	blt.n	8000f66 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	f003 021f 	and.w	r2, r3, #31
 8000f54:	4907      	ldr	r1, [pc, #28]	; (8000f74 <__NVIC_EnableIRQ+0x38>)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	095b      	lsrs	r3, r3, #5
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000e100 	.word	0xe000e100

08000f78 <rtc_init>:
static void rtc_time_config(uint32_t Format12_24, uint32_t Hours, uint32_t Minutes, uint32_t Seconds);
static void rtc_alma_config_time(uint32_t Format12_24, uint32_t Hours, uint32_t Minutes, uint32_t Seconds);
static void rtc_alma_set_mask(uint32_t Mask);

void rtc_init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
	/*Enable clock access to PWR*/
	RCC->APB1ENR |= PWREN;
 8000f7c:	4b28      	ldr	r3, [pc, #160]	; (8001020 <rtc_init+0xa8>)
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f80:	4a27      	ldr	r2, [pc, #156]	; (8001020 <rtc_init+0xa8>)
 8000f82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f86:	6413      	str	r3, [r2, #64]	; 0x40

	/*Enable Backup access to config rtc*/
	PWR->CR |= CR_DBP;
 8000f88:	4b26      	ldr	r3, [pc, #152]	; (8001024 <rtc_init+0xac>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a25      	ldr	r2, [pc, #148]	; (8001024 <rtc_init+0xac>)
 8000f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f92:	6013      	str	r3, [r2, #0]

	/*Enable Low Speed Internal (LSI) clock*/
	RCC->CSR |=CSR_LSION;
 8000f94:	4b22      	ldr	r3, [pc, #136]	; (8001020 <rtc_init+0xa8>)
 8000f96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f98:	4a21      	ldr	r2, [pc, #132]	; (8001020 <rtc_init+0xa8>)
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	6753      	str	r3, [r2, #116]	; 0x74

	/*Wait for LSI to be enabled*/
	while((RCC->CSR & CSR_LSIRDY) != CSR_LSIRDY){}
 8000fa0:	bf00      	nop
 8000fa2:	4b1f      	ldr	r3, [pc, #124]	; (8001020 <rtc_init+0xa8>)
 8000fa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d1f9      	bne.n	8000fa2 <rtc_init+0x2a>

	/*Force backup domain to reset*/
	RCC->BDCR |=BDCR_BDRST;
 8000fae:	4b1c      	ldr	r3, [pc, #112]	; (8001020 <rtc_init+0xa8>)
 8000fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fb2:	4a1b      	ldr	r2, [pc, #108]	; (8001020 <rtc_init+0xa8>)
 8000fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fb8:	6713      	str	r3, [r2, #112]	; 0x70

	/*Release backup domain reset*/
	RCC->BDCR &=~BDCR_BDRST;
 8000fba:	4b19      	ldr	r3, [pc, #100]	; (8001020 <rtc_init+0xa8>)
 8000fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fbe:	4a18      	ldr	r2, [pc, #96]	; (8001020 <rtc_init+0xa8>)
 8000fc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fc4:	6713      	str	r3, [r2, #112]	; 0x70

	/*Set RTC clock source to LSI*/
	RCC->BDCR &=~(1U<<8);
 8000fc6:	4b16      	ldr	r3, [pc, #88]	; (8001020 <rtc_init+0xa8>)
 8000fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fca:	4a15      	ldr	r2, [pc, #84]	; (8001020 <rtc_init+0xa8>)
 8000fcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fd0:	6713      	str	r3, [r2, #112]	; 0x70
	RCC->BDCR |=(1U<<9);
 8000fd2:	4b13      	ldr	r3, [pc, #76]	; (8001020 <rtc_init+0xa8>)
 8000fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fd6:	4a12      	ldr	r2, [pc, #72]	; (8001020 <rtc_init+0xa8>)
 8000fd8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fdc:	6713      	str	r3, [r2, #112]	; 0x70

	/*Enable RTC*/
	RCC->BDCR |= RTCEN;
 8000fde:	4b10      	ldr	r3, [pc, #64]	; (8001020 <rtc_init+0xa8>)
 8000fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fe2:	4a0f      	ldr	r2, [pc, #60]	; (8001020 <rtc_init+0xa8>)
 8000fe4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fe8:	6713      	str	r3, [r2, #112]	; 0x70

	/*Disable RTC registers write protection*/
	RTC->WPR = RTC_WRITE_PROTECTION_ENABLE_1;
 8000fea:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <rtc_init+0xb0>)
 8000fec:	22ca      	movs	r2, #202	; 0xca
 8000fee:	625a      	str	r2, [r3, #36]	; 0x24
	RTC->WPR = RTC_WRITE_PROTECTION_ENABLE_2;
 8000ff0:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <rtc_init+0xb0>)
 8000ff2:	2253      	movs	r2, #83	; 0x53
 8000ff4:	625a      	str	r2, [r3, #36]	; 0x24


	/*Enter initialization*/
	if(rtc_init_seq() != 1)
 8000ff6:	f000 f947 	bl	8001288 <rtc_init_seq>
	{
		/*Initialization error*/
	}

	/*Set hour format to AM/PM*/
	RTC->CR |= CR_FMT;
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <rtc_init+0xb0>)
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	4a0a      	ldr	r2, [pc, #40]	; (8001028 <rtc_init+0xb0>)
 8001000:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001004:	6093      	str	r3, [r2, #8]

	/*Set Asynch prescaler*/
	rtc_set_async_prescaler(RTC_ASYNCH_PREDIV);
 8001006:	207f      	movs	r0, #127	; 0x7f
 8001008:	f000 f8f2 	bl	80011f0 <rtc_set_async_prescaler>

	/*Set Synch prescaler*/
	rtc_set_synch_prescaler(RTC_SYNCH_PREDIV);
 800100c:	20f9      	movs	r0, #249	; 0xf9
 800100e:	f000 f905 	bl	800121c <rtc_set_synch_prescaler>

	/*Exit intialization mode*/
	exit_init_seq();
 8001012:	f000 f984 	bl	800131e <exit_init_seq>

	/*Enable RTC registers write protection*/
	RTC->WPR = 0xFF;
 8001016:	4b04      	ldr	r3, [pc, #16]	; (8001028 <rtc_init+0xb0>)
 8001018:	22ff      	movs	r2, #255	; 0xff
 800101a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40023800 	.word	0x40023800
 8001024:	40007000 	.word	0x40007000
 8001028:	40002800 	.word	0x40002800

0800102c <rtc_alarm_init>:

void rtc_alarm_init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
	/*Disable RTC registers write protection*/
	RTC->WPR = RTC_WRITE_PROTECTION_ENABLE_1;
 8001030:	4b29      	ldr	r3, [pc, #164]	; (80010d8 <rtc_alarm_init+0xac>)
 8001032:	22ca      	movs	r2, #202	; 0xca
 8001034:	625a      	str	r2, [r3, #36]	; 0x24
	RTC->WPR = RTC_WRITE_PROTECTION_ENABLE_2;
 8001036:	4b28      	ldr	r3, [pc, #160]	; (80010d8 <rtc_alarm_init+0xac>)
 8001038:	2253      	movs	r2, #83	; 0x53
 800103a:	625a      	str	r2, [r3, #36]	; 0x24

	/*Enter initialization*/
	if(rtc_init_seq() != 1)
 800103c:	f000 f924 	bl	8001288 <rtc_init_seq>
	{
		/*Initialization error*/
	}

    /*Set date : Friday 14th, January 2022*/
	rtc_date_config(WEEKDAY_FRIDAY,0x14,MONTH_JANUARY,0x22);
 8001040:	2322      	movs	r3, #34	; 0x22
 8001042:	2201      	movs	r2, #1
 8001044:	2114      	movs	r1, #20
 8001046:	2005      	movs	r0, #5
 8001048:	f000 f85e 	bl	8001108 <rtc_date_config>

	/*Set time : 07:04: 00 PM*/
	rtc_time_config(TIME_FORMAT_PM,0x07,0x04,0x00);
 800104c:	2300      	movs	r3, #0
 800104e:	2204      	movs	r2, #4
 8001050:	2107      	movs	r1, #7
 8001052:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001056:	f000 f87f 	bl	8001158 <rtc_time_config>

	/*Set alarm :  07:04:10*/

	/*RTC Alarm Generation: Alarm on Hours, Minutes and Seconds*/
	rtc_alma_config_time(TIME_FORMAT_PM,0x07,0x04,0x10);
 800105a:	2310      	movs	r3, #16
 800105c:	2204      	movs	r2, #4
 800105e:	2107      	movs	r1, #7
 8001060:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001064:	f000 f89e 	bl	80011a4 <rtc_alma_config_time>

    /*Ignore weekday*/
	rtc_alma_set_mask(ALMA_MASK_DATEWEEKDAY);
 8001068:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800106c:	f000 f838 	bl	80010e0 <rtc_alma_set_mask>

	/*Enable alarm*/
	RTC->CR |=CR_ALRAE;
 8001070:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <rtc_alarm_init+0xac>)
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	4a18      	ldr	r2, [pc, #96]	; (80010d8 <rtc_alarm_init+0xac>)
 8001076:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800107a:	6093      	str	r3, [r2, #8]

	/*Enable IT Alarm*/
	RTC->CR |= CR_ALRAIE;
 800107c:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <rtc_alarm_init+0xac>)
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	4a15      	ldr	r2, [pc, #84]	; (80010d8 <rtc_alarm_init+0xac>)
 8001082:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001086:	6093      	str	r3, [r2, #8]

	/*Clear the alarm interrupt pending bit*/
	RTC->ISR &=~ISR_ALRAF;
 8001088:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <rtc_alarm_init+0xac>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	4a12      	ldr	r2, [pc, #72]	; (80010d8 <rtc_alarm_init+0xac>)
 800108e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001092:	60d3      	str	r3, [r2, #12]


	/*Enable IT alarm*/
	EXTI->IMR |=(1U<<17);
 8001094:	4b11      	ldr	r3, [pc, #68]	; (80010dc <rtc_alarm_init+0xb0>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a10      	ldr	r2, [pc, #64]	; (80010dc <rtc_alarm_init+0xb0>)
 800109a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800109e:	6013      	str	r3, [r2, #0]
	EXTI->RTSR |=(1U<<17);
 80010a0:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <rtc_alarm_init+0xb0>)
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	4a0d      	ldr	r2, [pc, #52]	; (80010dc <rtc_alarm_init+0xb0>)
 80010a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010aa:	6093      	str	r3, [r2, #8]

	/*Configure RTC alarm interrupt*/

	/*Enable rtc alarm interrupt in NVIC*/
	NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80010ac:	2029      	movs	r0, #41	; 0x29
 80010ae:	f7ff ff45 	bl	8000f3c <__NVIC_EnableIRQ>


	/*Exit intialization mode*/
	RTC->ISR &=~ISR_INIT;
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <rtc_alarm_init+0xac>)
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	4a08      	ldr	r2, [pc, #32]	; (80010d8 <rtc_alarm_init+0xac>)
 80010b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80010bc:	60d3      	str	r3, [r2, #12]

	/*Clear RSF flag*/
	RTC->ISR &=~ISR_RSF;
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <rtc_alarm_init+0xac>)
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	4a05      	ldr	r2, [pc, #20]	; (80010d8 <rtc_alarm_init+0xac>)
 80010c4:	f023 0320 	bic.w	r3, r3, #32
 80010c8:	60d3      	str	r3, [r2, #12]

	if(	exit_init_seq() != 1)
 80010ca:	f000 f928 	bl	800131e <exit_init_seq>
	{
		//process error
	}
	/*Enable RTC registers write protection*/
	RTC->WPR = 0xFF;
 80010ce:	4b02      	ldr	r3, [pc, #8]	; (80010d8 <rtc_alarm_init+0xac>)
 80010d0:	22ff      	movs	r2, #255	; 0xff
 80010d2:	625a      	str	r2, [r3, #36]	; 0x24


}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40002800 	.word	0x40002800
 80010dc:	40013c00 	.word	0x40013c00

080010e0 <rtc_alma_set_mask>:


static void rtc_alma_set_mask(uint32_t Mask)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RTC->ALRMAR, RTC_ALRMAR_MSK4 | RTC_ALRMAR_MSK3 | RTC_ALRMAR_MSK2 | RTC_ALRMAR_MSK1, Mask);
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <rtc_alma_set_mask+0x24>)
 80010ea:	69db      	ldr	r3, [r3, #28]
 80010ec:	f003 327f 	and.w	r2, r3, #2139062143	; 0x7f7f7f7f
 80010f0:	4904      	ldr	r1, [pc, #16]	; (8001104 <rtc_alma_set_mask+0x24>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	61cb      	str	r3, [r1, #28]
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	40002800 	.word	0x40002800

08001108 <rtc_date_config>:


static void rtc_date_config(uint32_t WeekDay, uint32_t Day, uint32_t Month, uint32_t Year)
{
 8001108:	b490      	push	{r4, r7}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
 8001114:	603b      	str	r3, [r7, #0]
  register uint32_t temp = 0U;
 8001116:	2400      	movs	r4, #0

  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	035a      	lsls	r2, r3, #13
         (((Year & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | ((Year & 0x0FU) << RTC_DR_YU_Pos))   | \
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	041b      	lsls	r3, r3, #16
 8001120:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 8001124:	431a      	orrs	r2, r3
         (((Month & 0xF0U) << (RTC_DR_MT_Pos - 4U)) | ((Month & 0x0FU) << RTC_DR_MU_Pos)) | \
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	021b      	lsls	r3, r3, #8
 800112a:	b29b      	uxth	r3, r3
         (((Year & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | ((Year & 0x0FU) << RTC_DR_YU_Pos))   | \
 800112c:	431a      	orrs	r2, r3
         (((Day & 0xF0U) << (RTC_DR_DT_Pos - 4U)) | ((Day & 0x0FU) << RTC_DR_DU_Pos));
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	b2db      	uxtb	r3, r3
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 8001132:	ea42 0403 	orr.w	r4, r2, r3

  MODIFY_REG(RTC->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8001136:	4b06      	ldr	r3, [pc, #24]	; (8001150 <rtc_date_config+0x48>)
 8001138:	685a      	ldr	r2, [r3, #4]
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <rtc_date_config+0x4c>)
 800113c:	4013      	ands	r3, r2
 800113e:	4a04      	ldr	r2, [pc, #16]	; (8001150 <rtc_date_config+0x48>)
 8001140:	4323      	orrs	r3, r4
 8001142:	6053      	str	r3, [r2, #4]
}
 8001144:	bf00      	nop
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bc90      	pop	{r4, r7}
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	40002800 	.word	0x40002800
 8001154:	ff0000c0 	.word	0xff0000c0

08001158 <rtc_time_config>:



static void rtc_time_config(uint32_t Format12_24, uint32_t Hours, uint32_t Minutes, uint32_t Seconds)
{
 8001158:	b490      	push	{r4, r7}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
 8001164:	603b      	str	r3, [r7, #0]
  register uint32_t temp = 0U;
 8001166:	2400      	movs	r4, #0

  temp = Format12_24                                                                                    | \
         (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	041b      	lsls	r3, r3, #16
 800116c:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
  temp = Format12_24                                                                                    | \
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	431a      	orrs	r2, r3
         (((Minutes & 0xF0U) << (RTC_TR_MNT_Pos - 4U)) | ((Minutes & 0x0FU) << RTC_TR_MNU_Pos)) | \
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	021b      	lsls	r3, r3, #8
 8001178:	b29b      	uxth	r3, r3
         (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
 800117a:	431a      	orrs	r2, r3
         (((Seconds & 0xF0U) << (RTC_TR_ST_Pos - 4U)) | ((Seconds & 0x0FU) << RTC_TR_SU_Pos));
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	b2db      	uxtb	r3, r3
  temp = Format12_24                                                                                    | \
 8001180:	ea42 0403 	orr.w	r4, r2, r3
  MODIFY_REG(RTC->TR, (
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <rtc_time_config+0x48>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
 800118c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001190:	4a03      	ldr	r2, [pc, #12]	; (80011a0 <rtc_time_config+0x48>)
 8001192:	4323      	orrs	r3, r4
 8001194:	6013      	str	r3, [r2, #0]
		  RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
}
 8001196:	bf00      	nop
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bc90      	pop	{r4, r7}
 800119e:	4770      	bx	lr
 80011a0:	40002800 	.word	0x40002800

080011a4 <rtc_alma_config_time>:



static void rtc_alma_config_time(uint32_t Format12_24, uint32_t Hours, uint32_t Minutes, uint32_t Seconds)
{
 80011a4:	b490      	push	{r4, r7}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
 80011b0:	603b      	str	r3, [r7, #0]
  register uint32_t temp = 0U;
 80011b2:	2400      	movs	r4, #0

  temp = Format12_24 | (((Hours & 0xF0U) << (RTC_ALRMAR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_ALRMAR_HU_Pos))    | \
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	041b      	lsls	r3, r3, #16
 80011b8:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	431a      	orrs	r2, r3
         (((Minutes & 0xF0U) << (RTC_ALRMAR_MNT_Pos - 4U)) | ((Minutes & 0x0FU) << RTC_ALRMAR_MNU_Pos)) | \
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	021b      	lsls	r3, r3, #8
 80011c4:	b29b      	uxth	r3, r3
  temp = Format12_24 | (((Hours & 0xF0U) << (RTC_ALRMAR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_ALRMAR_HU_Pos))    | \
 80011c6:	431a      	orrs	r2, r3
         (((Seconds & 0xF0U) << (RTC_ALRMAR_ST_Pos - 4U)) | ((Seconds & 0x0FU) << RTC_ALRMAR_SU_Pos));
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	b2db      	uxtb	r3, r3
  temp = Format12_24 | (((Hours & 0xF0U) << (RTC_ALRMAR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_ALRMAR_HU_Pos))    | \
 80011cc:	ea42 0403 	orr.w	r4, r2, r3

  MODIFY_REG(RTC->ALRMAR, RTC_ALRMAR_PM | RTC_ALRMAR_HT | RTC_ALRMAR_HU | RTC_ALRMAR_MNT | RTC_ALRMAR_MNU | RTC_ALRMAR_ST | RTC_ALRMAR_SU, temp);
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <rtc_alma_config_time+0x48>)
 80011d2:	69db      	ldr	r3, [r3, #28]
 80011d4:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
 80011d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80011dc:	4a03      	ldr	r2, [pc, #12]	; (80011ec <rtc_alma_config_time+0x48>)
 80011de:	4323      	orrs	r3, r4
 80011e0:	61d3      	str	r3, [r2, #28]
}
 80011e2:	bf00      	nop
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc90      	pop	{r4, r7}
 80011ea:	4770      	bx	lr
 80011ec:	40002800 	.word	0x40002800

080011f0 <rtc_set_async_prescaler>:

static void rtc_set_async_prescaler(uint32_t AsynchPrescaler)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]

	MODIFY_REG(RTC->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 80011f8:	4b07      	ldr	r3, [pc, #28]	; (8001218 <rtc_set_async_prescaler+0x28>)
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	041b      	lsls	r3, r3, #16
 8001204:	4904      	ldr	r1, [pc, #16]	; (8001218 <rtc_set_async_prescaler+0x28>)
 8001206:	4313      	orrs	r3, r2
 8001208:	610b      	str	r3, [r1, #16]

}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	40002800 	.word	0x40002800

0800121c <rtc_set_synch_prescaler>:

static void rtc_set_synch_prescaler(uint32_t SynchPrescaler)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RTC->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 8001224:	4b07      	ldr	r3, [pc, #28]	; (8001244 <rtc_set_synch_prescaler+0x28>)
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800122c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001230:	4904      	ldr	r1, [pc, #16]	; (8001244 <rtc_set_synch_prescaler+0x28>)
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	4313      	orrs	r3, r2
 8001236:	610b      	str	r3, [r1, #16]
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	40002800 	.word	0x40002800

08001248 <rtc_enable_init_mode>:

static void rtc_enable_init_mode(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
	RTC->ISR = RTC_INIT_MASK;
 800124c:	4b04      	ldr	r3, [pc, #16]	; (8001260 <rtc_enable_init_mode+0x18>)
 800124e:	f04f 32ff 	mov.w	r2, #4294967295
 8001252:	60da      	str	r2, [r3, #12]
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	40002800 	.word	0x40002800

08001264 <rtc_isActiveflag_init>:

static uint32_t rtc_isActiveflag_init(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
	return (READ_BIT(RTC->ISR,RTC_ISR_INITF) ==  (RTC_ISR_INITF));
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <rtc_isActiveflag_init+0x20>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001270:	2b40      	cmp	r3, #64	; 0x40
 8001272:	bf0c      	ite	eq
 8001274:	2301      	moveq	r3, #1
 8001276:	2300      	movne	r3, #0
 8001278:	b2db      	uxtb	r3, r3
}
 800127a:	4618      	mov	r0, r3
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	40002800 	.word	0x40002800

08001288 <rtc_init_seq>:

static uint32_t rtc_init_seq(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
	/*Set initialization mode*/
	rtc_enable_init_mode();
 800128c:	f7ff ffdc 	bl	8001248 <rtc_enable_init_mode>

	/*Check if initialization mode is set*/
	while(rtc_isActiveflag_init() != 1){}
 8001290:	bf00      	nop
 8001292:	f7ff ffe7 	bl	8001264 <rtc_isActiveflag_init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b01      	cmp	r3, #1
 800129a:	d1fa      	bne.n	8001292 <rtc_init_seq+0xa>

	return 1;
 800129c:	2301      	movs	r3, #1
}
 800129e:	4618      	mov	r0, r3
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <rtc_exit_init_mode>:



static void rtc_exit_init_mode(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
	RTC->ISR = 0;
 80012a8:	4b03      	ldr	r3, [pc, #12]	; (80012b8 <rtc_exit_init_mode+0x14>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	60da      	str	r2, [r3, #12]

}
 80012ae:	bf00      	nop
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	40002800 	.word	0x40002800

080012bc <rtc_clearflag_rs>:


void rtc_clearflag_rs(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
    WRITE_REG(RTC->ISR, (~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTC->ISR & RTC_ISR_INIT)));
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <rtc_clearflag_rs+0x20>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012c8:	4a04      	ldr	r2, [pc, #16]	; (80012dc <rtc_clearflag_rs+0x20>)
 80012ca:	f063 03a0 	orn	r3, r3, #160	; 0xa0
 80012ce:	60d3      	str	r3, [r2, #12]

}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	40002800 	.word	0x40002800

080012e0 <rtc_isActiveflag_rs>:

static uint32_t  rtc_isActiveflag_rs(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
    return (READ_BIT(RTC->ISR, RTC_ISR_RSF) == (RTC_ISR_RSF));
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <rtc_isActiveflag_rs+0x20>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	f003 0320 	and.w	r3, r3, #32
 80012ec:	2b20      	cmp	r3, #32
 80012ee:	bf0c      	ite	eq
 80012f0:	2301      	moveq	r3, #1
 80012f2:	2300      	movne	r3, #0
 80012f4:	b2db      	uxtb	r3, r3

}
 80012f6:	4618      	mov	r0, r3
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	40002800 	.word	0x40002800

08001304 <wait_for_synchro>:
static uint32_t wait_for_synchro(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
	/*Clear RSF flag*/
	rtc_clearflag_rs();
 8001308:	f7ff ffd8 	bl	80012bc <rtc_clearflag_rs>

	/*Wait for registers to be synched*/
	while(rtc_isActiveflag_rs() != 1)
 800130c:	bf00      	nop
 800130e:	f7ff ffe7 	bl	80012e0 <rtc_isActiveflag_rs>
 8001312:	4603      	mov	r3, r0
 8001314:	2b01      	cmp	r3, #1
 8001316:	d1fa      	bne.n	800130e <wait_for_synchro+0xa>
	{

	}

	return 0;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	bd80      	pop	{r7, pc}

0800131e <exit_init_seq>:

static uint32_t exit_init_seq(void)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	af00      	add	r7, sp, #0
	/*Disable rtc init mode*/
	rtc_exit_init_mode();
 8001322:	f7ff ffbf 	bl	80012a4 <rtc_exit_init_mode>

	/*Wait for registers to be synchronised*/
	return (wait_for_synchro());
 8001326:	f7ff ffed 	bl	8001304 <wait_for_synchro>
 800132a:	4603      	mov	r3, r0

}
 800132c:	4618      	mov	r0, r3
 800132e:	bd80      	pop	{r7, pc}

08001330 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	e00a      	b.n	8001358 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001342:	f3af 8000 	nop.w
 8001346:	4601      	mov	r1, r0
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	1c5a      	adds	r2, r3, #1
 800134c:	60ba      	str	r2, [r7, #8]
 800134e:	b2ca      	uxtb	r2, r1
 8001350:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	3301      	adds	r3, #1
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	697a      	ldr	r2, [r7, #20]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	429a      	cmp	r2, r3
 800135e:	dbf0      	blt.n	8001342 <_read+0x12>
	}

return len;
 8001360:	687b      	ldr	r3, [r7, #4]
}
 8001362:	4618      	mov	r0, r3
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b086      	sub	sp, #24
 800136e:	af00      	add	r7, sp, #0
 8001370:	60f8      	str	r0, [r7, #12]
 8001372:	60b9      	str	r1, [r7, #8]
 8001374:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001376:	2300      	movs	r3, #0
 8001378:	617b      	str	r3, [r7, #20]
 800137a:	e009      	b.n	8001390 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	1c5a      	adds	r2, r3, #1
 8001380:	60ba      	str	r2, [r7, #8]
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f7fe ff7b 	bl	8000280 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	3301      	adds	r3, #1
 800138e:	617b      	str	r3, [r7, #20]
 8001390:	697a      	ldr	r2, [r7, #20]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	429a      	cmp	r2, r3
 8001396:	dbf1      	blt.n	800137c <_write+0x12>
	}
	return len;
 8001398:	687b      	ldr	r3, [r7, #4]
}
 800139a:	4618      	mov	r0, r3
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <_close>:

int _close(int file)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b083      	sub	sp, #12
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
	return -1;
 80013aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013ba:	b480      	push	{r7}
 80013bc:	b083      	sub	sp, #12
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
 80013c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013ca:	605a      	str	r2, [r3, #4]
	return 0;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <_isatty>:

int _isatty(int file)
{
 80013da:	b480      	push	{r7}
 80013dc:	b083      	sub	sp, #12
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
	return 1;
 80013e2:	2301      	movs	r3, #1
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
	return 0;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
	...

0800140c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001414:	4a14      	ldr	r2, [pc, #80]	; (8001468 <_sbrk+0x5c>)
 8001416:	4b15      	ldr	r3, [pc, #84]	; (800146c <_sbrk+0x60>)
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001420:	4b13      	ldr	r3, [pc, #76]	; (8001470 <_sbrk+0x64>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d102      	bne.n	800142e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001428:	4b11      	ldr	r3, [pc, #68]	; (8001470 <_sbrk+0x64>)
 800142a:	4a12      	ldr	r2, [pc, #72]	; (8001474 <_sbrk+0x68>)
 800142c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800142e:	4b10      	ldr	r3, [pc, #64]	; (8001470 <_sbrk+0x64>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4413      	add	r3, r2
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	429a      	cmp	r2, r3
 800143a:	d207      	bcs.n	800144c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800143c:	f000 f846 	bl	80014cc <__errno>
 8001440:	4603      	mov	r3, r0
 8001442:	220c      	movs	r2, #12
 8001444:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001446:	f04f 33ff 	mov.w	r3, #4294967295
 800144a:	e009      	b.n	8001460 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800144c:	4b08      	ldr	r3, [pc, #32]	; (8001470 <_sbrk+0x64>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001452:	4b07      	ldr	r3, [pc, #28]	; (8001470 <_sbrk+0x64>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4413      	add	r3, r2
 800145a:	4a05      	ldr	r2, [pc, #20]	; (8001470 <_sbrk+0x64>)
 800145c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800145e:	68fb      	ldr	r3, [r7, #12]
}
 8001460:	4618      	mov	r0, r3
 8001462:	3718      	adds	r7, #24
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20020000 	.word	0x20020000
 800146c:	00000400 	.word	0x00000400
 8001470:	200005d8 	.word	0x200005d8
 8001474:	20000750 	.word	0x20000750

08001478 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001478:	480d      	ldr	r0, [pc, #52]	; (80014b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800147a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800147c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001480:	480c      	ldr	r0, [pc, #48]	; (80014b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001482:	490d      	ldr	r1, [pc, #52]	; (80014b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001484:	4a0d      	ldr	r2, [pc, #52]	; (80014bc <LoopForever+0xe>)
  movs r3, #0
 8001486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001488:	e002      	b.n	8001490 <LoopCopyDataInit>

0800148a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800148a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800148c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800148e:	3304      	adds	r3, #4

08001490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001494:	d3f9      	bcc.n	800148a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001496:	4a0a      	ldr	r2, [pc, #40]	; (80014c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001498:	4c0a      	ldr	r4, [pc, #40]	; (80014c4 <LoopForever+0x16>)
  movs r3, #0
 800149a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800149c:	e001      	b.n	80014a2 <LoopFillZerobss>

0800149e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800149e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a0:	3204      	adds	r2, #4

080014a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a4:	d3fb      	bcc.n	800149e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80014a6:	f000 f817 	bl	80014d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014aa:	f7ff fcb9 	bl	8000e20 <main>

080014ae <LoopForever>:

LoopForever:
    b LoopForever
 80014ae:	e7fe      	b.n	80014ae <LoopForever>
  ldr   r0, =_estack
 80014b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014b8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80014bc:	08002834 	.word	0x08002834
  ldr r2, =_sbss
 80014c0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80014c4:	20000750 	.word	0x20000750

080014c8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014c8:	e7fe      	b.n	80014c8 <ADC_IRQHandler>
	...

080014cc <__errno>:
 80014cc:	4b01      	ldr	r3, [pc, #4]	; (80014d4 <__errno+0x8>)
 80014ce:	6818      	ldr	r0, [r3, #0]
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	2000002c 	.word	0x2000002c

080014d8 <__libc_init_array>:
 80014d8:	b570      	push	{r4, r5, r6, lr}
 80014da:	4d0d      	ldr	r5, [pc, #52]	; (8001510 <__libc_init_array+0x38>)
 80014dc:	4c0d      	ldr	r4, [pc, #52]	; (8001514 <__libc_init_array+0x3c>)
 80014de:	1b64      	subs	r4, r4, r5
 80014e0:	10a4      	asrs	r4, r4, #2
 80014e2:	2600      	movs	r6, #0
 80014e4:	42a6      	cmp	r6, r4
 80014e6:	d109      	bne.n	80014fc <__libc_init_array+0x24>
 80014e8:	4d0b      	ldr	r5, [pc, #44]	; (8001518 <__libc_init_array+0x40>)
 80014ea:	4c0c      	ldr	r4, [pc, #48]	; (800151c <__libc_init_array+0x44>)
 80014ec:	f000 ffa4 	bl	8002438 <_init>
 80014f0:	1b64      	subs	r4, r4, r5
 80014f2:	10a4      	asrs	r4, r4, #2
 80014f4:	2600      	movs	r6, #0
 80014f6:	42a6      	cmp	r6, r4
 80014f8:	d105      	bne.n	8001506 <__libc_init_array+0x2e>
 80014fa:	bd70      	pop	{r4, r5, r6, pc}
 80014fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001500:	4798      	blx	r3
 8001502:	3601      	adds	r6, #1
 8001504:	e7ee      	b.n	80014e4 <__libc_init_array+0xc>
 8001506:	f855 3b04 	ldr.w	r3, [r5], #4
 800150a:	4798      	blx	r3
 800150c:	3601      	adds	r6, #1
 800150e:	e7f2      	b.n	80014f6 <__libc_init_array+0x1e>
 8001510:	0800282c 	.word	0x0800282c
 8001514:	0800282c 	.word	0x0800282c
 8001518:	0800282c 	.word	0x0800282c
 800151c:	08002830 	.word	0x08002830

08001520 <memset>:
 8001520:	4402      	add	r2, r0
 8001522:	4603      	mov	r3, r0
 8001524:	4293      	cmp	r3, r2
 8001526:	d100      	bne.n	800152a <memset+0xa>
 8001528:	4770      	bx	lr
 800152a:	f803 1b01 	strb.w	r1, [r3], #1
 800152e:	e7f9      	b.n	8001524 <memset+0x4>

08001530 <iprintf>:
 8001530:	b40f      	push	{r0, r1, r2, r3}
 8001532:	4b0a      	ldr	r3, [pc, #40]	; (800155c <iprintf+0x2c>)
 8001534:	b513      	push	{r0, r1, r4, lr}
 8001536:	681c      	ldr	r4, [r3, #0]
 8001538:	b124      	cbz	r4, 8001544 <iprintf+0x14>
 800153a:	69a3      	ldr	r3, [r4, #24]
 800153c:	b913      	cbnz	r3, 8001544 <iprintf+0x14>
 800153e:	4620      	mov	r0, r4
 8001540:	f000 f894 	bl	800166c <__sinit>
 8001544:	ab05      	add	r3, sp, #20
 8001546:	9a04      	ldr	r2, [sp, #16]
 8001548:	68a1      	ldr	r1, [r4, #8]
 800154a:	9301      	str	r3, [sp, #4]
 800154c:	4620      	mov	r0, r4
 800154e:	f000 f9b1 	bl	80018b4 <_vfiprintf_r>
 8001552:	b002      	add	sp, #8
 8001554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001558:	b004      	add	sp, #16
 800155a:	4770      	bx	lr
 800155c:	2000002c 	.word	0x2000002c

08001560 <strcat>:
 8001560:	b510      	push	{r4, lr}
 8001562:	4602      	mov	r2, r0
 8001564:	7814      	ldrb	r4, [r2, #0]
 8001566:	4613      	mov	r3, r2
 8001568:	3201      	adds	r2, #1
 800156a:	2c00      	cmp	r4, #0
 800156c:	d1fa      	bne.n	8001564 <strcat+0x4>
 800156e:	3b01      	subs	r3, #1
 8001570:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001574:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001578:	2a00      	cmp	r2, #0
 800157a:	d1f9      	bne.n	8001570 <strcat+0x10>
 800157c:	bd10      	pop	{r4, pc}

0800157e <strcpy>:
 800157e:	4603      	mov	r3, r0
 8001580:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001584:	f803 2b01 	strb.w	r2, [r3], #1
 8001588:	2a00      	cmp	r2, #0
 800158a:	d1f9      	bne.n	8001580 <strcpy+0x2>
 800158c:	4770      	bx	lr

0800158e <strstr>:
 800158e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001590:	780c      	ldrb	r4, [r1, #0]
 8001592:	b164      	cbz	r4, 80015ae <strstr+0x20>
 8001594:	4603      	mov	r3, r0
 8001596:	781a      	ldrb	r2, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	1c5e      	adds	r6, r3, #1
 800159c:	b90a      	cbnz	r2, 80015a2 <strstr+0x14>
 800159e:	4610      	mov	r0, r2
 80015a0:	e005      	b.n	80015ae <strstr+0x20>
 80015a2:	4294      	cmp	r4, r2
 80015a4:	d108      	bne.n	80015b8 <strstr+0x2a>
 80015a6:	460d      	mov	r5, r1
 80015a8:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80015ac:	b902      	cbnz	r2, 80015b0 <strstr+0x22>
 80015ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015b0:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80015b4:	4297      	cmp	r7, r2
 80015b6:	d0f7      	beq.n	80015a8 <strstr+0x1a>
 80015b8:	4633      	mov	r3, r6
 80015ba:	e7ec      	b.n	8001596 <strstr+0x8>

080015bc <std>:
 80015bc:	2300      	movs	r3, #0
 80015be:	b510      	push	{r4, lr}
 80015c0:	4604      	mov	r4, r0
 80015c2:	e9c0 3300 	strd	r3, r3, [r0]
 80015c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80015ca:	6083      	str	r3, [r0, #8]
 80015cc:	8181      	strh	r1, [r0, #12]
 80015ce:	6643      	str	r3, [r0, #100]	; 0x64
 80015d0:	81c2      	strh	r2, [r0, #14]
 80015d2:	6183      	str	r3, [r0, #24]
 80015d4:	4619      	mov	r1, r3
 80015d6:	2208      	movs	r2, #8
 80015d8:	305c      	adds	r0, #92	; 0x5c
 80015da:	f7ff ffa1 	bl	8001520 <memset>
 80015de:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <std+0x38>)
 80015e0:	6263      	str	r3, [r4, #36]	; 0x24
 80015e2:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <std+0x3c>)
 80015e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80015e6:	4b05      	ldr	r3, [pc, #20]	; (80015fc <std+0x40>)
 80015e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80015ea:	4b05      	ldr	r3, [pc, #20]	; (8001600 <std+0x44>)
 80015ec:	6224      	str	r4, [r4, #32]
 80015ee:	6323      	str	r3, [r4, #48]	; 0x30
 80015f0:	bd10      	pop	{r4, pc}
 80015f2:	bf00      	nop
 80015f4:	08001e5d 	.word	0x08001e5d
 80015f8:	08001e7f 	.word	0x08001e7f
 80015fc:	08001eb7 	.word	0x08001eb7
 8001600:	08001edb 	.word	0x08001edb

08001604 <_cleanup_r>:
 8001604:	4901      	ldr	r1, [pc, #4]	; (800160c <_cleanup_r+0x8>)
 8001606:	f000 b8af 	b.w	8001768 <_fwalk_reent>
 800160a:	bf00      	nop
 800160c:	080021b5 	.word	0x080021b5

08001610 <__sfmoreglue>:
 8001610:	b570      	push	{r4, r5, r6, lr}
 8001612:	1e4a      	subs	r2, r1, #1
 8001614:	2568      	movs	r5, #104	; 0x68
 8001616:	4355      	muls	r5, r2
 8001618:	460e      	mov	r6, r1
 800161a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800161e:	f000 f8c5 	bl	80017ac <_malloc_r>
 8001622:	4604      	mov	r4, r0
 8001624:	b140      	cbz	r0, 8001638 <__sfmoreglue+0x28>
 8001626:	2100      	movs	r1, #0
 8001628:	e9c0 1600 	strd	r1, r6, [r0]
 800162c:	300c      	adds	r0, #12
 800162e:	60a0      	str	r0, [r4, #8]
 8001630:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001634:	f7ff ff74 	bl	8001520 <memset>
 8001638:	4620      	mov	r0, r4
 800163a:	bd70      	pop	{r4, r5, r6, pc}

0800163c <__sfp_lock_acquire>:
 800163c:	4801      	ldr	r0, [pc, #4]	; (8001644 <__sfp_lock_acquire+0x8>)
 800163e:	f000 b8b3 	b.w	80017a8 <__retarget_lock_acquire_recursive>
 8001642:	bf00      	nop
 8001644:	20000748 	.word	0x20000748

08001648 <__sfp_lock_release>:
 8001648:	4801      	ldr	r0, [pc, #4]	; (8001650 <__sfp_lock_release+0x8>)
 800164a:	f000 b8ae 	b.w	80017aa <__retarget_lock_release_recursive>
 800164e:	bf00      	nop
 8001650:	20000748 	.word	0x20000748

08001654 <__sinit_lock_acquire>:
 8001654:	4801      	ldr	r0, [pc, #4]	; (800165c <__sinit_lock_acquire+0x8>)
 8001656:	f000 b8a7 	b.w	80017a8 <__retarget_lock_acquire_recursive>
 800165a:	bf00      	nop
 800165c:	20000743 	.word	0x20000743

08001660 <__sinit_lock_release>:
 8001660:	4801      	ldr	r0, [pc, #4]	; (8001668 <__sinit_lock_release+0x8>)
 8001662:	f000 b8a2 	b.w	80017aa <__retarget_lock_release_recursive>
 8001666:	bf00      	nop
 8001668:	20000743 	.word	0x20000743

0800166c <__sinit>:
 800166c:	b510      	push	{r4, lr}
 800166e:	4604      	mov	r4, r0
 8001670:	f7ff fff0 	bl	8001654 <__sinit_lock_acquire>
 8001674:	69a3      	ldr	r3, [r4, #24]
 8001676:	b11b      	cbz	r3, 8001680 <__sinit+0x14>
 8001678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800167c:	f7ff bff0 	b.w	8001660 <__sinit_lock_release>
 8001680:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001684:	6523      	str	r3, [r4, #80]	; 0x50
 8001686:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <__sinit+0x68>)
 8001688:	4a13      	ldr	r2, [pc, #76]	; (80016d8 <__sinit+0x6c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	62a2      	str	r2, [r4, #40]	; 0x28
 800168e:	42a3      	cmp	r3, r4
 8001690:	bf04      	itt	eq
 8001692:	2301      	moveq	r3, #1
 8001694:	61a3      	streq	r3, [r4, #24]
 8001696:	4620      	mov	r0, r4
 8001698:	f000 f820 	bl	80016dc <__sfp>
 800169c:	6060      	str	r0, [r4, #4]
 800169e:	4620      	mov	r0, r4
 80016a0:	f000 f81c 	bl	80016dc <__sfp>
 80016a4:	60a0      	str	r0, [r4, #8]
 80016a6:	4620      	mov	r0, r4
 80016a8:	f000 f818 	bl	80016dc <__sfp>
 80016ac:	2200      	movs	r2, #0
 80016ae:	60e0      	str	r0, [r4, #12]
 80016b0:	2104      	movs	r1, #4
 80016b2:	6860      	ldr	r0, [r4, #4]
 80016b4:	f7ff ff82 	bl	80015bc <std>
 80016b8:	68a0      	ldr	r0, [r4, #8]
 80016ba:	2201      	movs	r2, #1
 80016bc:	2109      	movs	r1, #9
 80016be:	f7ff ff7d 	bl	80015bc <std>
 80016c2:	68e0      	ldr	r0, [r4, #12]
 80016c4:	2202      	movs	r2, #2
 80016c6:	2112      	movs	r1, #18
 80016c8:	f7ff ff78 	bl	80015bc <std>
 80016cc:	2301      	movs	r3, #1
 80016ce:	61a3      	str	r3, [r4, #24]
 80016d0:	e7d2      	b.n	8001678 <__sinit+0xc>
 80016d2:	bf00      	nop
 80016d4:	08002794 	.word	0x08002794
 80016d8:	08001605 	.word	0x08001605

080016dc <__sfp>:
 80016dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016de:	4607      	mov	r7, r0
 80016e0:	f7ff ffac 	bl	800163c <__sfp_lock_acquire>
 80016e4:	4b1e      	ldr	r3, [pc, #120]	; (8001760 <__sfp+0x84>)
 80016e6:	681e      	ldr	r6, [r3, #0]
 80016e8:	69b3      	ldr	r3, [r6, #24]
 80016ea:	b913      	cbnz	r3, 80016f2 <__sfp+0x16>
 80016ec:	4630      	mov	r0, r6
 80016ee:	f7ff ffbd 	bl	800166c <__sinit>
 80016f2:	3648      	adds	r6, #72	; 0x48
 80016f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80016f8:	3b01      	subs	r3, #1
 80016fa:	d503      	bpl.n	8001704 <__sfp+0x28>
 80016fc:	6833      	ldr	r3, [r6, #0]
 80016fe:	b30b      	cbz	r3, 8001744 <__sfp+0x68>
 8001700:	6836      	ldr	r6, [r6, #0]
 8001702:	e7f7      	b.n	80016f4 <__sfp+0x18>
 8001704:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001708:	b9d5      	cbnz	r5, 8001740 <__sfp+0x64>
 800170a:	4b16      	ldr	r3, [pc, #88]	; (8001764 <__sfp+0x88>)
 800170c:	60e3      	str	r3, [r4, #12]
 800170e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001712:	6665      	str	r5, [r4, #100]	; 0x64
 8001714:	f000 f847 	bl	80017a6 <__retarget_lock_init_recursive>
 8001718:	f7ff ff96 	bl	8001648 <__sfp_lock_release>
 800171c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001720:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001724:	6025      	str	r5, [r4, #0]
 8001726:	61a5      	str	r5, [r4, #24]
 8001728:	2208      	movs	r2, #8
 800172a:	4629      	mov	r1, r5
 800172c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001730:	f7ff fef6 	bl	8001520 <memset>
 8001734:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001738:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800173c:	4620      	mov	r0, r4
 800173e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001740:	3468      	adds	r4, #104	; 0x68
 8001742:	e7d9      	b.n	80016f8 <__sfp+0x1c>
 8001744:	2104      	movs	r1, #4
 8001746:	4638      	mov	r0, r7
 8001748:	f7ff ff62 	bl	8001610 <__sfmoreglue>
 800174c:	4604      	mov	r4, r0
 800174e:	6030      	str	r0, [r6, #0]
 8001750:	2800      	cmp	r0, #0
 8001752:	d1d5      	bne.n	8001700 <__sfp+0x24>
 8001754:	f7ff ff78 	bl	8001648 <__sfp_lock_release>
 8001758:	230c      	movs	r3, #12
 800175a:	603b      	str	r3, [r7, #0]
 800175c:	e7ee      	b.n	800173c <__sfp+0x60>
 800175e:	bf00      	nop
 8001760:	08002794 	.word	0x08002794
 8001764:	ffff0001 	.word	0xffff0001

08001768 <_fwalk_reent>:
 8001768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800176c:	4606      	mov	r6, r0
 800176e:	4688      	mov	r8, r1
 8001770:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001774:	2700      	movs	r7, #0
 8001776:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800177a:	f1b9 0901 	subs.w	r9, r9, #1
 800177e:	d505      	bpl.n	800178c <_fwalk_reent+0x24>
 8001780:	6824      	ldr	r4, [r4, #0]
 8001782:	2c00      	cmp	r4, #0
 8001784:	d1f7      	bne.n	8001776 <_fwalk_reent+0xe>
 8001786:	4638      	mov	r0, r7
 8001788:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800178c:	89ab      	ldrh	r3, [r5, #12]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d907      	bls.n	80017a2 <_fwalk_reent+0x3a>
 8001792:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001796:	3301      	adds	r3, #1
 8001798:	d003      	beq.n	80017a2 <_fwalk_reent+0x3a>
 800179a:	4629      	mov	r1, r5
 800179c:	4630      	mov	r0, r6
 800179e:	47c0      	blx	r8
 80017a0:	4307      	orrs	r7, r0
 80017a2:	3568      	adds	r5, #104	; 0x68
 80017a4:	e7e9      	b.n	800177a <_fwalk_reent+0x12>

080017a6 <__retarget_lock_init_recursive>:
 80017a6:	4770      	bx	lr

080017a8 <__retarget_lock_acquire_recursive>:
 80017a8:	4770      	bx	lr

080017aa <__retarget_lock_release_recursive>:
 80017aa:	4770      	bx	lr

080017ac <_malloc_r>:
 80017ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ae:	1ccd      	adds	r5, r1, #3
 80017b0:	f025 0503 	bic.w	r5, r5, #3
 80017b4:	3508      	adds	r5, #8
 80017b6:	2d0c      	cmp	r5, #12
 80017b8:	bf38      	it	cc
 80017ba:	250c      	movcc	r5, #12
 80017bc:	2d00      	cmp	r5, #0
 80017be:	4606      	mov	r6, r0
 80017c0:	db01      	blt.n	80017c6 <_malloc_r+0x1a>
 80017c2:	42a9      	cmp	r1, r5
 80017c4:	d903      	bls.n	80017ce <_malloc_r+0x22>
 80017c6:	230c      	movs	r3, #12
 80017c8:	6033      	str	r3, [r6, #0]
 80017ca:	2000      	movs	r0, #0
 80017cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017ce:	f000 fda3 	bl	8002318 <__malloc_lock>
 80017d2:	4921      	ldr	r1, [pc, #132]	; (8001858 <_malloc_r+0xac>)
 80017d4:	680a      	ldr	r2, [r1, #0]
 80017d6:	4614      	mov	r4, r2
 80017d8:	b99c      	cbnz	r4, 8001802 <_malloc_r+0x56>
 80017da:	4f20      	ldr	r7, [pc, #128]	; (800185c <_malloc_r+0xb0>)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	b923      	cbnz	r3, 80017ea <_malloc_r+0x3e>
 80017e0:	4621      	mov	r1, r4
 80017e2:	4630      	mov	r0, r6
 80017e4:	f000 fb2a 	bl	8001e3c <_sbrk_r>
 80017e8:	6038      	str	r0, [r7, #0]
 80017ea:	4629      	mov	r1, r5
 80017ec:	4630      	mov	r0, r6
 80017ee:	f000 fb25 	bl	8001e3c <_sbrk_r>
 80017f2:	1c43      	adds	r3, r0, #1
 80017f4:	d123      	bne.n	800183e <_malloc_r+0x92>
 80017f6:	230c      	movs	r3, #12
 80017f8:	6033      	str	r3, [r6, #0]
 80017fa:	4630      	mov	r0, r6
 80017fc:	f000 fd92 	bl	8002324 <__malloc_unlock>
 8001800:	e7e3      	b.n	80017ca <_malloc_r+0x1e>
 8001802:	6823      	ldr	r3, [r4, #0]
 8001804:	1b5b      	subs	r3, r3, r5
 8001806:	d417      	bmi.n	8001838 <_malloc_r+0x8c>
 8001808:	2b0b      	cmp	r3, #11
 800180a:	d903      	bls.n	8001814 <_malloc_r+0x68>
 800180c:	6023      	str	r3, [r4, #0]
 800180e:	441c      	add	r4, r3
 8001810:	6025      	str	r5, [r4, #0]
 8001812:	e004      	b.n	800181e <_malloc_r+0x72>
 8001814:	6863      	ldr	r3, [r4, #4]
 8001816:	42a2      	cmp	r2, r4
 8001818:	bf0c      	ite	eq
 800181a:	600b      	streq	r3, [r1, #0]
 800181c:	6053      	strne	r3, [r2, #4]
 800181e:	4630      	mov	r0, r6
 8001820:	f000 fd80 	bl	8002324 <__malloc_unlock>
 8001824:	f104 000b 	add.w	r0, r4, #11
 8001828:	1d23      	adds	r3, r4, #4
 800182a:	f020 0007 	bic.w	r0, r0, #7
 800182e:	1ac2      	subs	r2, r0, r3
 8001830:	d0cc      	beq.n	80017cc <_malloc_r+0x20>
 8001832:	1a1b      	subs	r3, r3, r0
 8001834:	50a3      	str	r3, [r4, r2]
 8001836:	e7c9      	b.n	80017cc <_malloc_r+0x20>
 8001838:	4622      	mov	r2, r4
 800183a:	6864      	ldr	r4, [r4, #4]
 800183c:	e7cc      	b.n	80017d8 <_malloc_r+0x2c>
 800183e:	1cc4      	adds	r4, r0, #3
 8001840:	f024 0403 	bic.w	r4, r4, #3
 8001844:	42a0      	cmp	r0, r4
 8001846:	d0e3      	beq.n	8001810 <_malloc_r+0x64>
 8001848:	1a21      	subs	r1, r4, r0
 800184a:	4630      	mov	r0, r6
 800184c:	f000 faf6 	bl	8001e3c <_sbrk_r>
 8001850:	3001      	adds	r0, #1
 8001852:	d1dd      	bne.n	8001810 <_malloc_r+0x64>
 8001854:	e7cf      	b.n	80017f6 <_malloc_r+0x4a>
 8001856:	bf00      	nop
 8001858:	200005dc 	.word	0x200005dc
 800185c:	200005e0 	.word	0x200005e0

08001860 <__sfputc_r>:
 8001860:	6893      	ldr	r3, [r2, #8]
 8001862:	3b01      	subs	r3, #1
 8001864:	2b00      	cmp	r3, #0
 8001866:	b410      	push	{r4}
 8001868:	6093      	str	r3, [r2, #8]
 800186a:	da08      	bge.n	800187e <__sfputc_r+0x1e>
 800186c:	6994      	ldr	r4, [r2, #24]
 800186e:	42a3      	cmp	r3, r4
 8001870:	db01      	blt.n	8001876 <__sfputc_r+0x16>
 8001872:	290a      	cmp	r1, #10
 8001874:	d103      	bne.n	800187e <__sfputc_r+0x1e>
 8001876:	f85d 4b04 	ldr.w	r4, [sp], #4
 800187a:	f000 bb33 	b.w	8001ee4 <__swbuf_r>
 800187e:	6813      	ldr	r3, [r2, #0]
 8001880:	1c58      	adds	r0, r3, #1
 8001882:	6010      	str	r0, [r2, #0]
 8001884:	7019      	strb	r1, [r3, #0]
 8001886:	4608      	mov	r0, r1
 8001888:	f85d 4b04 	ldr.w	r4, [sp], #4
 800188c:	4770      	bx	lr

0800188e <__sfputs_r>:
 800188e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001890:	4606      	mov	r6, r0
 8001892:	460f      	mov	r7, r1
 8001894:	4614      	mov	r4, r2
 8001896:	18d5      	adds	r5, r2, r3
 8001898:	42ac      	cmp	r4, r5
 800189a:	d101      	bne.n	80018a0 <__sfputs_r+0x12>
 800189c:	2000      	movs	r0, #0
 800189e:	e007      	b.n	80018b0 <__sfputs_r+0x22>
 80018a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80018a4:	463a      	mov	r2, r7
 80018a6:	4630      	mov	r0, r6
 80018a8:	f7ff ffda 	bl	8001860 <__sfputc_r>
 80018ac:	1c43      	adds	r3, r0, #1
 80018ae:	d1f3      	bne.n	8001898 <__sfputs_r+0xa>
 80018b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080018b4 <_vfiprintf_r>:
 80018b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018b8:	460d      	mov	r5, r1
 80018ba:	b09d      	sub	sp, #116	; 0x74
 80018bc:	4614      	mov	r4, r2
 80018be:	4698      	mov	r8, r3
 80018c0:	4606      	mov	r6, r0
 80018c2:	b118      	cbz	r0, 80018cc <_vfiprintf_r+0x18>
 80018c4:	6983      	ldr	r3, [r0, #24]
 80018c6:	b90b      	cbnz	r3, 80018cc <_vfiprintf_r+0x18>
 80018c8:	f7ff fed0 	bl	800166c <__sinit>
 80018cc:	4b89      	ldr	r3, [pc, #548]	; (8001af4 <_vfiprintf_r+0x240>)
 80018ce:	429d      	cmp	r5, r3
 80018d0:	d11b      	bne.n	800190a <_vfiprintf_r+0x56>
 80018d2:	6875      	ldr	r5, [r6, #4]
 80018d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80018d6:	07d9      	lsls	r1, r3, #31
 80018d8:	d405      	bmi.n	80018e6 <_vfiprintf_r+0x32>
 80018da:	89ab      	ldrh	r3, [r5, #12]
 80018dc:	059a      	lsls	r2, r3, #22
 80018de:	d402      	bmi.n	80018e6 <_vfiprintf_r+0x32>
 80018e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80018e2:	f7ff ff61 	bl	80017a8 <__retarget_lock_acquire_recursive>
 80018e6:	89ab      	ldrh	r3, [r5, #12]
 80018e8:	071b      	lsls	r3, r3, #28
 80018ea:	d501      	bpl.n	80018f0 <_vfiprintf_r+0x3c>
 80018ec:	692b      	ldr	r3, [r5, #16]
 80018ee:	b9eb      	cbnz	r3, 800192c <_vfiprintf_r+0x78>
 80018f0:	4629      	mov	r1, r5
 80018f2:	4630      	mov	r0, r6
 80018f4:	f000 fb5a 	bl	8001fac <__swsetup_r>
 80018f8:	b1c0      	cbz	r0, 800192c <_vfiprintf_r+0x78>
 80018fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80018fc:	07dc      	lsls	r4, r3, #31
 80018fe:	d50e      	bpl.n	800191e <_vfiprintf_r+0x6a>
 8001900:	f04f 30ff 	mov.w	r0, #4294967295
 8001904:	b01d      	add	sp, #116	; 0x74
 8001906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800190a:	4b7b      	ldr	r3, [pc, #492]	; (8001af8 <_vfiprintf_r+0x244>)
 800190c:	429d      	cmp	r5, r3
 800190e:	d101      	bne.n	8001914 <_vfiprintf_r+0x60>
 8001910:	68b5      	ldr	r5, [r6, #8]
 8001912:	e7df      	b.n	80018d4 <_vfiprintf_r+0x20>
 8001914:	4b79      	ldr	r3, [pc, #484]	; (8001afc <_vfiprintf_r+0x248>)
 8001916:	429d      	cmp	r5, r3
 8001918:	bf08      	it	eq
 800191a:	68f5      	ldreq	r5, [r6, #12]
 800191c:	e7da      	b.n	80018d4 <_vfiprintf_r+0x20>
 800191e:	89ab      	ldrh	r3, [r5, #12]
 8001920:	0598      	lsls	r0, r3, #22
 8001922:	d4ed      	bmi.n	8001900 <_vfiprintf_r+0x4c>
 8001924:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001926:	f7ff ff40 	bl	80017aa <__retarget_lock_release_recursive>
 800192a:	e7e9      	b.n	8001900 <_vfiprintf_r+0x4c>
 800192c:	2300      	movs	r3, #0
 800192e:	9309      	str	r3, [sp, #36]	; 0x24
 8001930:	2320      	movs	r3, #32
 8001932:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001936:	f8cd 800c 	str.w	r8, [sp, #12]
 800193a:	2330      	movs	r3, #48	; 0x30
 800193c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001b00 <_vfiprintf_r+0x24c>
 8001940:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001944:	f04f 0901 	mov.w	r9, #1
 8001948:	4623      	mov	r3, r4
 800194a:	469a      	mov	sl, r3
 800194c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001950:	b10a      	cbz	r2, 8001956 <_vfiprintf_r+0xa2>
 8001952:	2a25      	cmp	r2, #37	; 0x25
 8001954:	d1f9      	bne.n	800194a <_vfiprintf_r+0x96>
 8001956:	ebba 0b04 	subs.w	fp, sl, r4
 800195a:	d00b      	beq.n	8001974 <_vfiprintf_r+0xc0>
 800195c:	465b      	mov	r3, fp
 800195e:	4622      	mov	r2, r4
 8001960:	4629      	mov	r1, r5
 8001962:	4630      	mov	r0, r6
 8001964:	f7ff ff93 	bl	800188e <__sfputs_r>
 8001968:	3001      	adds	r0, #1
 800196a:	f000 80aa 	beq.w	8001ac2 <_vfiprintf_r+0x20e>
 800196e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001970:	445a      	add	r2, fp
 8001972:	9209      	str	r2, [sp, #36]	; 0x24
 8001974:	f89a 3000 	ldrb.w	r3, [sl]
 8001978:	2b00      	cmp	r3, #0
 800197a:	f000 80a2 	beq.w	8001ac2 <_vfiprintf_r+0x20e>
 800197e:	2300      	movs	r3, #0
 8001980:	f04f 32ff 	mov.w	r2, #4294967295
 8001984:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001988:	f10a 0a01 	add.w	sl, sl, #1
 800198c:	9304      	str	r3, [sp, #16]
 800198e:	9307      	str	r3, [sp, #28]
 8001990:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001994:	931a      	str	r3, [sp, #104]	; 0x68
 8001996:	4654      	mov	r4, sl
 8001998:	2205      	movs	r2, #5
 800199a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800199e:	4858      	ldr	r0, [pc, #352]	; (8001b00 <_vfiprintf_r+0x24c>)
 80019a0:	f7fe fc1e 	bl	80001e0 <memchr>
 80019a4:	9a04      	ldr	r2, [sp, #16]
 80019a6:	b9d8      	cbnz	r0, 80019e0 <_vfiprintf_r+0x12c>
 80019a8:	06d1      	lsls	r1, r2, #27
 80019aa:	bf44      	itt	mi
 80019ac:	2320      	movmi	r3, #32
 80019ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80019b2:	0713      	lsls	r3, r2, #28
 80019b4:	bf44      	itt	mi
 80019b6:	232b      	movmi	r3, #43	; 0x2b
 80019b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80019bc:	f89a 3000 	ldrb.w	r3, [sl]
 80019c0:	2b2a      	cmp	r3, #42	; 0x2a
 80019c2:	d015      	beq.n	80019f0 <_vfiprintf_r+0x13c>
 80019c4:	9a07      	ldr	r2, [sp, #28]
 80019c6:	4654      	mov	r4, sl
 80019c8:	2000      	movs	r0, #0
 80019ca:	f04f 0c0a 	mov.w	ip, #10
 80019ce:	4621      	mov	r1, r4
 80019d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80019d4:	3b30      	subs	r3, #48	; 0x30
 80019d6:	2b09      	cmp	r3, #9
 80019d8:	d94e      	bls.n	8001a78 <_vfiprintf_r+0x1c4>
 80019da:	b1b0      	cbz	r0, 8001a0a <_vfiprintf_r+0x156>
 80019dc:	9207      	str	r2, [sp, #28]
 80019de:	e014      	b.n	8001a0a <_vfiprintf_r+0x156>
 80019e0:	eba0 0308 	sub.w	r3, r0, r8
 80019e4:	fa09 f303 	lsl.w	r3, r9, r3
 80019e8:	4313      	orrs	r3, r2
 80019ea:	9304      	str	r3, [sp, #16]
 80019ec:	46a2      	mov	sl, r4
 80019ee:	e7d2      	b.n	8001996 <_vfiprintf_r+0xe2>
 80019f0:	9b03      	ldr	r3, [sp, #12]
 80019f2:	1d19      	adds	r1, r3, #4
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	9103      	str	r1, [sp, #12]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	bfbb      	ittet	lt
 80019fc:	425b      	neglt	r3, r3
 80019fe:	f042 0202 	orrlt.w	r2, r2, #2
 8001a02:	9307      	strge	r3, [sp, #28]
 8001a04:	9307      	strlt	r3, [sp, #28]
 8001a06:	bfb8      	it	lt
 8001a08:	9204      	strlt	r2, [sp, #16]
 8001a0a:	7823      	ldrb	r3, [r4, #0]
 8001a0c:	2b2e      	cmp	r3, #46	; 0x2e
 8001a0e:	d10c      	bne.n	8001a2a <_vfiprintf_r+0x176>
 8001a10:	7863      	ldrb	r3, [r4, #1]
 8001a12:	2b2a      	cmp	r3, #42	; 0x2a
 8001a14:	d135      	bne.n	8001a82 <_vfiprintf_r+0x1ce>
 8001a16:	9b03      	ldr	r3, [sp, #12]
 8001a18:	1d1a      	adds	r2, r3, #4
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	9203      	str	r2, [sp, #12]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	bfb8      	it	lt
 8001a22:	f04f 33ff 	movlt.w	r3, #4294967295
 8001a26:	3402      	adds	r4, #2
 8001a28:	9305      	str	r3, [sp, #20]
 8001a2a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001b10 <_vfiprintf_r+0x25c>
 8001a2e:	7821      	ldrb	r1, [r4, #0]
 8001a30:	2203      	movs	r2, #3
 8001a32:	4650      	mov	r0, sl
 8001a34:	f7fe fbd4 	bl	80001e0 <memchr>
 8001a38:	b140      	cbz	r0, 8001a4c <_vfiprintf_r+0x198>
 8001a3a:	2340      	movs	r3, #64	; 0x40
 8001a3c:	eba0 000a 	sub.w	r0, r0, sl
 8001a40:	fa03 f000 	lsl.w	r0, r3, r0
 8001a44:	9b04      	ldr	r3, [sp, #16]
 8001a46:	4303      	orrs	r3, r0
 8001a48:	3401      	adds	r4, #1
 8001a4a:	9304      	str	r3, [sp, #16]
 8001a4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a50:	482c      	ldr	r0, [pc, #176]	; (8001b04 <_vfiprintf_r+0x250>)
 8001a52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001a56:	2206      	movs	r2, #6
 8001a58:	f7fe fbc2 	bl	80001e0 <memchr>
 8001a5c:	2800      	cmp	r0, #0
 8001a5e:	d03f      	beq.n	8001ae0 <_vfiprintf_r+0x22c>
 8001a60:	4b29      	ldr	r3, [pc, #164]	; (8001b08 <_vfiprintf_r+0x254>)
 8001a62:	bb1b      	cbnz	r3, 8001aac <_vfiprintf_r+0x1f8>
 8001a64:	9b03      	ldr	r3, [sp, #12]
 8001a66:	3307      	adds	r3, #7
 8001a68:	f023 0307 	bic.w	r3, r3, #7
 8001a6c:	3308      	adds	r3, #8
 8001a6e:	9303      	str	r3, [sp, #12]
 8001a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001a72:	443b      	add	r3, r7
 8001a74:	9309      	str	r3, [sp, #36]	; 0x24
 8001a76:	e767      	b.n	8001948 <_vfiprintf_r+0x94>
 8001a78:	fb0c 3202 	mla	r2, ip, r2, r3
 8001a7c:	460c      	mov	r4, r1
 8001a7e:	2001      	movs	r0, #1
 8001a80:	e7a5      	b.n	80019ce <_vfiprintf_r+0x11a>
 8001a82:	2300      	movs	r3, #0
 8001a84:	3401      	adds	r4, #1
 8001a86:	9305      	str	r3, [sp, #20]
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f04f 0c0a 	mov.w	ip, #10
 8001a8e:	4620      	mov	r0, r4
 8001a90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001a94:	3a30      	subs	r2, #48	; 0x30
 8001a96:	2a09      	cmp	r2, #9
 8001a98:	d903      	bls.n	8001aa2 <_vfiprintf_r+0x1ee>
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0c5      	beq.n	8001a2a <_vfiprintf_r+0x176>
 8001a9e:	9105      	str	r1, [sp, #20]
 8001aa0:	e7c3      	b.n	8001a2a <_vfiprintf_r+0x176>
 8001aa2:	fb0c 2101 	mla	r1, ip, r1, r2
 8001aa6:	4604      	mov	r4, r0
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e7f0      	b.n	8001a8e <_vfiprintf_r+0x1da>
 8001aac:	ab03      	add	r3, sp, #12
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	462a      	mov	r2, r5
 8001ab2:	4b16      	ldr	r3, [pc, #88]	; (8001b0c <_vfiprintf_r+0x258>)
 8001ab4:	a904      	add	r1, sp, #16
 8001ab6:	4630      	mov	r0, r6
 8001ab8:	f3af 8000 	nop.w
 8001abc:	4607      	mov	r7, r0
 8001abe:	1c78      	adds	r0, r7, #1
 8001ac0:	d1d6      	bne.n	8001a70 <_vfiprintf_r+0x1bc>
 8001ac2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001ac4:	07d9      	lsls	r1, r3, #31
 8001ac6:	d405      	bmi.n	8001ad4 <_vfiprintf_r+0x220>
 8001ac8:	89ab      	ldrh	r3, [r5, #12]
 8001aca:	059a      	lsls	r2, r3, #22
 8001acc:	d402      	bmi.n	8001ad4 <_vfiprintf_r+0x220>
 8001ace:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001ad0:	f7ff fe6b 	bl	80017aa <__retarget_lock_release_recursive>
 8001ad4:	89ab      	ldrh	r3, [r5, #12]
 8001ad6:	065b      	lsls	r3, r3, #25
 8001ad8:	f53f af12 	bmi.w	8001900 <_vfiprintf_r+0x4c>
 8001adc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001ade:	e711      	b.n	8001904 <_vfiprintf_r+0x50>
 8001ae0:	ab03      	add	r3, sp, #12
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	462a      	mov	r2, r5
 8001ae6:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <_vfiprintf_r+0x258>)
 8001ae8:	a904      	add	r1, sp, #16
 8001aea:	4630      	mov	r0, r6
 8001aec:	f000 f880 	bl	8001bf0 <_printf_i>
 8001af0:	e7e4      	b.n	8001abc <_vfiprintf_r+0x208>
 8001af2:	bf00      	nop
 8001af4:	080027b8 	.word	0x080027b8
 8001af8:	080027d8 	.word	0x080027d8
 8001afc:	08002798 	.word	0x08002798
 8001b00:	080027f8 	.word	0x080027f8
 8001b04:	08002802 	.word	0x08002802
 8001b08:	00000000 	.word	0x00000000
 8001b0c:	0800188f 	.word	0x0800188f
 8001b10:	080027fe 	.word	0x080027fe

08001b14 <_printf_common>:
 8001b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b18:	4616      	mov	r6, r2
 8001b1a:	4699      	mov	r9, r3
 8001b1c:	688a      	ldr	r2, [r1, #8]
 8001b1e:	690b      	ldr	r3, [r1, #16]
 8001b20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001b24:	4293      	cmp	r3, r2
 8001b26:	bfb8      	it	lt
 8001b28:	4613      	movlt	r3, r2
 8001b2a:	6033      	str	r3, [r6, #0]
 8001b2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001b30:	4607      	mov	r7, r0
 8001b32:	460c      	mov	r4, r1
 8001b34:	b10a      	cbz	r2, 8001b3a <_printf_common+0x26>
 8001b36:	3301      	adds	r3, #1
 8001b38:	6033      	str	r3, [r6, #0]
 8001b3a:	6823      	ldr	r3, [r4, #0]
 8001b3c:	0699      	lsls	r1, r3, #26
 8001b3e:	bf42      	ittt	mi
 8001b40:	6833      	ldrmi	r3, [r6, #0]
 8001b42:	3302      	addmi	r3, #2
 8001b44:	6033      	strmi	r3, [r6, #0]
 8001b46:	6825      	ldr	r5, [r4, #0]
 8001b48:	f015 0506 	ands.w	r5, r5, #6
 8001b4c:	d106      	bne.n	8001b5c <_printf_common+0x48>
 8001b4e:	f104 0a19 	add.w	sl, r4, #25
 8001b52:	68e3      	ldr	r3, [r4, #12]
 8001b54:	6832      	ldr	r2, [r6, #0]
 8001b56:	1a9b      	subs	r3, r3, r2
 8001b58:	42ab      	cmp	r3, r5
 8001b5a:	dc26      	bgt.n	8001baa <_printf_common+0x96>
 8001b5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001b60:	1e13      	subs	r3, r2, #0
 8001b62:	6822      	ldr	r2, [r4, #0]
 8001b64:	bf18      	it	ne
 8001b66:	2301      	movne	r3, #1
 8001b68:	0692      	lsls	r2, r2, #26
 8001b6a:	d42b      	bmi.n	8001bc4 <_printf_common+0xb0>
 8001b6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001b70:	4649      	mov	r1, r9
 8001b72:	4638      	mov	r0, r7
 8001b74:	47c0      	blx	r8
 8001b76:	3001      	adds	r0, #1
 8001b78:	d01e      	beq.n	8001bb8 <_printf_common+0xa4>
 8001b7a:	6823      	ldr	r3, [r4, #0]
 8001b7c:	68e5      	ldr	r5, [r4, #12]
 8001b7e:	6832      	ldr	r2, [r6, #0]
 8001b80:	f003 0306 	and.w	r3, r3, #6
 8001b84:	2b04      	cmp	r3, #4
 8001b86:	bf08      	it	eq
 8001b88:	1aad      	subeq	r5, r5, r2
 8001b8a:	68a3      	ldr	r3, [r4, #8]
 8001b8c:	6922      	ldr	r2, [r4, #16]
 8001b8e:	bf0c      	ite	eq
 8001b90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001b94:	2500      	movne	r5, #0
 8001b96:	4293      	cmp	r3, r2
 8001b98:	bfc4      	itt	gt
 8001b9a:	1a9b      	subgt	r3, r3, r2
 8001b9c:	18ed      	addgt	r5, r5, r3
 8001b9e:	2600      	movs	r6, #0
 8001ba0:	341a      	adds	r4, #26
 8001ba2:	42b5      	cmp	r5, r6
 8001ba4:	d11a      	bne.n	8001bdc <_printf_common+0xc8>
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	e008      	b.n	8001bbc <_printf_common+0xa8>
 8001baa:	2301      	movs	r3, #1
 8001bac:	4652      	mov	r2, sl
 8001bae:	4649      	mov	r1, r9
 8001bb0:	4638      	mov	r0, r7
 8001bb2:	47c0      	blx	r8
 8001bb4:	3001      	adds	r0, #1
 8001bb6:	d103      	bne.n	8001bc0 <_printf_common+0xac>
 8001bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bc0:	3501      	adds	r5, #1
 8001bc2:	e7c6      	b.n	8001b52 <_printf_common+0x3e>
 8001bc4:	18e1      	adds	r1, r4, r3
 8001bc6:	1c5a      	adds	r2, r3, #1
 8001bc8:	2030      	movs	r0, #48	; 0x30
 8001bca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001bce:	4422      	add	r2, r4
 8001bd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001bd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001bd8:	3302      	adds	r3, #2
 8001bda:	e7c7      	b.n	8001b6c <_printf_common+0x58>
 8001bdc:	2301      	movs	r3, #1
 8001bde:	4622      	mov	r2, r4
 8001be0:	4649      	mov	r1, r9
 8001be2:	4638      	mov	r0, r7
 8001be4:	47c0      	blx	r8
 8001be6:	3001      	adds	r0, #1
 8001be8:	d0e6      	beq.n	8001bb8 <_printf_common+0xa4>
 8001bea:	3601      	adds	r6, #1
 8001bec:	e7d9      	b.n	8001ba2 <_printf_common+0x8e>
	...

08001bf0 <_printf_i>:
 8001bf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001bf4:	460c      	mov	r4, r1
 8001bf6:	4691      	mov	r9, r2
 8001bf8:	7e27      	ldrb	r7, [r4, #24]
 8001bfa:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001bfc:	2f78      	cmp	r7, #120	; 0x78
 8001bfe:	4680      	mov	r8, r0
 8001c00:	469a      	mov	sl, r3
 8001c02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001c06:	d807      	bhi.n	8001c18 <_printf_i+0x28>
 8001c08:	2f62      	cmp	r7, #98	; 0x62
 8001c0a:	d80a      	bhi.n	8001c22 <_printf_i+0x32>
 8001c0c:	2f00      	cmp	r7, #0
 8001c0e:	f000 80d8 	beq.w	8001dc2 <_printf_i+0x1d2>
 8001c12:	2f58      	cmp	r7, #88	; 0x58
 8001c14:	f000 80a3 	beq.w	8001d5e <_printf_i+0x16e>
 8001c18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001c1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001c20:	e03a      	b.n	8001c98 <_printf_i+0xa8>
 8001c22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001c26:	2b15      	cmp	r3, #21
 8001c28:	d8f6      	bhi.n	8001c18 <_printf_i+0x28>
 8001c2a:	a001      	add	r0, pc, #4	; (adr r0, 8001c30 <_printf_i+0x40>)
 8001c2c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001c30:	08001c89 	.word	0x08001c89
 8001c34:	08001c9d 	.word	0x08001c9d
 8001c38:	08001c19 	.word	0x08001c19
 8001c3c:	08001c19 	.word	0x08001c19
 8001c40:	08001c19 	.word	0x08001c19
 8001c44:	08001c19 	.word	0x08001c19
 8001c48:	08001c9d 	.word	0x08001c9d
 8001c4c:	08001c19 	.word	0x08001c19
 8001c50:	08001c19 	.word	0x08001c19
 8001c54:	08001c19 	.word	0x08001c19
 8001c58:	08001c19 	.word	0x08001c19
 8001c5c:	08001da9 	.word	0x08001da9
 8001c60:	08001ccd 	.word	0x08001ccd
 8001c64:	08001d8b 	.word	0x08001d8b
 8001c68:	08001c19 	.word	0x08001c19
 8001c6c:	08001c19 	.word	0x08001c19
 8001c70:	08001dcb 	.word	0x08001dcb
 8001c74:	08001c19 	.word	0x08001c19
 8001c78:	08001ccd 	.word	0x08001ccd
 8001c7c:	08001c19 	.word	0x08001c19
 8001c80:	08001c19 	.word	0x08001c19
 8001c84:	08001d93 	.word	0x08001d93
 8001c88:	680b      	ldr	r3, [r1, #0]
 8001c8a:	1d1a      	adds	r2, r3, #4
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	600a      	str	r2, [r1, #0]
 8001c90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001c94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e0a3      	b.n	8001de4 <_printf_i+0x1f4>
 8001c9c:	6825      	ldr	r5, [r4, #0]
 8001c9e:	6808      	ldr	r0, [r1, #0]
 8001ca0:	062e      	lsls	r6, r5, #24
 8001ca2:	f100 0304 	add.w	r3, r0, #4
 8001ca6:	d50a      	bpl.n	8001cbe <_printf_i+0xce>
 8001ca8:	6805      	ldr	r5, [r0, #0]
 8001caa:	600b      	str	r3, [r1, #0]
 8001cac:	2d00      	cmp	r5, #0
 8001cae:	da03      	bge.n	8001cb8 <_printf_i+0xc8>
 8001cb0:	232d      	movs	r3, #45	; 0x2d
 8001cb2:	426d      	negs	r5, r5
 8001cb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001cb8:	485e      	ldr	r0, [pc, #376]	; (8001e34 <_printf_i+0x244>)
 8001cba:	230a      	movs	r3, #10
 8001cbc:	e019      	b.n	8001cf2 <_printf_i+0x102>
 8001cbe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001cc2:	6805      	ldr	r5, [r0, #0]
 8001cc4:	600b      	str	r3, [r1, #0]
 8001cc6:	bf18      	it	ne
 8001cc8:	b22d      	sxthne	r5, r5
 8001cca:	e7ef      	b.n	8001cac <_printf_i+0xbc>
 8001ccc:	680b      	ldr	r3, [r1, #0]
 8001cce:	6825      	ldr	r5, [r4, #0]
 8001cd0:	1d18      	adds	r0, r3, #4
 8001cd2:	6008      	str	r0, [r1, #0]
 8001cd4:	0628      	lsls	r0, r5, #24
 8001cd6:	d501      	bpl.n	8001cdc <_printf_i+0xec>
 8001cd8:	681d      	ldr	r5, [r3, #0]
 8001cda:	e002      	b.n	8001ce2 <_printf_i+0xf2>
 8001cdc:	0669      	lsls	r1, r5, #25
 8001cde:	d5fb      	bpl.n	8001cd8 <_printf_i+0xe8>
 8001ce0:	881d      	ldrh	r5, [r3, #0]
 8001ce2:	4854      	ldr	r0, [pc, #336]	; (8001e34 <_printf_i+0x244>)
 8001ce4:	2f6f      	cmp	r7, #111	; 0x6f
 8001ce6:	bf0c      	ite	eq
 8001ce8:	2308      	moveq	r3, #8
 8001cea:	230a      	movne	r3, #10
 8001cec:	2100      	movs	r1, #0
 8001cee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001cf2:	6866      	ldr	r6, [r4, #4]
 8001cf4:	60a6      	str	r6, [r4, #8]
 8001cf6:	2e00      	cmp	r6, #0
 8001cf8:	bfa2      	ittt	ge
 8001cfa:	6821      	ldrge	r1, [r4, #0]
 8001cfc:	f021 0104 	bicge.w	r1, r1, #4
 8001d00:	6021      	strge	r1, [r4, #0]
 8001d02:	b90d      	cbnz	r5, 8001d08 <_printf_i+0x118>
 8001d04:	2e00      	cmp	r6, #0
 8001d06:	d04d      	beq.n	8001da4 <_printf_i+0x1b4>
 8001d08:	4616      	mov	r6, r2
 8001d0a:	fbb5 f1f3 	udiv	r1, r5, r3
 8001d0e:	fb03 5711 	mls	r7, r3, r1, r5
 8001d12:	5dc7      	ldrb	r7, [r0, r7]
 8001d14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001d18:	462f      	mov	r7, r5
 8001d1a:	42bb      	cmp	r3, r7
 8001d1c:	460d      	mov	r5, r1
 8001d1e:	d9f4      	bls.n	8001d0a <_printf_i+0x11a>
 8001d20:	2b08      	cmp	r3, #8
 8001d22:	d10b      	bne.n	8001d3c <_printf_i+0x14c>
 8001d24:	6823      	ldr	r3, [r4, #0]
 8001d26:	07df      	lsls	r7, r3, #31
 8001d28:	d508      	bpl.n	8001d3c <_printf_i+0x14c>
 8001d2a:	6923      	ldr	r3, [r4, #16]
 8001d2c:	6861      	ldr	r1, [r4, #4]
 8001d2e:	4299      	cmp	r1, r3
 8001d30:	bfde      	ittt	le
 8001d32:	2330      	movle	r3, #48	; 0x30
 8001d34:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001d38:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001d3c:	1b92      	subs	r2, r2, r6
 8001d3e:	6122      	str	r2, [r4, #16]
 8001d40:	f8cd a000 	str.w	sl, [sp]
 8001d44:	464b      	mov	r3, r9
 8001d46:	aa03      	add	r2, sp, #12
 8001d48:	4621      	mov	r1, r4
 8001d4a:	4640      	mov	r0, r8
 8001d4c:	f7ff fee2 	bl	8001b14 <_printf_common>
 8001d50:	3001      	adds	r0, #1
 8001d52:	d14c      	bne.n	8001dee <_printf_i+0x1fe>
 8001d54:	f04f 30ff 	mov.w	r0, #4294967295
 8001d58:	b004      	add	sp, #16
 8001d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d5e:	4835      	ldr	r0, [pc, #212]	; (8001e34 <_printf_i+0x244>)
 8001d60:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001d64:	6823      	ldr	r3, [r4, #0]
 8001d66:	680e      	ldr	r6, [r1, #0]
 8001d68:	061f      	lsls	r7, r3, #24
 8001d6a:	f856 5b04 	ldr.w	r5, [r6], #4
 8001d6e:	600e      	str	r6, [r1, #0]
 8001d70:	d514      	bpl.n	8001d9c <_printf_i+0x1ac>
 8001d72:	07d9      	lsls	r1, r3, #31
 8001d74:	bf44      	itt	mi
 8001d76:	f043 0320 	orrmi.w	r3, r3, #32
 8001d7a:	6023      	strmi	r3, [r4, #0]
 8001d7c:	b91d      	cbnz	r5, 8001d86 <_printf_i+0x196>
 8001d7e:	6823      	ldr	r3, [r4, #0]
 8001d80:	f023 0320 	bic.w	r3, r3, #32
 8001d84:	6023      	str	r3, [r4, #0]
 8001d86:	2310      	movs	r3, #16
 8001d88:	e7b0      	b.n	8001cec <_printf_i+0xfc>
 8001d8a:	6823      	ldr	r3, [r4, #0]
 8001d8c:	f043 0320 	orr.w	r3, r3, #32
 8001d90:	6023      	str	r3, [r4, #0]
 8001d92:	2378      	movs	r3, #120	; 0x78
 8001d94:	4828      	ldr	r0, [pc, #160]	; (8001e38 <_printf_i+0x248>)
 8001d96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001d9a:	e7e3      	b.n	8001d64 <_printf_i+0x174>
 8001d9c:	065e      	lsls	r6, r3, #25
 8001d9e:	bf48      	it	mi
 8001da0:	b2ad      	uxthmi	r5, r5
 8001da2:	e7e6      	b.n	8001d72 <_printf_i+0x182>
 8001da4:	4616      	mov	r6, r2
 8001da6:	e7bb      	b.n	8001d20 <_printf_i+0x130>
 8001da8:	680b      	ldr	r3, [r1, #0]
 8001daa:	6826      	ldr	r6, [r4, #0]
 8001dac:	6960      	ldr	r0, [r4, #20]
 8001dae:	1d1d      	adds	r5, r3, #4
 8001db0:	600d      	str	r5, [r1, #0]
 8001db2:	0635      	lsls	r5, r6, #24
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	d501      	bpl.n	8001dbc <_printf_i+0x1cc>
 8001db8:	6018      	str	r0, [r3, #0]
 8001dba:	e002      	b.n	8001dc2 <_printf_i+0x1d2>
 8001dbc:	0671      	lsls	r1, r6, #25
 8001dbe:	d5fb      	bpl.n	8001db8 <_printf_i+0x1c8>
 8001dc0:	8018      	strh	r0, [r3, #0]
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	6123      	str	r3, [r4, #16]
 8001dc6:	4616      	mov	r6, r2
 8001dc8:	e7ba      	b.n	8001d40 <_printf_i+0x150>
 8001dca:	680b      	ldr	r3, [r1, #0]
 8001dcc:	1d1a      	adds	r2, r3, #4
 8001dce:	600a      	str	r2, [r1, #0]
 8001dd0:	681e      	ldr	r6, [r3, #0]
 8001dd2:	6862      	ldr	r2, [r4, #4]
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	4630      	mov	r0, r6
 8001dd8:	f7fe fa02 	bl	80001e0 <memchr>
 8001ddc:	b108      	cbz	r0, 8001de2 <_printf_i+0x1f2>
 8001dde:	1b80      	subs	r0, r0, r6
 8001de0:	6060      	str	r0, [r4, #4]
 8001de2:	6863      	ldr	r3, [r4, #4]
 8001de4:	6123      	str	r3, [r4, #16]
 8001de6:	2300      	movs	r3, #0
 8001de8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001dec:	e7a8      	b.n	8001d40 <_printf_i+0x150>
 8001dee:	6923      	ldr	r3, [r4, #16]
 8001df0:	4632      	mov	r2, r6
 8001df2:	4649      	mov	r1, r9
 8001df4:	4640      	mov	r0, r8
 8001df6:	47d0      	blx	sl
 8001df8:	3001      	adds	r0, #1
 8001dfa:	d0ab      	beq.n	8001d54 <_printf_i+0x164>
 8001dfc:	6823      	ldr	r3, [r4, #0]
 8001dfe:	079b      	lsls	r3, r3, #30
 8001e00:	d413      	bmi.n	8001e2a <_printf_i+0x23a>
 8001e02:	68e0      	ldr	r0, [r4, #12]
 8001e04:	9b03      	ldr	r3, [sp, #12]
 8001e06:	4298      	cmp	r0, r3
 8001e08:	bfb8      	it	lt
 8001e0a:	4618      	movlt	r0, r3
 8001e0c:	e7a4      	b.n	8001d58 <_printf_i+0x168>
 8001e0e:	2301      	movs	r3, #1
 8001e10:	4632      	mov	r2, r6
 8001e12:	4649      	mov	r1, r9
 8001e14:	4640      	mov	r0, r8
 8001e16:	47d0      	blx	sl
 8001e18:	3001      	adds	r0, #1
 8001e1a:	d09b      	beq.n	8001d54 <_printf_i+0x164>
 8001e1c:	3501      	adds	r5, #1
 8001e1e:	68e3      	ldr	r3, [r4, #12]
 8001e20:	9903      	ldr	r1, [sp, #12]
 8001e22:	1a5b      	subs	r3, r3, r1
 8001e24:	42ab      	cmp	r3, r5
 8001e26:	dcf2      	bgt.n	8001e0e <_printf_i+0x21e>
 8001e28:	e7eb      	b.n	8001e02 <_printf_i+0x212>
 8001e2a:	2500      	movs	r5, #0
 8001e2c:	f104 0619 	add.w	r6, r4, #25
 8001e30:	e7f5      	b.n	8001e1e <_printf_i+0x22e>
 8001e32:	bf00      	nop
 8001e34:	08002809 	.word	0x08002809
 8001e38:	0800281a 	.word	0x0800281a

08001e3c <_sbrk_r>:
 8001e3c:	b538      	push	{r3, r4, r5, lr}
 8001e3e:	4d06      	ldr	r5, [pc, #24]	; (8001e58 <_sbrk_r+0x1c>)
 8001e40:	2300      	movs	r3, #0
 8001e42:	4604      	mov	r4, r0
 8001e44:	4608      	mov	r0, r1
 8001e46:	602b      	str	r3, [r5, #0]
 8001e48:	f7ff fae0 	bl	800140c <_sbrk>
 8001e4c:	1c43      	adds	r3, r0, #1
 8001e4e:	d102      	bne.n	8001e56 <_sbrk_r+0x1a>
 8001e50:	682b      	ldr	r3, [r5, #0]
 8001e52:	b103      	cbz	r3, 8001e56 <_sbrk_r+0x1a>
 8001e54:	6023      	str	r3, [r4, #0]
 8001e56:	bd38      	pop	{r3, r4, r5, pc}
 8001e58:	2000074c 	.word	0x2000074c

08001e5c <__sread>:
 8001e5c:	b510      	push	{r4, lr}
 8001e5e:	460c      	mov	r4, r1
 8001e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e64:	f000 fab4 	bl	80023d0 <_read_r>
 8001e68:	2800      	cmp	r0, #0
 8001e6a:	bfab      	itete	ge
 8001e6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001e6e:	89a3      	ldrhlt	r3, [r4, #12]
 8001e70:	181b      	addge	r3, r3, r0
 8001e72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001e76:	bfac      	ite	ge
 8001e78:	6563      	strge	r3, [r4, #84]	; 0x54
 8001e7a:	81a3      	strhlt	r3, [r4, #12]
 8001e7c:	bd10      	pop	{r4, pc}

08001e7e <__swrite>:
 8001e7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e82:	461f      	mov	r7, r3
 8001e84:	898b      	ldrh	r3, [r1, #12]
 8001e86:	05db      	lsls	r3, r3, #23
 8001e88:	4605      	mov	r5, r0
 8001e8a:	460c      	mov	r4, r1
 8001e8c:	4616      	mov	r6, r2
 8001e8e:	d505      	bpl.n	8001e9c <__swrite+0x1e>
 8001e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e94:	2302      	movs	r3, #2
 8001e96:	2200      	movs	r2, #0
 8001e98:	f000 f9c8 	bl	800222c <_lseek_r>
 8001e9c:	89a3      	ldrh	r3, [r4, #12]
 8001e9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001ea2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ea6:	81a3      	strh	r3, [r4, #12]
 8001ea8:	4632      	mov	r2, r6
 8001eaa:	463b      	mov	r3, r7
 8001eac:	4628      	mov	r0, r5
 8001eae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001eb2:	f000 b869 	b.w	8001f88 <_write_r>

08001eb6 <__sseek>:
 8001eb6:	b510      	push	{r4, lr}
 8001eb8:	460c      	mov	r4, r1
 8001eba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ebe:	f000 f9b5 	bl	800222c <_lseek_r>
 8001ec2:	1c43      	adds	r3, r0, #1
 8001ec4:	89a3      	ldrh	r3, [r4, #12]
 8001ec6:	bf15      	itete	ne
 8001ec8:	6560      	strne	r0, [r4, #84]	; 0x54
 8001eca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001ece:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001ed2:	81a3      	strheq	r3, [r4, #12]
 8001ed4:	bf18      	it	ne
 8001ed6:	81a3      	strhne	r3, [r4, #12]
 8001ed8:	bd10      	pop	{r4, pc}

08001eda <__sclose>:
 8001eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ede:	f000 b8d3 	b.w	8002088 <_close_r>
	...

08001ee4 <__swbuf_r>:
 8001ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ee6:	460e      	mov	r6, r1
 8001ee8:	4614      	mov	r4, r2
 8001eea:	4605      	mov	r5, r0
 8001eec:	b118      	cbz	r0, 8001ef6 <__swbuf_r+0x12>
 8001eee:	6983      	ldr	r3, [r0, #24]
 8001ef0:	b90b      	cbnz	r3, 8001ef6 <__swbuf_r+0x12>
 8001ef2:	f7ff fbbb 	bl	800166c <__sinit>
 8001ef6:	4b21      	ldr	r3, [pc, #132]	; (8001f7c <__swbuf_r+0x98>)
 8001ef8:	429c      	cmp	r4, r3
 8001efa:	d12b      	bne.n	8001f54 <__swbuf_r+0x70>
 8001efc:	686c      	ldr	r4, [r5, #4]
 8001efe:	69a3      	ldr	r3, [r4, #24]
 8001f00:	60a3      	str	r3, [r4, #8]
 8001f02:	89a3      	ldrh	r3, [r4, #12]
 8001f04:	071a      	lsls	r2, r3, #28
 8001f06:	d52f      	bpl.n	8001f68 <__swbuf_r+0x84>
 8001f08:	6923      	ldr	r3, [r4, #16]
 8001f0a:	b36b      	cbz	r3, 8001f68 <__swbuf_r+0x84>
 8001f0c:	6923      	ldr	r3, [r4, #16]
 8001f0e:	6820      	ldr	r0, [r4, #0]
 8001f10:	1ac0      	subs	r0, r0, r3
 8001f12:	6963      	ldr	r3, [r4, #20]
 8001f14:	b2f6      	uxtb	r6, r6
 8001f16:	4283      	cmp	r3, r0
 8001f18:	4637      	mov	r7, r6
 8001f1a:	dc04      	bgt.n	8001f26 <__swbuf_r+0x42>
 8001f1c:	4621      	mov	r1, r4
 8001f1e:	4628      	mov	r0, r5
 8001f20:	f000 f948 	bl	80021b4 <_fflush_r>
 8001f24:	bb30      	cbnz	r0, 8001f74 <__swbuf_r+0x90>
 8001f26:	68a3      	ldr	r3, [r4, #8]
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	60a3      	str	r3, [r4, #8]
 8001f2c:	6823      	ldr	r3, [r4, #0]
 8001f2e:	1c5a      	adds	r2, r3, #1
 8001f30:	6022      	str	r2, [r4, #0]
 8001f32:	701e      	strb	r6, [r3, #0]
 8001f34:	6963      	ldr	r3, [r4, #20]
 8001f36:	3001      	adds	r0, #1
 8001f38:	4283      	cmp	r3, r0
 8001f3a:	d004      	beq.n	8001f46 <__swbuf_r+0x62>
 8001f3c:	89a3      	ldrh	r3, [r4, #12]
 8001f3e:	07db      	lsls	r3, r3, #31
 8001f40:	d506      	bpl.n	8001f50 <__swbuf_r+0x6c>
 8001f42:	2e0a      	cmp	r6, #10
 8001f44:	d104      	bne.n	8001f50 <__swbuf_r+0x6c>
 8001f46:	4621      	mov	r1, r4
 8001f48:	4628      	mov	r0, r5
 8001f4a:	f000 f933 	bl	80021b4 <_fflush_r>
 8001f4e:	b988      	cbnz	r0, 8001f74 <__swbuf_r+0x90>
 8001f50:	4638      	mov	r0, r7
 8001f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f54:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <__swbuf_r+0x9c>)
 8001f56:	429c      	cmp	r4, r3
 8001f58:	d101      	bne.n	8001f5e <__swbuf_r+0x7a>
 8001f5a:	68ac      	ldr	r4, [r5, #8]
 8001f5c:	e7cf      	b.n	8001efe <__swbuf_r+0x1a>
 8001f5e:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <__swbuf_r+0xa0>)
 8001f60:	429c      	cmp	r4, r3
 8001f62:	bf08      	it	eq
 8001f64:	68ec      	ldreq	r4, [r5, #12]
 8001f66:	e7ca      	b.n	8001efe <__swbuf_r+0x1a>
 8001f68:	4621      	mov	r1, r4
 8001f6a:	4628      	mov	r0, r5
 8001f6c:	f000 f81e 	bl	8001fac <__swsetup_r>
 8001f70:	2800      	cmp	r0, #0
 8001f72:	d0cb      	beq.n	8001f0c <__swbuf_r+0x28>
 8001f74:	f04f 37ff 	mov.w	r7, #4294967295
 8001f78:	e7ea      	b.n	8001f50 <__swbuf_r+0x6c>
 8001f7a:	bf00      	nop
 8001f7c:	080027b8 	.word	0x080027b8
 8001f80:	080027d8 	.word	0x080027d8
 8001f84:	08002798 	.word	0x08002798

08001f88 <_write_r>:
 8001f88:	b538      	push	{r3, r4, r5, lr}
 8001f8a:	4d07      	ldr	r5, [pc, #28]	; (8001fa8 <_write_r+0x20>)
 8001f8c:	4604      	mov	r4, r0
 8001f8e:	4608      	mov	r0, r1
 8001f90:	4611      	mov	r1, r2
 8001f92:	2200      	movs	r2, #0
 8001f94:	602a      	str	r2, [r5, #0]
 8001f96:	461a      	mov	r2, r3
 8001f98:	f7ff f9e7 	bl	800136a <_write>
 8001f9c:	1c43      	adds	r3, r0, #1
 8001f9e:	d102      	bne.n	8001fa6 <_write_r+0x1e>
 8001fa0:	682b      	ldr	r3, [r5, #0]
 8001fa2:	b103      	cbz	r3, 8001fa6 <_write_r+0x1e>
 8001fa4:	6023      	str	r3, [r4, #0]
 8001fa6:	bd38      	pop	{r3, r4, r5, pc}
 8001fa8:	2000074c 	.word	0x2000074c

08001fac <__swsetup_r>:
 8001fac:	4b32      	ldr	r3, [pc, #200]	; (8002078 <__swsetup_r+0xcc>)
 8001fae:	b570      	push	{r4, r5, r6, lr}
 8001fb0:	681d      	ldr	r5, [r3, #0]
 8001fb2:	4606      	mov	r6, r0
 8001fb4:	460c      	mov	r4, r1
 8001fb6:	b125      	cbz	r5, 8001fc2 <__swsetup_r+0x16>
 8001fb8:	69ab      	ldr	r3, [r5, #24]
 8001fba:	b913      	cbnz	r3, 8001fc2 <__swsetup_r+0x16>
 8001fbc:	4628      	mov	r0, r5
 8001fbe:	f7ff fb55 	bl	800166c <__sinit>
 8001fc2:	4b2e      	ldr	r3, [pc, #184]	; (800207c <__swsetup_r+0xd0>)
 8001fc4:	429c      	cmp	r4, r3
 8001fc6:	d10f      	bne.n	8001fe8 <__swsetup_r+0x3c>
 8001fc8:	686c      	ldr	r4, [r5, #4]
 8001fca:	89a3      	ldrh	r3, [r4, #12]
 8001fcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001fd0:	0719      	lsls	r1, r3, #28
 8001fd2:	d42c      	bmi.n	800202e <__swsetup_r+0x82>
 8001fd4:	06dd      	lsls	r5, r3, #27
 8001fd6:	d411      	bmi.n	8001ffc <__swsetup_r+0x50>
 8001fd8:	2309      	movs	r3, #9
 8001fda:	6033      	str	r3, [r6, #0]
 8001fdc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001fe0:	81a3      	strh	r3, [r4, #12]
 8001fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe6:	e03e      	b.n	8002066 <__swsetup_r+0xba>
 8001fe8:	4b25      	ldr	r3, [pc, #148]	; (8002080 <__swsetup_r+0xd4>)
 8001fea:	429c      	cmp	r4, r3
 8001fec:	d101      	bne.n	8001ff2 <__swsetup_r+0x46>
 8001fee:	68ac      	ldr	r4, [r5, #8]
 8001ff0:	e7eb      	b.n	8001fca <__swsetup_r+0x1e>
 8001ff2:	4b24      	ldr	r3, [pc, #144]	; (8002084 <__swsetup_r+0xd8>)
 8001ff4:	429c      	cmp	r4, r3
 8001ff6:	bf08      	it	eq
 8001ff8:	68ec      	ldreq	r4, [r5, #12]
 8001ffa:	e7e6      	b.n	8001fca <__swsetup_r+0x1e>
 8001ffc:	0758      	lsls	r0, r3, #29
 8001ffe:	d512      	bpl.n	8002026 <__swsetup_r+0x7a>
 8002000:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002002:	b141      	cbz	r1, 8002016 <__swsetup_r+0x6a>
 8002004:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002008:	4299      	cmp	r1, r3
 800200a:	d002      	beq.n	8002012 <__swsetup_r+0x66>
 800200c:	4630      	mov	r0, r6
 800200e:	f000 f98f 	bl	8002330 <_free_r>
 8002012:	2300      	movs	r3, #0
 8002014:	6363      	str	r3, [r4, #52]	; 0x34
 8002016:	89a3      	ldrh	r3, [r4, #12]
 8002018:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800201c:	81a3      	strh	r3, [r4, #12]
 800201e:	2300      	movs	r3, #0
 8002020:	6063      	str	r3, [r4, #4]
 8002022:	6923      	ldr	r3, [r4, #16]
 8002024:	6023      	str	r3, [r4, #0]
 8002026:	89a3      	ldrh	r3, [r4, #12]
 8002028:	f043 0308 	orr.w	r3, r3, #8
 800202c:	81a3      	strh	r3, [r4, #12]
 800202e:	6923      	ldr	r3, [r4, #16]
 8002030:	b94b      	cbnz	r3, 8002046 <__swsetup_r+0x9a>
 8002032:	89a3      	ldrh	r3, [r4, #12]
 8002034:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800203c:	d003      	beq.n	8002046 <__swsetup_r+0x9a>
 800203e:	4621      	mov	r1, r4
 8002040:	4630      	mov	r0, r6
 8002042:	f000 f929 	bl	8002298 <__smakebuf_r>
 8002046:	89a0      	ldrh	r0, [r4, #12]
 8002048:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800204c:	f010 0301 	ands.w	r3, r0, #1
 8002050:	d00a      	beq.n	8002068 <__swsetup_r+0xbc>
 8002052:	2300      	movs	r3, #0
 8002054:	60a3      	str	r3, [r4, #8]
 8002056:	6963      	ldr	r3, [r4, #20]
 8002058:	425b      	negs	r3, r3
 800205a:	61a3      	str	r3, [r4, #24]
 800205c:	6923      	ldr	r3, [r4, #16]
 800205e:	b943      	cbnz	r3, 8002072 <__swsetup_r+0xc6>
 8002060:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002064:	d1ba      	bne.n	8001fdc <__swsetup_r+0x30>
 8002066:	bd70      	pop	{r4, r5, r6, pc}
 8002068:	0781      	lsls	r1, r0, #30
 800206a:	bf58      	it	pl
 800206c:	6963      	ldrpl	r3, [r4, #20]
 800206e:	60a3      	str	r3, [r4, #8]
 8002070:	e7f4      	b.n	800205c <__swsetup_r+0xb0>
 8002072:	2000      	movs	r0, #0
 8002074:	e7f7      	b.n	8002066 <__swsetup_r+0xba>
 8002076:	bf00      	nop
 8002078:	2000002c 	.word	0x2000002c
 800207c:	080027b8 	.word	0x080027b8
 8002080:	080027d8 	.word	0x080027d8
 8002084:	08002798 	.word	0x08002798

08002088 <_close_r>:
 8002088:	b538      	push	{r3, r4, r5, lr}
 800208a:	4d06      	ldr	r5, [pc, #24]	; (80020a4 <_close_r+0x1c>)
 800208c:	2300      	movs	r3, #0
 800208e:	4604      	mov	r4, r0
 8002090:	4608      	mov	r0, r1
 8002092:	602b      	str	r3, [r5, #0]
 8002094:	f7ff f985 	bl	80013a2 <_close>
 8002098:	1c43      	adds	r3, r0, #1
 800209a:	d102      	bne.n	80020a2 <_close_r+0x1a>
 800209c:	682b      	ldr	r3, [r5, #0]
 800209e:	b103      	cbz	r3, 80020a2 <_close_r+0x1a>
 80020a0:	6023      	str	r3, [r4, #0]
 80020a2:	bd38      	pop	{r3, r4, r5, pc}
 80020a4:	2000074c 	.word	0x2000074c

080020a8 <__sflush_r>:
 80020a8:	898a      	ldrh	r2, [r1, #12]
 80020aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020ae:	4605      	mov	r5, r0
 80020b0:	0710      	lsls	r0, r2, #28
 80020b2:	460c      	mov	r4, r1
 80020b4:	d458      	bmi.n	8002168 <__sflush_r+0xc0>
 80020b6:	684b      	ldr	r3, [r1, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	dc05      	bgt.n	80020c8 <__sflush_r+0x20>
 80020bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80020be:	2b00      	cmp	r3, #0
 80020c0:	dc02      	bgt.n	80020c8 <__sflush_r+0x20>
 80020c2:	2000      	movs	r0, #0
 80020c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80020ca:	2e00      	cmp	r6, #0
 80020cc:	d0f9      	beq.n	80020c2 <__sflush_r+0x1a>
 80020ce:	2300      	movs	r3, #0
 80020d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80020d4:	682f      	ldr	r7, [r5, #0]
 80020d6:	602b      	str	r3, [r5, #0]
 80020d8:	d032      	beq.n	8002140 <__sflush_r+0x98>
 80020da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80020dc:	89a3      	ldrh	r3, [r4, #12]
 80020de:	075a      	lsls	r2, r3, #29
 80020e0:	d505      	bpl.n	80020ee <__sflush_r+0x46>
 80020e2:	6863      	ldr	r3, [r4, #4]
 80020e4:	1ac0      	subs	r0, r0, r3
 80020e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80020e8:	b10b      	cbz	r3, 80020ee <__sflush_r+0x46>
 80020ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020ec:	1ac0      	subs	r0, r0, r3
 80020ee:	2300      	movs	r3, #0
 80020f0:	4602      	mov	r2, r0
 80020f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80020f4:	6a21      	ldr	r1, [r4, #32]
 80020f6:	4628      	mov	r0, r5
 80020f8:	47b0      	blx	r6
 80020fa:	1c43      	adds	r3, r0, #1
 80020fc:	89a3      	ldrh	r3, [r4, #12]
 80020fe:	d106      	bne.n	800210e <__sflush_r+0x66>
 8002100:	6829      	ldr	r1, [r5, #0]
 8002102:	291d      	cmp	r1, #29
 8002104:	d82c      	bhi.n	8002160 <__sflush_r+0xb8>
 8002106:	4a2a      	ldr	r2, [pc, #168]	; (80021b0 <__sflush_r+0x108>)
 8002108:	40ca      	lsrs	r2, r1
 800210a:	07d6      	lsls	r6, r2, #31
 800210c:	d528      	bpl.n	8002160 <__sflush_r+0xb8>
 800210e:	2200      	movs	r2, #0
 8002110:	6062      	str	r2, [r4, #4]
 8002112:	04d9      	lsls	r1, r3, #19
 8002114:	6922      	ldr	r2, [r4, #16]
 8002116:	6022      	str	r2, [r4, #0]
 8002118:	d504      	bpl.n	8002124 <__sflush_r+0x7c>
 800211a:	1c42      	adds	r2, r0, #1
 800211c:	d101      	bne.n	8002122 <__sflush_r+0x7a>
 800211e:	682b      	ldr	r3, [r5, #0]
 8002120:	b903      	cbnz	r3, 8002124 <__sflush_r+0x7c>
 8002122:	6560      	str	r0, [r4, #84]	; 0x54
 8002124:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002126:	602f      	str	r7, [r5, #0]
 8002128:	2900      	cmp	r1, #0
 800212a:	d0ca      	beq.n	80020c2 <__sflush_r+0x1a>
 800212c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002130:	4299      	cmp	r1, r3
 8002132:	d002      	beq.n	800213a <__sflush_r+0x92>
 8002134:	4628      	mov	r0, r5
 8002136:	f000 f8fb 	bl	8002330 <_free_r>
 800213a:	2000      	movs	r0, #0
 800213c:	6360      	str	r0, [r4, #52]	; 0x34
 800213e:	e7c1      	b.n	80020c4 <__sflush_r+0x1c>
 8002140:	6a21      	ldr	r1, [r4, #32]
 8002142:	2301      	movs	r3, #1
 8002144:	4628      	mov	r0, r5
 8002146:	47b0      	blx	r6
 8002148:	1c41      	adds	r1, r0, #1
 800214a:	d1c7      	bne.n	80020dc <__sflush_r+0x34>
 800214c:	682b      	ldr	r3, [r5, #0]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0c4      	beq.n	80020dc <__sflush_r+0x34>
 8002152:	2b1d      	cmp	r3, #29
 8002154:	d001      	beq.n	800215a <__sflush_r+0xb2>
 8002156:	2b16      	cmp	r3, #22
 8002158:	d101      	bne.n	800215e <__sflush_r+0xb6>
 800215a:	602f      	str	r7, [r5, #0]
 800215c:	e7b1      	b.n	80020c2 <__sflush_r+0x1a>
 800215e:	89a3      	ldrh	r3, [r4, #12]
 8002160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002164:	81a3      	strh	r3, [r4, #12]
 8002166:	e7ad      	b.n	80020c4 <__sflush_r+0x1c>
 8002168:	690f      	ldr	r7, [r1, #16]
 800216a:	2f00      	cmp	r7, #0
 800216c:	d0a9      	beq.n	80020c2 <__sflush_r+0x1a>
 800216e:	0793      	lsls	r3, r2, #30
 8002170:	680e      	ldr	r6, [r1, #0]
 8002172:	bf08      	it	eq
 8002174:	694b      	ldreq	r3, [r1, #20]
 8002176:	600f      	str	r7, [r1, #0]
 8002178:	bf18      	it	ne
 800217a:	2300      	movne	r3, #0
 800217c:	eba6 0807 	sub.w	r8, r6, r7
 8002180:	608b      	str	r3, [r1, #8]
 8002182:	f1b8 0f00 	cmp.w	r8, #0
 8002186:	dd9c      	ble.n	80020c2 <__sflush_r+0x1a>
 8002188:	6a21      	ldr	r1, [r4, #32]
 800218a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800218c:	4643      	mov	r3, r8
 800218e:	463a      	mov	r2, r7
 8002190:	4628      	mov	r0, r5
 8002192:	47b0      	blx	r6
 8002194:	2800      	cmp	r0, #0
 8002196:	dc06      	bgt.n	80021a6 <__sflush_r+0xfe>
 8002198:	89a3      	ldrh	r3, [r4, #12]
 800219a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800219e:	81a3      	strh	r3, [r4, #12]
 80021a0:	f04f 30ff 	mov.w	r0, #4294967295
 80021a4:	e78e      	b.n	80020c4 <__sflush_r+0x1c>
 80021a6:	4407      	add	r7, r0
 80021a8:	eba8 0800 	sub.w	r8, r8, r0
 80021ac:	e7e9      	b.n	8002182 <__sflush_r+0xda>
 80021ae:	bf00      	nop
 80021b0:	20400001 	.word	0x20400001

080021b4 <_fflush_r>:
 80021b4:	b538      	push	{r3, r4, r5, lr}
 80021b6:	690b      	ldr	r3, [r1, #16]
 80021b8:	4605      	mov	r5, r0
 80021ba:	460c      	mov	r4, r1
 80021bc:	b913      	cbnz	r3, 80021c4 <_fflush_r+0x10>
 80021be:	2500      	movs	r5, #0
 80021c0:	4628      	mov	r0, r5
 80021c2:	bd38      	pop	{r3, r4, r5, pc}
 80021c4:	b118      	cbz	r0, 80021ce <_fflush_r+0x1a>
 80021c6:	6983      	ldr	r3, [r0, #24]
 80021c8:	b90b      	cbnz	r3, 80021ce <_fflush_r+0x1a>
 80021ca:	f7ff fa4f 	bl	800166c <__sinit>
 80021ce:	4b14      	ldr	r3, [pc, #80]	; (8002220 <_fflush_r+0x6c>)
 80021d0:	429c      	cmp	r4, r3
 80021d2:	d11b      	bne.n	800220c <_fflush_r+0x58>
 80021d4:	686c      	ldr	r4, [r5, #4]
 80021d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d0ef      	beq.n	80021be <_fflush_r+0xa>
 80021de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80021e0:	07d0      	lsls	r0, r2, #31
 80021e2:	d404      	bmi.n	80021ee <_fflush_r+0x3a>
 80021e4:	0599      	lsls	r1, r3, #22
 80021e6:	d402      	bmi.n	80021ee <_fflush_r+0x3a>
 80021e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80021ea:	f7ff fadd 	bl	80017a8 <__retarget_lock_acquire_recursive>
 80021ee:	4628      	mov	r0, r5
 80021f0:	4621      	mov	r1, r4
 80021f2:	f7ff ff59 	bl	80020a8 <__sflush_r>
 80021f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80021f8:	07da      	lsls	r2, r3, #31
 80021fa:	4605      	mov	r5, r0
 80021fc:	d4e0      	bmi.n	80021c0 <_fflush_r+0xc>
 80021fe:	89a3      	ldrh	r3, [r4, #12]
 8002200:	059b      	lsls	r3, r3, #22
 8002202:	d4dd      	bmi.n	80021c0 <_fflush_r+0xc>
 8002204:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002206:	f7ff fad0 	bl	80017aa <__retarget_lock_release_recursive>
 800220a:	e7d9      	b.n	80021c0 <_fflush_r+0xc>
 800220c:	4b05      	ldr	r3, [pc, #20]	; (8002224 <_fflush_r+0x70>)
 800220e:	429c      	cmp	r4, r3
 8002210:	d101      	bne.n	8002216 <_fflush_r+0x62>
 8002212:	68ac      	ldr	r4, [r5, #8]
 8002214:	e7df      	b.n	80021d6 <_fflush_r+0x22>
 8002216:	4b04      	ldr	r3, [pc, #16]	; (8002228 <_fflush_r+0x74>)
 8002218:	429c      	cmp	r4, r3
 800221a:	bf08      	it	eq
 800221c:	68ec      	ldreq	r4, [r5, #12]
 800221e:	e7da      	b.n	80021d6 <_fflush_r+0x22>
 8002220:	080027b8 	.word	0x080027b8
 8002224:	080027d8 	.word	0x080027d8
 8002228:	08002798 	.word	0x08002798

0800222c <_lseek_r>:
 800222c:	b538      	push	{r3, r4, r5, lr}
 800222e:	4d07      	ldr	r5, [pc, #28]	; (800224c <_lseek_r+0x20>)
 8002230:	4604      	mov	r4, r0
 8002232:	4608      	mov	r0, r1
 8002234:	4611      	mov	r1, r2
 8002236:	2200      	movs	r2, #0
 8002238:	602a      	str	r2, [r5, #0]
 800223a:	461a      	mov	r2, r3
 800223c:	f7ff f8d8 	bl	80013f0 <_lseek>
 8002240:	1c43      	adds	r3, r0, #1
 8002242:	d102      	bne.n	800224a <_lseek_r+0x1e>
 8002244:	682b      	ldr	r3, [r5, #0]
 8002246:	b103      	cbz	r3, 800224a <_lseek_r+0x1e>
 8002248:	6023      	str	r3, [r4, #0]
 800224a:	bd38      	pop	{r3, r4, r5, pc}
 800224c:	2000074c 	.word	0x2000074c

08002250 <__swhatbuf_r>:
 8002250:	b570      	push	{r4, r5, r6, lr}
 8002252:	460e      	mov	r6, r1
 8002254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002258:	2900      	cmp	r1, #0
 800225a:	b096      	sub	sp, #88	; 0x58
 800225c:	4614      	mov	r4, r2
 800225e:	461d      	mov	r5, r3
 8002260:	da07      	bge.n	8002272 <__swhatbuf_r+0x22>
 8002262:	2300      	movs	r3, #0
 8002264:	602b      	str	r3, [r5, #0]
 8002266:	89b3      	ldrh	r3, [r6, #12]
 8002268:	061a      	lsls	r2, r3, #24
 800226a:	d410      	bmi.n	800228e <__swhatbuf_r+0x3e>
 800226c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002270:	e00e      	b.n	8002290 <__swhatbuf_r+0x40>
 8002272:	466a      	mov	r2, sp
 8002274:	f000 f8be 	bl	80023f4 <_fstat_r>
 8002278:	2800      	cmp	r0, #0
 800227a:	dbf2      	blt.n	8002262 <__swhatbuf_r+0x12>
 800227c:	9a01      	ldr	r2, [sp, #4]
 800227e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002282:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002286:	425a      	negs	r2, r3
 8002288:	415a      	adcs	r2, r3
 800228a:	602a      	str	r2, [r5, #0]
 800228c:	e7ee      	b.n	800226c <__swhatbuf_r+0x1c>
 800228e:	2340      	movs	r3, #64	; 0x40
 8002290:	2000      	movs	r0, #0
 8002292:	6023      	str	r3, [r4, #0]
 8002294:	b016      	add	sp, #88	; 0x58
 8002296:	bd70      	pop	{r4, r5, r6, pc}

08002298 <__smakebuf_r>:
 8002298:	898b      	ldrh	r3, [r1, #12]
 800229a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800229c:	079d      	lsls	r5, r3, #30
 800229e:	4606      	mov	r6, r0
 80022a0:	460c      	mov	r4, r1
 80022a2:	d507      	bpl.n	80022b4 <__smakebuf_r+0x1c>
 80022a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80022a8:	6023      	str	r3, [r4, #0]
 80022aa:	6123      	str	r3, [r4, #16]
 80022ac:	2301      	movs	r3, #1
 80022ae:	6163      	str	r3, [r4, #20]
 80022b0:	b002      	add	sp, #8
 80022b2:	bd70      	pop	{r4, r5, r6, pc}
 80022b4:	ab01      	add	r3, sp, #4
 80022b6:	466a      	mov	r2, sp
 80022b8:	f7ff ffca 	bl	8002250 <__swhatbuf_r>
 80022bc:	9900      	ldr	r1, [sp, #0]
 80022be:	4605      	mov	r5, r0
 80022c0:	4630      	mov	r0, r6
 80022c2:	f7ff fa73 	bl	80017ac <_malloc_r>
 80022c6:	b948      	cbnz	r0, 80022dc <__smakebuf_r+0x44>
 80022c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022cc:	059a      	lsls	r2, r3, #22
 80022ce:	d4ef      	bmi.n	80022b0 <__smakebuf_r+0x18>
 80022d0:	f023 0303 	bic.w	r3, r3, #3
 80022d4:	f043 0302 	orr.w	r3, r3, #2
 80022d8:	81a3      	strh	r3, [r4, #12]
 80022da:	e7e3      	b.n	80022a4 <__smakebuf_r+0xc>
 80022dc:	4b0d      	ldr	r3, [pc, #52]	; (8002314 <__smakebuf_r+0x7c>)
 80022de:	62b3      	str	r3, [r6, #40]	; 0x28
 80022e0:	89a3      	ldrh	r3, [r4, #12]
 80022e2:	6020      	str	r0, [r4, #0]
 80022e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022e8:	81a3      	strh	r3, [r4, #12]
 80022ea:	9b00      	ldr	r3, [sp, #0]
 80022ec:	6163      	str	r3, [r4, #20]
 80022ee:	9b01      	ldr	r3, [sp, #4]
 80022f0:	6120      	str	r0, [r4, #16]
 80022f2:	b15b      	cbz	r3, 800230c <__smakebuf_r+0x74>
 80022f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80022f8:	4630      	mov	r0, r6
 80022fa:	f000 f88d 	bl	8002418 <_isatty_r>
 80022fe:	b128      	cbz	r0, 800230c <__smakebuf_r+0x74>
 8002300:	89a3      	ldrh	r3, [r4, #12]
 8002302:	f023 0303 	bic.w	r3, r3, #3
 8002306:	f043 0301 	orr.w	r3, r3, #1
 800230a:	81a3      	strh	r3, [r4, #12]
 800230c:	89a0      	ldrh	r0, [r4, #12]
 800230e:	4305      	orrs	r5, r0
 8002310:	81a5      	strh	r5, [r4, #12]
 8002312:	e7cd      	b.n	80022b0 <__smakebuf_r+0x18>
 8002314:	08001605 	.word	0x08001605

08002318 <__malloc_lock>:
 8002318:	4801      	ldr	r0, [pc, #4]	; (8002320 <__malloc_lock+0x8>)
 800231a:	f7ff ba45 	b.w	80017a8 <__retarget_lock_acquire_recursive>
 800231e:	bf00      	nop
 8002320:	20000744 	.word	0x20000744

08002324 <__malloc_unlock>:
 8002324:	4801      	ldr	r0, [pc, #4]	; (800232c <__malloc_unlock+0x8>)
 8002326:	f7ff ba40 	b.w	80017aa <__retarget_lock_release_recursive>
 800232a:	bf00      	nop
 800232c:	20000744 	.word	0x20000744

08002330 <_free_r>:
 8002330:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002332:	2900      	cmp	r1, #0
 8002334:	d048      	beq.n	80023c8 <_free_r+0x98>
 8002336:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800233a:	9001      	str	r0, [sp, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	f1a1 0404 	sub.w	r4, r1, #4
 8002342:	bfb8      	it	lt
 8002344:	18e4      	addlt	r4, r4, r3
 8002346:	f7ff ffe7 	bl	8002318 <__malloc_lock>
 800234a:	4a20      	ldr	r2, [pc, #128]	; (80023cc <_free_r+0x9c>)
 800234c:	9801      	ldr	r0, [sp, #4]
 800234e:	6813      	ldr	r3, [r2, #0]
 8002350:	4615      	mov	r5, r2
 8002352:	b933      	cbnz	r3, 8002362 <_free_r+0x32>
 8002354:	6063      	str	r3, [r4, #4]
 8002356:	6014      	str	r4, [r2, #0]
 8002358:	b003      	add	sp, #12
 800235a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800235e:	f7ff bfe1 	b.w	8002324 <__malloc_unlock>
 8002362:	42a3      	cmp	r3, r4
 8002364:	d90b      	bls.n	800237e <_free_r+0x4e>
 8002366:	6821      	ldr	r1, [r4, #0]
 8002368:	1862      	adds	r2, r4, r1
 800236a:	4293      	cmp	r3, r2
 800236c:	bf04      	itt	eq
 800236e:	681a      	ldreq	r2, [r3, #0]
 8002370:	685b      	ldreq	r3, [r3, #4]
 8002372:	6063      	str	r3, [r4, #4]
 8002374:	bf04      	itt	eq
 8002376:	1852      	addeq	r2, r2, r1
 8002378:	6022      	streq	r2, [r4, #0]
 800237a:	602c      	str	r4, [r5, #0]
 800237c:	e7ec      	b.n	8002358 <_free_r+0x28>
 800237e:	461a      	mov	r2, r3
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	b10b      	cbz	r3, 8002388 <_free_r+0x58>
 8002384:	42a3      	cmp	r3, r4
 8002386:	d9fa      	bls.n	800237e <_free_r+0x4e>
 8002388:	6811      	ldr	r1, [r2, #0]
 800238a:	1855      	adds	r5, r2, r1
 800238c:	42a5      	cmp	r5, r4
 800238e:	d10b      	bne.n	80023a8 <_free_r+0x78>
 8002390:	6824      	ldr	r4, [r4, #0]
 8002392:	4421      	add	r1, r4
 8002394:	1854      	adds	r4, r2, r1
 8002396:	42a3      	cmp	r3, r4
 8002398:	6011      	str	r1, [r2, #0]
 800239a:	d1dd      	bne.n	8002358 <_free_r+0x28>
 800239c:	681c      	ldr	r4, [r3, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	6053      	str	r3, [r2, #4]
 80023a2:	4421      	add	r1, r4
 80023a4:	6011      	str	r1, [r2, #0]
 80023a6:	e7d7      	b.n	8002358 <_free_r+0x28>
 80023a8:	d902      	bls.n	80023b0 <_free_r+0x80>
 80023aa:	230c      	movs	r3, #12
 80023ac:	6003      	str	r3, [r0, #0]
 80023ae:	e7d3      	b.n	8002358 <_free_r+0x28>
 80023b0:	6825      	ldr	r5, [r4, #0]
 80023b2:	1961      	adds	r1, r4, r5
 80023b4:	428b      	cmp	r3, r1
 80023b6:	bf04      	itt	eq
 80023b8:	6819      	ldreq	r1, [r3, #0]
 80023ba:	685b      	ldreq	r3, [r3, #4]
 80023bc:	6063      	str	r3, [r4, #4]
 80023be:	bf04      	itt	eq
 80023c0:	1949      	addeq	r1, r1, r5
 80023c2:	6021      	streq	r1, [r4, #0]
 80023c4:	6054      	str	r4, [r2, #4]
 80023c6:	e7c7      	b.n	8002358 <_free_r+0x28>
 80023c8:	b003      	add	sp, #12
 80023ca:	bd30      	pop	{r4, r5, pc}
 80023cc:	200005dc 	.word	0x200005dc

080023d0 <_read_r>:
 80023d0:	b538      	push	{r3, r4, r5, lr}
 80023d2:	4d07      	ldr	r5, [pc, #28]	; (80023f0 <_read_r+0x20>)
 80023d4:	4604      	mov	r4, r0
 80023d6:	4608      	mov	r0, r1
 80023d8:	4611      	mov	r1, r2
 80023da:	2200      	movs	r2, #0
 80023dc:	602a      	str	r2, [r5, #0]
 80023de:	461a      	mov	r2, r3
 80023e0:	f7fe ffa6 	bl	8001330 <_read>
 80023e4:	1c43      	adds	r3, r0, #1
 80023e6:	d102      	bne.n	80023ee <_read_r+0x1e>
 80023e8:	682b      	ldr	r3, [r5, #0]
 80023ea:	b103      	cbz	r3, 80023ee <_read_r+0x1e>
 80023ec:	6023      	str	r3, [r4, #0]
 80023ee:	bd38      	pop	{r3, r4, r5, pc}
 80023f0:	2000074c 	.word	0x2000074c

080023f4 <_fstat_r>:
 80023f4:	b538      	push	{r3, r4, r5, lr}
 80023f6:	4d07      	ldr	r5, [pc, #28]	; (8002414 <_fstat_r+0x20>)
 80023f8:	2300      	movs	r3, #0
 80023fa:	4604      	mov	r4, r0
 80023fc:	4608      	mov	r0, r1
 80023fe:	4611      	mov	r1, r2
 8002400:	602b      	str	r3, [r5, #0]
 8002402:	f7fe ffda 	bl	80013ba <_fstat>
 8002406:	1c43      	adds	r3, r0, #1
 8002408:	d102      	bne.n	8002410 <_fstat_r+0x1c>
 800240a:	682b      	ldr	r3, [r5, #0]
 800240c:	b103      	cbz	r3, 8002410 <_fstat_r+0x1c>
 800240e:	6023      	str	r3, [r4, #0]
 8002410:	bd38      	pop	{r3, r4, r5, pc}
 8002412:	bf00      	nop
 8002414:	2000074c 	.word	0x2000074c

08002418 <_isatty_r>:
 8002418:	b538      	push	{r3, r4, r5, lr}
 800241a:	4d06      	ldr	r5, [pc, #24]	; (8002434 <_isatty_r+0x1c>)
 800241c:	2300      	movs	r3, #0
 800241e:	4604      	mov	r4, r0
 8002420:	4608      	mov	r0, r1
 8002422:	602b      	str	r3, [r5, #0]
 8002424:	f7fe ffd9 	bl	80013da <_isatty>
 8002428:	1c43      	adds	r3, r0, #1
 800242a:	d102      	bne.n	8002432 <_isatty_r+0x1a>
 800242c:	682b      	ldr	r3, [r5, #0]
 800242e:	b103      	cbz	r3, 8002432 <_isatty_r+0x1a>
 8002430:	6023      	str	r3, [r4, #0]
 8002432:	bd38      	pop	{r3, r4, r5, pc}
 8002434:	2000074c 	.word	0x2000074c

08002438 <_init>:
 8002438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800243a:	bf00      	nop
 800243c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800243e:	bc08      	pop	{r3}
 8002440:	469e      	mov	lr, r3
 8002442:	4770      	bx	lr

08002444 <_fini>:
 8002444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002446:	bf00      	nop
 8002448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800244a:	bc08      	pop	{r3}
 800244c:	469e      	mov	lr, r3
 800244e:	4770      	bx	lr
