
5_A6_lib_making_a_call.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a54  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a4  08001bf4  08001bf4  00011bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e98  08001e98  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08001e98  08001e98  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e98  08001e98  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e98  08001e98  00011e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e9c  08001e9c  00011e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08001ea0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000470  20000070  08001f10  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e0  08001f10  000204e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000045b3  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c87  00000000  00000000  00024653  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000250  00000000  00000000  000252e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001e8  00000000  00000000  00025530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ff9c  00000000  00000000  00025718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002c87  00000000  00000000  000356b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055a9d  00000000  00000000  0003833b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0008ddd8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000fe8  00000000  00000000  0008de2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001bdc 	.word	0x08001bdc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08001bdc 	.word	0x08001bdc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__io_putchar>:

static uint16_t compute_uart_bd(uint32_t periph_clk,uint32_t baudrate);
static void debug_uart_write(int ch);

int __io_putchar(int ch)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	debug_uart_write(ch);
 8000288:	6878      	ldr	r0, [r7, #4]
 800028a:	f000 f913 	bl	80004b4 <debug_uart_write>
	return ch;
 800028e:	687b      	ldr	r3, [r7, #4]
}
 8000290:	4618      	mov	r0, r3
 8000292:	3708      	adds	r7, #8
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}

08000298 <debug_uart_init>:

void debug_uart_init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	/*1. Enable clock access to UART pins' GPIO port (GPIOA)*/
	RCC->AHB1ENR |= GPIOAEN;
 800029c:	4b36      	ldr	r3, [pc, #216]	; (8000378 <debug_uart_init+0xe0>)
 800029e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a0:	4a35      	ldr	r2, [pc, #212]	; (8000378 <debug_uart_init+0xe0>)
 80002a2:	f043 0301 	orr.w	r3, r3, #1
 80002a6:	6313      	str	r3, [r2, #48]	; 0x30

	/*2. Set PA2 mode to alternate function*/
	GPIOA->MODER &= ~(1U<<4);
 80002a8:	4b34      	ldr	r3, [pc, #208]	; (800037c <debug_uart_init+0xe4>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a33      	ldr	r2, [pc, #204]	; (800037c <debug_uart_init+0xe4>)
 80002ae:	f023 0310 	bic.w	r3, r3, #16
 80002b2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 80002b4:	4b31      	ldr	r3, [pc, #196]	; (800037c <debug_uart_init+0xe4>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a30      	ldr	r2, [pc, #192]	; (800037c <debug_uart_init+0xe4>)
 80002ba:	f043 0320 	orr.w	r3, r3, #32
 80002be:	6013      	str	r3, [r2, #0]

	/*3. Set PA3 mode to alternate function*/
	GPIOA->MODER &= ~(1U<<6);
 80002c0:	4b2e      	ldr	r3, [pc, #184]	; (800037c <debug_uart_init+0xe4>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a2d      	ldr	r2, [pc, #180]	; (800037c <debug_uart_init+0xe4>)
 80002c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80002ca:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 80002cc:	4b2b      	ldr	r3, [pc, #172]	; (800037c <debug_uart_init+0xe4>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a2a      	ldr	r2, [pc, #168]	; (800037c <debug_uart_init+0xe4>)
 80002d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002d6:	6013      	str	r3, [r2, #0]

	/*4.Set PA2 alternate function type to UART2_TX (AF07)*/
	GPIOA->AFR[0] |=(1U<<8);
 80002d8:	4b28      	ldr	r3, [pc, #160]	; (800037c <debug_uart_init+0xe4>)
 80002da:	6a1b      	ldr	r3, [r3, #32]
 80002dc:	4a27      	ldr	r2, [pc, #156]	; (800037c <debug_uart_init+0xe4>)
 80002de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002e2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 80002e4:	4b25      	ldr	r3, [pc, #148]	; (800037c <debug_uart_init+0xe4>)
 80002e6:	6a1b      	ldr	r3, [r3, #32]
 80002e8:	4a24      	ldr	r2, [pc, #144]	; (800037c <debug_uart_init+0xe4>)
 80002ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002ee:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 80002f0:	4b22      	ldr	r3, [pc, #136]	; (800037c <debug_uart_init+0xe4>)
 80002f2:	6a1b      	ldr	r3, [r3, #32]
 80002f4:	4a21      	ldr	r2, [pc, #132]	; (800037c <debug_uart_init+0xe4>)
 80002f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002fa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 80002fc:	4b1f      	ldr	r3, [pc, #124]	; (800037c <debug_uart_init+0xe4>)
 80002fe:	6a1b      	ldr	r3, [r3, #32]
 8000300:	4a1e      	ldr	r2, [pc, #120]	; (800037c <debug_uart_init+0xe4>)
 8000302:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000306:	6213      	str	r3, [r2, #32]

	/*4.Set PA3 alternate function type to UART2_RX (AF07)*/
	GPIOA->AFR[0] |=(1U<<12);
 8000308:	4b1c      	ldr	r3, [pc, #112]	; (800037c <debug_uart_init+0xe4>)
 800030a:	6a1b      	ldr	r3, [r3, #32]
 800030c:	4a1b      	ldr	r2, [pc, #108]	; (800037c <debug_uart_init+0xe4>)
 800030e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000312:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<13);
 8000314:	4b19      	ldr	r3, [pc, #100]	; (800037c <debug_uart_init+0xe4>)
 8000316:	6a1b      	ldr	r3, [r3, #32]
 8000318:	4a18      	ldr	r2, [pc, #96]	; (800037c <debug_uart_init+0xe4>)
 800031a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800031e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<14);
 8000320:	4b16      	ldr	r3, [pc, #88]	; (800037c <debug_uart_init+0xe4>)
 8000322:	6a1b      	ldr	r3, [r3, #32]
 8000324:	4a15      	ldr	r2, [pc, #84]	; (800037c <debug_uart_init+0xe4>)
 8000326:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800032a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<15);
 800032c:	4b13      	ldr	r3, [pc, #76]	; (800037c <debug_uart_init+0xe4>)
 800032e:	6a1b      	ldr	r3, [r3, #32]
 8000330:	4a12      	ldr	r2, [pc, #72]	; (800037c <debug_uart_init+0xe4>)
 8000332:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000336:	6213      	str	r3, [r2, #32]

	/*Configure UART module*/

	/*5. Enable clock access to the UART module*/
	RCC->APB1ENR |= UART2EN;
 8000338:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <debug_uart_init+0xe0>)
 800033a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800033c:	4a0e      	ldr	r2, [pc, #56]	; (8000378 <debug_uart_init+0xe0>)
 800033e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000342:	6413      	str	r3, [r2, #64]	; 0x40

	/*6. Disable UART module*/
	USART2->CR1 &=~CR1_UE;
 8000344:	4b0e      	ldr	r3, [pc, #56]	; (8000380 <debug_uart_init+0xe8>)
 8000346:	68db      	ldr	r3, [r3, #12]
 8000348:	4a0d      	ldr	r2, [pc, #52]	; (8000380 <debug_uart_init+0xe8>)
 800034a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800034e:	60d3      	str	r3, [r2, #12]

	/*7. Set UART baudrate*/
	USART2->BRR =  compute_uart_bd(SYS_FREQ,UART_BAUDRATE);
 8000350:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000354:	480b      	ldr	r0, [pc, #44]	; (8000384 <debug_uart_init+0xec>)
 8000356:	f000 f8c5 	bl	80004e4 <compute_uart_bd>
 800035a:	4603      	mov	r3, r0
 800035c:	461a      	mov	r2, r3
 800035e:	4b08      	ldr	r3, [pc, #32]	; (8000380 <debug_uart_init+0xe8>)
 8000360:	609a      	str	r2, [r3, #8]

    /*8. Set trnasfer direction*/
	USART2->CR1 = (CR1_TE | CR1_RE);
 8000362:	4b07      	ldr	r3, [pc, #28]	; (8000380 <debug_uart_init+0xe8>)
 8000364:	220c      	movs	r2, #12
 8000366:	60da      	str	r2, [r3, #12]

	/*9. Enable UART module*/
	USART2->CR1 |= CR1_UE;
 8000368:	4b05      	ldr	r3, [pc, #20]	; (8000380 <debug_uart_init+0xe8>)
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	4a04      	ldr	r2, [pc, #16]	; (8000380 <debug_uart_init+0xe8>)
 800036e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000372:	60d3      	str	r3, [r2, #12]


}
 8000374:	bf00      	nop
 8000376:	bd80      	pop	{r7, pc}
 8000378:	40023800 	.word	0x40023800
 800037c:	40020000 	.word	0x40020000
 8000380:	40004400 	.word	0x40004400
 8000384:	00f42400 	.word	0x00f42400

08000388 <a6_uart_init>:
 * A6 TX Pin   ==> PA10(RX)
 * A6 RX Pin   ==> PA9(TX)
 * */

void a6_uart_init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
	/*1. Enable clock access to UART pins' GPIO port (GPIOA)*/
	RCC->AHB1ENR |= GPIOAEN;
 800038c:	4b39      	ldr	r3, [pc, #228]	; (8000474 <a6_uart_init+0xec>)
 800038e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000390:	4a38      	ldr	r2, [pc, #224]	; (8000474 <a6_uart_init+0xec>)
 8000392:	f043 0301 	orr.w	r3, r3, #1
 8000396:	6313      	str	r3, [r2, #48]	; 0x30

	/*2. Set PA9 mode to alternate function*/
	GPIOA->MODER &= ~(1U<<18);
 8000398:	4b37      	ldr	r3, [pc, #220]	; (8000478 <a6_uart_init+0xf0>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a36      	ldr	r2, [pc, #216]	; (8000478 <a6_uart_init+0xf0>)
 800039e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80003a2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<19);
 80003a4:	4b34      	ldr	r3, [pc, #208]	; (8000478 <a6_uart_init+0xf0>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a33      	ldr	r2, [pc, #204]	; (8000478 <a6_uart_init+0xf0>)
 80003aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003ae:	6013      	str	r3, [r2, #0]

	/*3. Set PA10 mode to alternate function*/
	GPIOA->MODER &= ~(1U<<20);
 80003b0:	4b31      	ldr	r3, [pc, #196]	; (8000478 <a6_uart_init+0xf0>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a30      	ldr	r2, [pc, #192]	; (8000478 <a6_uart_init+0xf0>)
 80003b6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80003ba:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<21);
 80003bc:	4b2e      	ldr	r3, [pc, #184]	; (8000478 <a6_uart_init+0xf0>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a2d      	ldr	r2, [pc, #180]	; (8000478 <a6_uart_init+0xf0>)
 80003c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003c6:	6013      	str	r3, [r2, #0]

	/*4.Set PA9 alternate function type to UART1_TX (AF07)*/
	GPIOA->AFR[1] |=(1U<<4);
 80003c8:	4b2b      	ldr	r3, [pc, #172]	; (8000478 <a6_uart_init+0xf0>)
 80003ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003cc:	4a2a      	ldr	r2, [pc, #168]	; (8000478 <a6_uart_init+0xf0>)
 80003ce:	f043 0310 	orr.w	r3, r3, #16
 80003d2:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |=(1U<<5);
 80003d4:	4b28      	ldr	r3, [pc, #160]	; (8000478 <a6_uart_init+0xf0>)
 80003d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003d8:	4a27      	ldr	r2, [pc, #156]	; (8000478 <a6_uart_init+0xf0>)
 80003da:	f043 0320 	orr.w	r3, r3, #32
 80003de:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |=(1U<<6);
 80003e0:	4b25      	ldr	r3, [pc, #148]	; (8000478 <a6_uart_init+0xf0>)
 80003e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003e4:	4a24      	ldr	r2, [pc, #144]	; (8000478 <a6_uart_init+0xf0>)
 80003e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003ea:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] &= ~(1U<<7);
 80003ec:	4b22      	ldr	r3, [pc, #136]	; (8000478 <a6_uart_init+0xf0>)
 80003ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003f0:	4a21      	ldr	r2, [pc, #132]	; (8000478 <a6_uart_init+0xf0>)
 80003f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80003f6:	6253      	str	r3, [r2, #36]	; 0x24

	/*4.Set PA10 alternate function type to UART1_RX (AF07)*/
	GPIOA->AFR[1] |=(1U<<8);
 80003f8:	4b1f      	ldr	r3, [pc, #124]	; (8000478 <a6_uart_init+0xf0>)
 80003fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003fc:	4a1e      	ldr	r2, [pc, #120]	; (8000478 <a6_uart_init+0xf0>)
 80003fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000402:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |=(1U<<9);
 8000404:	4b1c      	ldr	r3, [pc, #112]	; (8000478 <a6_uart_init+0xf0>)
 8000406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000408:	4a1b      	ldr	r2, [pc, #108]	; (8000478 <a6_uart_init+0xf0>)
 800040a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800040e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |=(1U<<10);
 8000410:	4b19      	ldr	r3, [pc, #100]	; (8000478 <a6_uart_init+0xf0>)
 8000412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000414:	4a18      	ldr	r2, [pc, #96]	; (8000478 <a6_uart_init+0xf0>)
 8000416:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800041a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] &= ~(1U<<11);
 800041c:	4b16      	ldr	r3, [pc, #88]	; (8000478 <a6_uart_init+0xf0>)
 800041e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000420:	4a15      	ldr	r2, [pc, #84]	; (8000478 <a6_uart_init+0xf0>)
 8000422:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000426:	6253      	str	r3, [r2, #36]	; 0x24

	/*Configure UART module*/

    /*5. Enable clock access to the UART module*/
     RCC->APB2ENR |= UART1EN;
 8000428:	4b12      	ldr	r3, [pc, #72]	; (8000474 <a6_uart_init+0xec>)
 800042a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800042c:	4a11      	ldr	r2, [pc, #68]	; (8000474 <a6_uart_init+0xec>)
 800042e:	f043 0310 	orr.w	r3, r3, #16
 8000432:	6453      	str	r3, [r2, #68]	; 0x44

 	/*6. Disable UART module*/
 	 USART1->CR1 &=~CR1_UE;
 8000434:	4b11      	ldr	r3, [pc, #68]	; (800047c <a6_uart_init+0xf4>)
 8000436:	68db      	ldr	r3, [r3, #12]
 8000438:	4a10      	ldr	r2, [pc, #64]	; (800047c <a6_uart_init+0xf4>)
 800043a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800043e:	60d3      	str	r3, [r2, #12]

 	/*7. Set UART baudrate*/
 	USART1->BRR =  compute_uart_bd(SYS_FREQ,UART_BAUDRATE);
 8000440:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000444:	480e      	ldr	r0, [pc, #56]	; (8000480 <a6_uart_init+0xf8>)
 8000446:	f000 f84d 	bl	80004e4 <compute_uart_bd>
 800044a:	4603      	mov	r3, r0
 800044c:	461a      	mov	r2, r3
 800044e:	4b0b      	ldr	r3, [pc, #44]	; (800047c <a6_uart_init+0xf4>)
 8000450:	609a      	str	r2, [r3, #8]

    /*8. Set trnasfer direction*/
	USART1->CR1 = (CR1_TE | CR1_RE);
 8000452:	4b0a      	ldr	r3, [pc, #40]	; (800047c <a6_uart_init+0xf4>)
 8000454:	220c      	movs	r2, #12
 8000456:	60da      	str	r2, [r3, #12]

	/*9. Enable RXNEIE/*/

	USART1->CR1 |= CR1_RXNEIE;
 8000458:	4b08      	ldr	r3, [pc, #32]	; (800047c <a6_uart_init+0xf4>)
 800045a:	68db      	ldr	r3, [r3, #12]
 800045c:	4a07      	ldr	r2, [pc, #28]	; (800047c <a6_uart_init+0xf4>)
 800045e:	f043 0320 	orr.w	r3, r3, #32
 8000462:	60d3      	str	r3, [r2, #12]


 	/*6. Disable UART module*/
 	USART1->CR1 |= CR1_UE;
 8000464:	4b05      	ldr	r3, [pc, #20]	; (800047c <a6_uart_init+0xf4>)
 8000466:	68db      	ldr	r3, [r3, #12]
 8000468:	4a04      	ldr	r2, [pc, #16]	; (800047c <a6_uart_init+0xf4>)
 800046a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800046e:	60d3      	str	r3, [r2, #12]


}
 8000470:	bf00      	nop
 8000472:	bd80      	pop	{r7, pc}
 8000474:	40023800 	.word	0x40023800
 8000478:	40020000 	.word	0x40020000
 800047c:	40011000 	.word	0x40011000
 8000480:	00f42400 	.word	0x00f42400

08000484 <a6_uart_write_char>:

void a6_uart_write_char(char ch)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	71fb      	strb	r3, [r7, #7]
	/*Make sure the transmit data register is empty*/
	while(!(USART1->SR & SR_TXE)){}
 800048e:	bf00      	nop
 8000490:	4b07      	ldr	r3, [pc, #28]	; (80004b0 <a6_uart_write_char+0x2c>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000498:	2b00      	cmp	r3, #0
 800049a:	d0f9      	beq.n	8000490 <a6_uart_write_char+0xc>

	/*Write to transmit data register*/
	USART1->DR = (ch & 0xFF);
 800049c:	4a04      	ldr	r2, [pc, #16]	; (80004b0 <a6_uart_write_char+0x2c>)
 800049e:	79fb      	ldrb	r3, [r7, #7]
 80004a0:	6053      	str	r3, [r2, #4]

}
 80004a2:	bf00      	nop
 80004a4:	370c      	adds	r7, #12
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	40011000 	.word	0x40011000

080004b4 <debug_uart_write>:

static void debug_uart_write(int ch)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}
 80004bc:	bf00      	nop
 80004be:	4b08      	ldr	r3, [pc, #32]	; (80004e0 <debug_uart_write+0x2c>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d0f9      	beq.n	80004be <debug_uart_write+0xa>

	/*Write to transmit data register*/
	USART2->DR = (ch & 0xFF);
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4a04      	ldr	r2, [pc, #16]	; (80004e0 <debug_uart_write+0x2c>)
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	6053      	str	r3, [r2, #4]
}
 80004d2:	bf00      	nop
 80004d4:	370c      	adds	r7, #12
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	40004400 	.word	0x40004400

080004e4 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t periph_clk,uint32_t baudrate)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	085a      	lsrs	r2, r3, #1
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	441a      	add	r2, r3
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80004fc:	b29b      	uxth	r3, r3
}
 80004fe:	4618      	mov	r0, r3
 8000500:	370c      	adds	r7, #12
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
	...

0800050c <systick_delay_ms>:


void systick_delay_ms(uint32_t delay)
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
	/*1.Reload with number of clocks per millisecond*/
	SysTick->LOAD = SYSTICK_LOAD_VAL;
 8000514:	4b11      	ldr	r3, [pc, #68]	; (800055c <systick_delay_ms+0x50>)
 8000516:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800051a:	605a      	str	r2, [r3, #4]

	/*2. Clear systick current value register*/
	SysTick->VAL = 0;
 800051c:	4b0f      	ldr	r3, [pc, #60]	; (800055c <systick_delay_ms+0x50>)
 800051e:	2200      	movs	r2, #0
 8000520:	609a      	str	r2, [r3, #8]

	/*3. Enable systick and select internal clk src*/
	SysTick->CTRL = (CTRL_CLKSRC | CTRL_ENABLE);
 8000522:	4b0e      	ldr	r3, [pc, #56]	; (800055c <systick_delay_ms+0x50>)
 8000524:	2205      	movs	r2, #5
 8000526:	601a      	str	r2, [r3, #0]

	for(int i = 0 ; i < delay ; i++  )
 8000528:	2300      	movs	r3, #0
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	e009      	b.n	8000542 <systick_delay_ms+0x36>
	{
		while((SysTick->CTRL & CTRL_COUNTFLAG) == 0){}
 800052e:	bf00      	nop
 8000530:	4b0a      	ldr	r3, [pc, #40]	; (800055c <systick_delay_ms+0x50>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000538:	2b00      	cmp	r3, #0
 800053a:	d0f9      	beq.n	8000530 <systick_delay_ms+0x24>
	for(int i = 0 ; i < delay ; i++  )
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	3301      	adds	r3, #1
 8000540:	60fb      	str	r3, [r7, #12]
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	429a      	cmp	r2, r3
 8000548:	d8f1      	bhi.n	800052e <systick_delay_ms+0x22>
	}

	SysTick->CTRL = 0;
 800054a:	4b04      	ldr	r3, [pc, #16]	; (800055c <systick_delay_ms+0x50>)
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
}
 8000550:	bf00      	nop
 8000552:	3714      	adds	r7, #20
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr
 800055c:	e000e010 	.word	0xe000e010

08000560 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800056a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800056e:	2b00      	cmp	r3, #0
 8000570:	db0b      	blt.n	800058a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	f003 021f 	and.w	r2, r3, #31
 8000578:	4907      	ldr	r1, [pc, #28]	; (8000598 <__NVIC_EnableIRQ+0x38>)
 800057a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800057e:	095b      	lsrs	r3, r3, #5
 8000580:	2001      	movs	r0, #1
 8000582:	fa00 f202 	lsl.w	r2, r0, r2
 8000586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	e000e100 	.word	0xe000e100

0800059c <a6_module_init>:
static uint8_t a6_network_reg(void);
static uint8_t a6_module_name(void);


void a6_module_init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	/*Enable fifos*/
	tx_fifo_init();
 80005a0:	f000 fa1c 	bl	80009dc <tx_fifo_init>
	rx_fifo_init();
 80005a4:	f000 fa8e 	bl	8000ac4 <rx_fifo_init>

	/*Enable a6 uart*/
	a6_uart_init();
 80005a8:	f7ff feee 	bl	8000388 <a6_uart_init>

	/*Enable debug uart*/
	debug_uart_init();
 80005ac:	f7ff fe74 	bl	8000298 <debug_uart_init>

	/*Initialize flags*/
	searching   = false;
 80005b0:	4b0a      	ldr	r3, [pc, #40]	; (80005dc <a6_module_init+0x40>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	701a      	strb	r2, [r3, #0]
	is_response	= false;
 80005b6:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <a6_module_init+0x44>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	701a      	strb	r2, [r3, #0]

	printf("A6 Initialization...\n\r");
 80005bc:	4809      	ldr	r0, [pc, #36]	; (80005e4 <a6_module_init+0x48>)
 80005be:	f000 fb9f 	bl	8000d00 <iprintf>

	/*Enable interrupt*/
	NVIC_EnableIRQ(USART1_IRQn);
 80005c2:	2025      	movs	r0, #37	; 0x25
 80005c4:	f7ff ffcc 	bl	8000560 <__NVIC_EnableIRQ>

	/*Run test command*/
	a6_startup_test();
 80005c8:	f000 f86a 	bl	80006a0 <a6_startup_test>

	/*Check signal quality*/
	a6_signal_quality();
 80005cc:	f000 f89a 	bl	8000704 <a6_signal_quality>

	/*Check network registration status*/
	a6_network_reg();
 80005d0:	f000 f8ca 	bl	8000768 <a6_network_reg>

	/*Get module name*/
	a6_module_name();
 80005d4:	f000 f8fa 	bl	80007cc <a6_module_name>
}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	2000008c 	.word	0x2000008c
 80005e0:	2000008d 	.word	0x2000008d
 80005e4:	08001bf4 	.word	0x08001bf4

080005e8 <a6_make_call>:

uint8_t a6_make_call(char * phone_number)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	uint8_t num_of_try  = MAX_NUM_OF_TRY;
 80005f0:	230a      	movs	r3, #10
 80005f2:	77fb      	strb	r3, [r7, #31]

	wait_resp("ok\r\n");
 80005f4:	4824      	ldr	r0, [pc, #144]	; (8000688 <a6_make_call+0xa0>)
 80005f6:	f000 f961 	bl	80008bc <wait_resp>

	while(num_of_try)
 80005fa:	e039      	b.n	8000670 <a6_make_call+0x88>
	{
	  char AT_CMD[16] = "ATD+44";
 80005fc:	4a23      	ldr	r2, [pc, #140]	; (800068c <a6_make_call+0xa4>)
 80005fe:	f107 030c 	add.w	r3, r7, #12
 8000602:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000606:	6018      	str	r0, [r3, #0]
 8000608:	3304      	adds	r3, #4
 800060a:	8019      	strh	r1, [r3, #0]
 800060c:	3302      	adds	r3, #2
 800060e:	0c0a      	lsrs	r2, r1, #16
 8000610:	701a      	strb	r2, [r3, #0]
 8000612:	f107 0313 	add.w	r3, r7, #19
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	721a      	strb	r2, [r3, #8]
	  char CR[]  = "\r\n";
 800061e:	4a1c      	ldr	r2, [pc, #112]	; (8000690 <a6_make_call+0xa8>)
 8000620:	f107 0308 	add.w	r3, r7, #8
 8000624:	6812      	ldr	r2, [r2, #0]
 8000626:	4611      	mov	r1, r2
 8000628:	8019      	strh	r1, [r3, #0]
 800062a:	3302      	adds	r3, #2
 800062c:	0c12      	lsrs	r2, r2, #16
 800062e:	701a      	strb	r2, [r3, #0]

	  strcat(AT_CMD,phone_number);
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	6879      	ldr	r1, [r7, #4]
 8000636:	4618      	mov	r0, r3
 8000638:	f000 fb7a 	bl	8000d30 <strcat>
	  strcat(AT_CMD,CR);
 800063c:	f107 0208 	add.w	r2, r7, #8
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	4611      	mov	r1, r2
 8000646:	4618      	mov	r0, r3
 8000648:	f000 fb72 	bl	8000d30 <strcat>

	  a6_send_cmd(AT_CMD);
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	4618      	mov	r0, r3
 8000652:	f000 f9a1 	bl	8000998 <a6_send_cmd>

	  if(is_response)
 8000656:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <a6_make_call+0xac>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	b2db      	uxtb	r3, r3
 800065c:	2b00      	cmp	r3, #0
 800065e:	d004      	beq.n	800066a <a6_make_call+0x82>
	  {
		 /*Success*/
		  printf("Call in progress...\n\r");
 8000660:	480d      	ldr	r0, [pc, #52]	; (8000698 <a6_make_call+0xb0>)
 8000662:	f000 fb4d 	bl	8000d00 <iprintf>
		  return 1;
 8000666:	2301      	movs	r3, #1
 8000668:	e009      	b.n	800067e <a6_make_call+0x96>
	  }
	  num_of_try--;
 800066a:	7ffb      	ldrb	r3, [r7, #31]
 800066c:	3b01      	subs	r3, #1
 800066e:	77fb      	strb	r3, [r7, #31]
	while(num_of_try)
 8000670:	7ffb      	ldrb	r3, [r7, #31]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d1c2      	bne.n	80005fc <a6_make_call+0x14>


	}
	printf("Call failed!....\n\r");
 8000676:	4809      	ldr	r0, [pc, #36]	; (800069c <a6_make_call+0xb4>)
 8000678:	f000 fb42 	bl	8000d00 <iprintf>

	return 0;
 800067c:	2300      	movs	r3, #0
}
 800067e:	4618      	mov	r0, r3
 8000680:	3720      	adds	r7, #32
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	08001c0c 	.word	0x08001c0c
 800068c:	08001c40 	.word	0x08001c40
 8000690:	08001c50 	.word	0x08001c50
 8000694:	2000008d 	.word	0x2000008d
 8000698:	08001c14 	.word	0x08001c14
 800069c:	08001c2c 	.word	0x08001c2c

080006a0 <a6_startup_test>:


}

static uint8_t a6_startup_test(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
	uint8_t num_of_try  = MAX_NUM_OF_TRY;
 80006a6:	230a      	movs	r3, #10
 80006a8:	71fb      	strb	r3, [r7, #7]
	wait_resp("ok\r\n");
 80006aa:	4811      	ldr	r0, [pc, #68]	; (80006f0 <a6_startup_test+0x50>)
 80006ac:	f000 f906 	bl	80008bc <wait_resp>

	while(num_of_try)
 80006b0:	e013      	b.n	80006da <a6_startup_test+0x3a>
	{
		a6_send_cmd("AT+COPN=?\r\n");
 80006b2:	4810      	ldr	r0, [pc, #64]	; (80006f4 <a6_startup_test+0x54>)
 80006b4:	f000 f970 	bl	8000998 <a6_send_cmd>
		systick_delay_ms(3000);
 80006b8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80006bc:	f7ff ff26 	bl	800050c <systick_delay_ms>

		if(is_response)
 80006c0:	4b0d      	ldr	r3, [pc, #52]	; (80006f8 <a6_startup_test+0x58>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d004      	beq.n	80006d4 <a6_startup_test+0x34>
		{
			/*Success*/
			printf("Test was successful.....\n\r");
 80006ca:	480c      	ldr	r0, [pc, #48]	; (80006fc <a6_startup_test+0x5c>)
 80006cc:	f000 fb18 	bl	8000d00 <iprintf>
			return 1;
 80006d0:	2301      	movs	r3, #1
 80006d2:	e009      	b.n	80006e8 <a6_startup_test+0x48>
		}
		num_of_try--;
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	3b01      	subs	r3, #1
 80006d8:	71fb      	strb	r3, [r7, #7]
	while(num_of_try)
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d1e8      	bne.n	80006b2 <a6_startup_test+0x12>
	}

	printf("ERR : Test failure....\n\r");
 80006e0:	4807      	ldr	r0, [pc, #28]	; (8000700 <a6_startup_test+0x60>)
 80006e2:	f000 fb0d 	bl	8000d00 <iprintf>
	return 0;
 80006e6:	2300      	movs	r3, #0

}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	08001c0c 	.word	0x08001c0c
 80006f4:	08001ca0 	.word	0x08001ca0
 80006f8:	2000008d 	.word	0x2000008d
 80006fc:	08001cac 	.word	0x08001cac
 8000700:	08001cc8 	.word	0x08001cc8

08000704 <a6_signal_quality>:

static uint8_t a6_signal_quality(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
	uint8_t num_of_try  = MAX_NUM_OF_TRY;
 800070a:	230a      	movs	r3, #10
 800070c:	71fb      	strb	r3, [r7, #7]
	wait_resp("ok\r\n");
 800070e:	4811      	ldr	r0, [pc, #68]	; (8000754 <a6_signal_quality+0x50>)
 8000710:	f000 f8d4 	bl	80008bc <wait_resp>

	while(num_of_try)
 8000714:	e013      	b.n	800073e <a6_signal_quality+0x3a>
	{
		a6_send_cmd("AT+CSQ=?\r\n");
 8000716:	4810      	ldr	r0, [pc, #64]	; (8000758 <a6_signal_quality+0x54>)
 8000718:	f000 f93e 	bl	8000998 <a6_send_cmd>
		systick_delay_ms(3000);
 800071c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000720:	f7ff fef4 	bl	800050c <systick_delay_ms>

		if(is_response)
 8000724:	4b0d      	ldr	r3, [pc, #52]	; (800075c <a6_signal_quality+0x58>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	b2db      	uxtb	r3, r3
 800072a:	2b00      	cmp	r3, #0
 800072c:	d004      	beq.n	8000738 <a6_signal_quality+0x34>
		{
			/*Success*/
			printf("Signal check successful.....\n\r");
 800072e:	480c      	ldr	r0, [pc, #48]	; (8000760 <a6_signal_quality+0x5c>)
 8000730:	f000 fae6 	bl	8000d00 <iprintf>
			return 1;
 8000734:	2301      	movs	r3, #1
 8000736:	e009      	b.n	800074c <a6_signal_quality+0x48>
		}
		num_of_try--;
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	3b01      	subs	r3, #1
 800073c:	71fb      	strb	r3, [r7, #7]
	while(num_of_try)
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d1e8      	bne.n	8000716 <a6_signal_quality+0x12>
	}

	printf("ERR : Signal check failure....\n\r");
 8000744:	4807      	ldr	r0, [pc, #28]	; (8000764 <a6_signal_quality+0x60>)
 8000746:	f000 fadb 	bl	8000d00 <iprintf>
	return 0;
 800074a:	2300      	movs	r3, #0

}
 800074c:	4618      	mov	r0, r3
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	08001c0c 	.word	0x08001c0c
 8000758:	08001ce4 	.word	0x08001ce4
 800075c:	2000008d 	.word	0x2000008d
 8000760:	08001cf0 	.word	0x08001cf0
 8000764:	08001d10 	.word	0x08001d10

08000768 <a6_network_reg>:


static uint8_t a6_network_reg(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
	uint8_t num_of_try  = MAX_NUM_OF_TRY;
 800076e:	230a      	movs	r3, #10
 8000770:	71fb      	strb	r3, [r7, #7]
	wait_resp("ok\r\n");
 8000772:	4811      	ldr	r0, [pc, #68]	; (80007b8 <a6_network_reg+0x50>)
 8000774:	f000 f8a2 	bl	80008bc <wait_resp>

	while(num_of_try)
 8000778:	e013      	b.n	80007a2 <a6_network_reg+0x3a>
	{
		a6_send_cmd("AT+CREG=?\r\n");
 800077a:	4810      	ldr	r0, [pc, #64]	; (80007bc <a6_network_reg+0x54>)
 800077c:	f000 f90c 	bl	8000998 <a6_send_cmd>
		systick_delay_ms(3000);
 8000780:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000784:	f7ff fec2 	bl	800050c <systick_delay_ms>

		if(is_response)
 8000788:	4b0d      	ldr	r3, [pc, #52]	; (80007c0 <a6_network_reg+0x58>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	b2db      	uxtb	r3, r3
 800078e:	2b00      	cmp	r3, #0
 8000790:	d004      	beq.n	800079c <a6_network_reg+0x34>
		{
			/*Success*/
			printf("Network registration status retrieved.....\n\r");
 8000792:	480c      	ldr	r0, [pc, #48]	; (80007c4 <a6_network_reg+0x5c>)
 8000794:	f000 fab4 	bl	8000d00 <iprintf>
			return 1;
 8000798:	2301      	movs	r3, #1
 800079a:	e009      	b.n	80007b0 <a6_network_reg+0x48>
		}
		num_of_try--;
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	3b01      	subs	r3, #1
 80007a0:	71fb      	strb	r3, [r7, #7]
	while(num_of_try)
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d1e8      	bne.n	800077a <a6_network_reg+0x12>
	}

	printf("ERR : Registration status retrieval error....\n\r");
 80007a8:	4807      	ldr	r0, [pc, #28]	; (80007c8 <a6_network_reg+0x60>)
 80007aa:	f000 faa9 	bl	8000d00 <iprintf>
	return 0;
 80007ae:	2300      	movs	r3, #0

}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	08001c0c 	.word	0x08001c0c
 80007bc:	08001d34 	.word	0x08001d34
 80007c0:	2000008d 	.word	0x2000008d
 80007c4:	08001d40 	.word	0x08001d40
 80007c8:	08001d70 	.word	0x08001d70

080007cc <a6_module_name>:

static uint8_t a6_module_name(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
	uint8_t num_of_try  = MAX_NUM_OF_TRY;
 80007d2:	230a      	movs	r3, #10
 80007d4:	71fb      	strb	r3, [r7, #7]
	wait_resp("ok\r\n");
 80007d6:	4811      	ldr	r0, [pc, #68]	; (800081c <a6_module_name+0x50>)
 80007d8:	f000 f870 	bl	80008bc <wait_resp>

	while(num_of_try)
 80007dc:	e013      	b.n	8000806 <a6_module_name+0x3a>
	{
		a6_send_cmd("ATI\r\n");
 80007de:	4810      	ldr	r0, [pc, #64]	; (8000820 <a6_module_name+0x54>)
 80007e0:	f000 f8da 	bl	8000998 <a6_send_cmd>
		systick_delay_ms(3000);
 80007e4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80007e8:	f7ff fe90 	bl	800050c <systick_delay_ms>

		if(is_response)
 80007ec:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <a6_module_name+0x58>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d004      	beq.n	8000800 <a6_module_name+0x34>
		{
			/*Success*/
			printf("Module name retrieved successfully.....\n\r");
 80007f6:	480c      	ldr	r0, [pc, #48]	; (8000828 <a6_module_name+0x5c>)
 80007f8:	f000 fa82 	bl	8000d00 <iprintf>
			return 1;
 80007fc:	2301      	movs	r3, #1
 80007fe:	e009      	b.n	8000814 <a6_module_name+0x48>
		}
		num_of_try--;
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	3b01      	subs	r3, #1
 8000804:	71fb      	strb	r3, [r7, #7]
	while(num_of_try)
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d1e8      	bne.n	80007de <a6_module_name+0x12>
	}

	printf("ERR : Module name  retrieval error....\n\r");
 800080c:	4807      	ldr	r0, [pc, #28]	; (800082c <a6_module_name+0x60>)
 800080e:	f000 fa77 	bl	8000d00 <iprintf>
	return 0;
 8000812:	2300      	movs	r3, #0

}
 8000814:	4618      	mov	r0, r3
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	08001c0c 	.word	0x08001c0c
 8000820:	08001da0 	.word	0x08001da0
 8000824:	2000008d 	.word	0x2000008d
 8000828:	08001da8 	.word	0x08001da8
 800082c:	08001dd4 	.word	0x08001dd4

08000830 <cpy_to_uart>:


/*Copy content of tx_fifo into debug uart*/
static void cpy_to_uart(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
	char letter;

	/*Make sure transmit data register is empty and
	 * fifo has content*/
	while((USART2->SR  & SR_TXE) && tx_fifo_size() >0)
 8000836:	e006      	b.n	8000846 <cpy_to_uart+0x16>
	{
		/*Get char from fifo*/
		tx_fifo_get(&letter);
 8000838:	1dfb      	adds	r3, r7, #7
 800083a:	4618      	mov	r0, r3
 800083c:	f000 f90c 	bl	8000a58 <tx_fifo_get>

		/*Put into uart data register*/
		USART2->DR = letter;
 8000840:	79fa      	ldrb	r2, [r7, #7]
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <cpy_to_uart+0x34>)
 8000844:	605a      	str	r2, [r3, #4]
	while((USART2->SR  & SR_TXE) && tx_fifo_size() >0)
 8000846:	4b07      	ldr	r3, [pc, #28]	; (8000864 <cpy_to_uart+0x34>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800084e:	2b00      	cmp	r3, #0
 8000850:	d004      	beq.n	800085c <cpy_to_uart+0x2c>
 8000852:	f000 f927 	bl	8000aa4 <tx_fifo_size>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d1ed      	bne.n	8000838 <cpy_to_uart+0x8>
	}

}
 800085c:	bf00      	nop
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40004400 	.word	0x40004400

08000868 <uart_output_char>:

/*Output uart character*/
static void uart_output_char(char data)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	71fb      	strb	r3, [r7, #7]
     if(tx_fifo_put(data) == FIFOFAIL)
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	4618      	mov	r0, r3
 8000876:	f000 f8c3 	bl	8000a00 <tx_fifo_put>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d002      	beq.n	8000886 <uart_output_char+0x1e>
     {
    	 return;
     }

     cpy_to_uart();
 8000880:	f7ff ffd6 	bl	8000830 <cpy_to_uart>
 8000884:	e000      	b.n	8000888 <uart_output_char+0x20>
    	 return;
 8000886:	bf00      	nop
}
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <to_lower>:



static char to_lower(char letter)

{
 800088e:	b480      	push	{r7}
 8000890:	b083      	sub	sp, #12
 8000892:	af00      	add	r7, sp, #0
 8000894:	4603      	mov	r3, r0
 8000896:	71fb      	strb	r3, [r7, #7]
	if((letter >= 'A') && (letter <= 'Z'))
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	2b40      	cmp	r3, #64	; 0x40
 800089c:	d906      	bls.n	80008ac <to_lower+0x1e>
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	2b5a      	cmp	r3, #90	; 0x5a
 80008a2:	d803      	bhi.n	80008ac <to_lower+0x1e>
	{
		letter |=0x20;
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	f043 0320 	orr.w	r3, r3, #32
 80008aa:	71fb      	strb	r3, [r7, #7]
	}

	return letter;
 80008ac:	79fb      	ldrb	r3, [r7, #7]
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
	...

080008bc <wait_resp>:


/*Initialize the string search in the rx data stream*/

static void wait_resp(char *pt)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	strcpy(sub_str,pt);
 80008c4:	6879      	ldr	r1, [r7, #4]
 80008c6:	4808      	ldr	r0, [pc, #32]	; (80008e8 <wait_resp+0x2c>)
 80008c8:	f000 fa41 	bl	8000d4e <strcpy>
	search_idx 	= 0;
 80008cc:	4b07      	ldr	r3, [pc, #28]	; (80008ec <wait_resp+0x30>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
	is_response = false;
 80008d2:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <wait_resp+0x34>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	701a      	strb	r2, [r3, #0]
	searching 	= true;
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <wait_resp+0x38>)
 80008da:	2201      	movs	r2, #1
 80008dc:	701a      	strb	r2, [r3, #0]
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	200004a0 	.word	0x200004a0
 80008ec:	20000090 	.word	0x20000090
 80008f0:	2000008d 	.word	0x2000008d
 80008f4:	2000008c 	.word	0x2000008c

080008f8 <search_check>:



/*Search for string in rx data stream*/
static void search_check(char letter)
{
 80008f8:	b590      	push	{r4, r7, lr}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	71fb      	strb	r3, [r7, #7]
	if(searching)
 8000902:	4b14      	ldr	r3, [pc, #80]	; (8000954 <search_check+0x5c>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	b2db      	uxtb	r3, r3
 8000908:	2b00      	cmp	r3, #0
 800090a:	d01f      	beq.n	800094c <search_check+0x54>
	{
		/*Check if characters match*/
		if(sub_str[search_idx] == to_lower(letter))
 800090c:	4b12      	ldr	r3, [pc, #72]	; (8000958 <search_check+0x60>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a12      	ldr	r2, [pc, #72]	; (800095c <search_check+0x64>)
 8000912:	5cd4      	ldrb	r4, [r2, r3]
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff ffb9 	bl	800088e <to_lower>
 800091c:	4603      	mov	r3, r0
 800091e:	429c      	cmp	r4, r3
 8000920:	d111      	bne.n	8000946 <search_check+0x4e>
		{
			search_idx++;
 8000922:	4b0d      	ldr	r3, [pc, #52]	; (8000958 <search_check+0x60>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	3301      	adds	r3, #1
 8000928:	4a0b      	ldr	r2, [pc, #44]	; (8000958 <search_check+0x60>)
 800092a:	6013      	str	r3, [r2, #0]

			/* Check if end of string */
			if(sub_str[search_idx] == 0)
 800092c:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <search_check+0x60>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a0a      	ldr	r2, [pc, #40]	; (800095c <search_check+0x64>)
 8000932:	5cd3      	ldrb	r3, [r2, r3]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d109      	bne.n	800094c <search_check+0x54>
			{
				is_response =  true;
 8000938:	4b09      	ldr	r3, [pc, #36]	; (8000960 <search_check+0x68>)
 800093a:	2201      	movs	r2, #1
 800093c:	701a      	strb	r2, [r3, #0]
				searching   =  false;
 800093e:	4b05      	ldr	r3, [pc, #20]	; (8000954 <search_check+0x5c>)
 8000940:	2200      	movs	r2, #0
 8000942:	701a      	strb	r2, [r3, #0]
		{
			/*Start over*/
			search_idx = 0;
		}
	}
}
 8000944:	e002      	b.n	800094c <search_check+0x54>
			search_idx = 0;
 8000946:	4b04      	ldr	r3, [pc, #16]	; (8000958 <search_check+0x60>)
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
}
 800094c:	bf00      	nop
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	bd90      	pop	{r4, r7, pc}
 8000954:	2000008c 	.word	0x2000008c
 8000958:	20000090 	.word	0x20000090
 800095c:	200004a0 	.word	0x200004a0
 8000960:	2000008d 	.word	0x2000008d

08000964 <a6_process_data>:


static void a6_process_data(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
	char letter;

	/*Check if there is new data in data register*/
	if(USART1->SR & SR_RXNE)
 800096a:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <a6_process_data+0x30>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f003 0320 	and.w	r3, r3, #32
 8000972:	2b00      	cmp	r3, #0
 8000974:	d00a      	beq.n	800098c <a6_process_data+0x28>
	{
		/*Store data from a6 uart data register to local variable*/
       letter  =  USART1->DR;
 8000976:	4b07      	ldr	r3, [pc, #28]	; (8000994 <a6_process_data+0x30>)
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	71fb      	strb	r3, [r7, #7]

       /*Print data from a6 uart data register to debug uart, meaning, your computer */
       uart_output_char(letter);
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff ff72 	bl	8000868 <uart_output_char>


       /*Check for response*/
       search_check(letter);
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff ffb6 	bl	80008f8 <search_check>

	}

}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40011000 	.word	0x40011000

08000998 <a6_send_cmd>:


/*Send command to a6*/
static void a6_send_cmd(const char * cmd)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
	int index = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	60fb      	str	r3, [r7, #12]

	while(cmd[index] != 0)
 80009a4:	e009      	b.n	80009ba <a6_send_cmd+0x22>
	{
		a6_uart_write_char(cmd[index++]);
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	1c5a      	adds	r2, r3, #1
 80009aa:	60fa      	str	r2, [r7, #12]
 80009ac:	461a      	mov	r2, r3
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4413      	add	r3, r2
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff fd65 	bl	8000484 <a6_uart_write_char>
	while(cmd[index] != 0)
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	687a      	ldr	r2, [r7, #4]
 80009be:	4413      	add	r3, r2
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d1ef      	bne.n	80009a6 <a6_send_cmd+0xe>
	}
}
 80009c6:	bf00      	nop
 80009c8:	bf00      	nop
 80009ca:	3710      	adds	r7, #16
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0

	a6_process_data();
 80009d4:	f7ff ffc6 	bl	8000964 <a6_process_data>
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}

080009dc <tx_fifo_init>:


/*Initialize tx fifo*/

void tx_fifo_init(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
	tx_put_itr = 0;
 80009e0:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <tx_fifo_init+0x1c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
	tx_get_itr = 0;
 80009e6:	4b05      	ldr	r3, [pc, #20]	; (80009fc <tx_fifo_init+0x20>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	200004cc 	.word	0x200004cc
 80009fc:	200004c8 	.word	0x200004c8

08000a00 <tx_fifo_put>:

/*Put data into tx fifo*/

uint8_t tx_fifo_put(tx_dataType data)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	71fb      	strb	r3, [r7, #7]

	/*Check if fifo is full*/
	if((tx_put_itr - tx_get_itr) & ~(TXFIFOSIZE -1))
 8000a0a:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <tx_fifo_put+0x4c>)
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <tx_fifo_put+0x50>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	1ad3      	subs	r3, r2, r3
 8000a14:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000a18:	f023 0303 	bic.w	r3, r3, #3
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <tx_fifo_put+0x24>
	{
		/*fifo is full*/
		return (TXFAIL);
 8000a20:	2300      	movs	r3, #0
 8000a22:	e00c      	b.n	8000a3e <tx_fifo_put+0x3e>
	}
	/*Put data into fifo*/
	TX_FIFO[tx_put_itr & (TXFIFOSIZE-1)] =  data;
 8000a24:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <tx_fifo_put+0x4c>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a2c:	4909      	ldr	r1, [pc, #36]	; (8000a54 <tx_fifo_put+0x54>)
 8000a2e:	79fa      	ldrb	r2, [r7, #7]
 8000a30:	54ca      	strb	r2, [r1, r3]

	/*Increment itr*/
	tx_put_itr++;
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <tx_fifo_put+0x4c>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	3301      	adds	r3, #1
 8000a38:	4a04      	ldr	r2, [pc, #16]	; (8000a4c <tx_fifo_put+0x4c>)
 8000a3a:	6013      	str	r3, [r2, #0]

	return(TXSUCCESS);
 8000a3c:	2301      	movs	r3, #1
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	200004cc 	.word	0x200004cc
 8000a50:	200004c8 	.word	0x200004c8
 8000a54:	20000094 	.word	0x20000094

08000a58 <tx_fifo_get>:

uint8_t tx_fifo_get(tx_dataType *pdata)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
   /*Check if fifo is empty*/
	if(tx_put_itr == tx_get_itr)
 8000a60:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <tx_fifo_get+0x40>)
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <tx_fifo_get+0x44>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d101      	bne.n	8000a70 <tx_fifo_get+0x18>
	{
		/*fifo empty*/
		return (TXFAIL);
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	e00d      	b.n	8000a8c <tx_fifo_get+0x34>
	}

	/*Get the data*/
	*pdata =  TX_FIFO[tx_get_itr & (TXFIFOSIZE - 1)];
 8000a70:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <tx_fifo_get+0x44>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a78:	4a09      	ldr	r2, [pc, #36]	; (8000aa0 <tx_fifo_get+0x48>)
 8000a7a:	5cd2      	ldrb	r2, [r2, r3]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	701a      	strb	r2, [r3, #0]

	/*Increment the itr*/
	tx_get_itr++;
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <tx_fifo_get+0x44>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	3301      	adds	r3, #1
 8000a86:	4a05      	ldr	r2, [pc, #20]	; (8000a9c <tx_fifo_get+0x44>)
 8000a88:	6013      	str	r3, [r2, #0]

	return (TXSUCCESS);
 8000a8a:	2301      	movs	r3, #1
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	200004cc 	.word	0x200004cc
 8000a9c:	200004c8 	.word	0x200004c8
 8000aa0:	20000094 	.word	0x20000094

08000aa4 <tx_fifo_size>:


uint32_t tx_fifo_size(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
	return (uint32_t)(tx_put_itr -  tx_get_itr);
 8000aa8:	4b04      	ldr	r3, [pc, #16]	; (8000abc <tx_fifo_size+0x18>)
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	4b04      	ldr	r3, [pc, #16]	; (8000ac0 <tx_fifo_size+0x1c>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	1ad3      	subs	r3, r2, r3
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	200004cc 	.word	0x200004cc
 8000ac0:	200004c8 	.word	0x200004c8

08000ac4 <rx_fifo_init>:


/*Initialize rx fifo*/

void rx_fifo_init(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
	rx_put_itr = 0;
 8000ac8:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <rx_fifo_init+0x1c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
	rx_get_itr = 0;
 8000ace:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <rx_fifo_init+0x20>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	200004c0 	.word	0x200004c0
 8000ae4:	200004c4 	.word	0x200004c4

08000ae8 <main>:

char receiver_number[] = "7491265055";
char sms_message[]  = "Hello from remote STM32 Machine";

int main()
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
	a6_module_init();
 8000aec:	f7ff fd56 	bl	800059c <a6_module_init>
	//a6_send_sms(sms_message,receiver_number);
	a6_make_call(receiver_number);
 8000af0:	4802      	ldr	r0, [pc, #8]	; (8000afc <main+0x14>)
 8000af2:	f7ff fd79 	bl	80005e8 <a6_make_call>
 8000af6:	2300      	movs	r3, #0

}
 8000af8:	4618      	mov	r0, r3
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000000 	.word	0x20000000

08000b00 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	e00a      	b.n	8000b28 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b12:	f3af 8000 	nop.w
 8000b16:	4601      	mov	r1, r0
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	1c5a      	adds	r2, r3, #1
 8000b1c:	60ba      	str	r2, [r7, #8]
 8000b1e:	b2ca      	uxtb	r2, r1
 8000b20:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	3301      	adds	r3, #1
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	697a      	ldr	r2, [r7, #20]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	dbf0      	blt.n	8000b12 <_read+0x12>
	}

return len;
 8000b30:	687b      	ldr	r3, [r7, #4]
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b086      	sub	sp, #24
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	60f8      	str	r0, [r7, #12]
 8000b42:	60b9      	str	r1, [r7, #8]
 8000b44:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b46:	2300      	movs	r3, #0
 8000b48:	617b      	str	r3, [r7, #20]
 8000b4a:	e009      	b.n	8000b60 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	1c5a      	adds	r2, r3, #1
 8000b50:	60ba      	str	r2, [r7, #8]
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff fb93 	bl	8000280 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	697a      	ldr	r2, [r7, #20]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	dbf1      	blt.n	8000b4c <_write+0x12>
	}
	return len;
 8000b68:	687b      	ldr	r3, [r7, #4]
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3718      	adds	r7, #24
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <_close>:

int _close(int file)
{
 8000b72:	b480      	push	{r7}
 8000b74:	b083      	sub	sp, #12
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
	return -1;
 8000b7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	b083      	sub	sp, #12
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
 8000b92:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b9a:	605a      	str	r2, [r3, #4]
	return 0;
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <_isatty>:

int _isatty(int file)
{
 8000baa:	b480      	push	{r7}
 8000bac:	b083      	sub	sp, #12
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
	return 1;
 8000bb2:	2301      	movs	r3, #1
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
	return 0;
 8000bcc:	2300      	movs	r3, #0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3714      	adds	r7, #20
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
	...

08000bdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be4:	4a14      	ldr	r2, [pc, #80]	; (8000c38 <_sbrk+0x5c>)
 8000be6:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <_sbrk+0x60>)
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bf0:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <_sbrk+0x64>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d102      	bne.n	8000bfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <_sbrk+0x64>)
 8000bfa:	4a12      	ldr	r2, [pc, #72]	; (8000c44 <_sbrk+0x68>)
 8000bfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <_sbrk+0x64>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4413      	add	r3, r2
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d207      	bcs.n	8000c1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c0c:	f000 f846 	bl	8000c9c <__errno>
 8000c10:	4603      	mov	r3, r0
 8000c12:	220c      	movs	r2, #12
 8000c14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c16:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1a:	e009      	b.n	8000c30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c1c:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <_sbrk+0x64>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c22:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <_sbrk+0x64>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	4a05      	ldr	r2, [pc, #20]	; (8000c40 <_sbrk+0x64>)
 8000c2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3718      	adds	r7, #24
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20020000 	.word	0x20020000
 8000c3c:	00000400 	.word	0x00000400
 8000c40:	20000494 	.word	0x20000494
 8000c44:	200004e0 	.word	0x200004e0

08000c48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c48:	480d      	ldr	r0, [pc, #52]	; (8000c80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c4a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c4c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c50:	480c      	ldr	r0, [pc, #48]	; (8000c84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c52:	490d      	ldr	r1, [pc, #52]	; (8000c88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c54:	4a0d      	ldr	r2, [pc, #52]	; (8000c8c <LoopForever+0xe>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c58:	e002      	b.n	8000c60 <LoopCopyDataInit>

08000c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5e:	3304      	adds	r3, #4

08000c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c64:	d3f9      	bcc.n	8000c5a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c66:	4a0a      	ldr	r2, [pc, #40]	; (8000c90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c68:	4c0a      	ldr	r4, [pc, #40]	; (8000c94 <LoopForever+0x16>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c6c:	e001      	b.n	8000c72 <LoopFillZerobss>

08000c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c70:	3204      	adds	r2, #4

08000c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c74:	d3fb      	bcc.n	8000c6e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c76:	f000 f817 	bl	8000ca8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c7a:	f7ff ff35 	bl	8000ae8 <main>

08000c7e <LoopForever>:

LoopForever:
    b LoopForever
 8000c7e:	e7fe      	b.n	8000c7e <LoopForever>
  ldr   r0, =_estack
 8000c80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c88:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c8c:	08001ea0 	.word	0x08001ea0
  ldr r2, =_sbss
 8000c90:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c94:	200004e0 	.word	0x200004e0

08000c98 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c98:	e7fe      	b.n	8000c98 <ADC_IRQHandler>
	...

08000c9c <__errno>:
 8000c9c:	4b01      	ldr	r3, [pc, #4]	; (8000ca4 <__errno+0x8>)
 8000c9e:	6818      	ldr	r0, [r3, #0]
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	2000000c 	.word	0x2000000c

08000ca8 <__libc_init_array>:
 8000ca8:	b570      	push	{r4, r5, r6, lr}
 8000caa:	4d0d      	ldr	r5, [pc, #52]	; (8000ce0 <__libc_init_array+0x38>)
 8000cac:	4c0d      	ldr	r4, [pc, #52]	; (8000ce4 <__libc_init_array+0x3c>)
 8000cae:	1b64      	subs	r4, r4, r5
 8000cb0:	10a4      	asrs	r4, r4, #2
 8000cb2:	2600      	movs	r6, #0
 8000cb4:	42a6      	cmp	r6, r4
 8000cb6:	d109      	bne.n	8000ccc <__libc_init_array+0x24>
 8000cb8:	4d0b      	ldr	r5, [pc, #44]	; (8000ce8 <__libc_init_array+0x40>)
 8000cba:	4c0c      	ldr	r4, [pc, #48]	; (8000cec <__libc_init_array+0x44>)
 8000cbc:	f000 ff8e 	bl	8001bdc <_init>
 8000cc0:	1b64      	subs	r4, r4, r5
 8000cc2:	10a4      	asrs	r4, r4, #2
 8000cc4:	2600      	movs	r6, #0
 8000cc6:	42a6      	cmp	r6, r4
 8000cc8:	d105      	bne.n	8000cd6 <__libc_init_array+0x2e>
 8000cca:	bd70      	pop	{r4, r5, r6, pc}
 8000ccc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cd0:	4798      	blx	r3
 8000cd2:	3601      	adds	r6, #1
 8000cd4:	e7ee      	b.n	8000cb4 <__libc_init_array+0xc>
 8000cd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cda:	4798      	blx	r3
 8000cdc:	3601      	adds	r6, #1
 8000cde:	e7f2      	b.n	8000cc6 <__libc_init_array+0x1e>
 8000ce0:	08001e98 	.word	0x08001e98
 8000ce4:	08001e98 	.word	0x08001e98
 8000ce8:	08001e98 	.word	0x08001e98
 8000cec:	08001e9c 	.word	0x08001e9c

08000cf0 <memset>:
 8000cf0:	4402      	add	r2, r0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d100      	bne.n	8000cfa <memset+0xa>
 8000cf8:	4770      	bx	lr
 8000cfa:	f803 1b01 	strb.w	r1, [r3], #1
 8000cfe:	e7f9      	b.n	8000cf4 <memset+0x4>

08000d00 <iprintf>:
 8000d00:	b40f      	push	{r0, r1, r2, r3}
 8000d02:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <iprintf+0x2c>)
 8000d04:	b513      	push	{r0, r1, r4, lr}
 8000d06:	681c      	ldr	r4, [r3, #0]
 8000d08:	b124      	cbz	r4, 8000d14 <iprintf+0x14>
 8000d0a:	69a3      	ldr	r3, [r4, #24]
 8000d0c:	b913      	cbnz	r3, 8000d14 <iprintf+0x14>
 8000d0e:	4620      	mov	r0, r4
 8000d10:	f000 f87e 	bl	8000e10 <__sinit>
 8000d14:	ab05      	add	r3, sp, #20
 8000d16:	9a04      	ldr	r2, [sp, #16]
 8000d18:	68a1      	ldr	r1, [r4, #8]
 8000d1a:	9301      	str	r3, [sp, #4]
 8000d1c:	4620      	mov	r0, r4
 8000d1e:	f000 f99b 	bl	8001058 <_vfiprintf_r>
 8000d22:	b002      	add	sp, #8
 8000d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d28:	b004      	add	sp, #16
 8000d2a:	4770      	bx	lr
 8000d2c:	2000000c 	.word	0x2000000c

08000d30 <strcat>:
 8000d30:	b510      	push	{r4, lr}
 8000d32:	4602      	mov	r2, r0
 8000d34:	7814      	ldrb	r4, [r2, #0]
 8000d36:	4613      	mov	r3, r2
 8000d38:	3201      	adds	r2, #1
 8000d3a:	2c00      	cmp	r4, #0
 8000d3c:	d1fa      	bne.n	8000d34 <strcat+0x4>
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000d44:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000d48:	2a00      	cmp	r2, #0
 8000d4a:	d1f9      	bne.n	8000d40 <strcat+0x10>
 8000d4c:	bd10      	pop	{r4, pc}

08000d4e <strcpy>:
 8000d4e:	4603      	mov	r3, r0
 8000d50:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000d54:	f803 2b01 	strb.w	r2, [r3], #1
 8000d58:	2a00      	cmp	r2, #0
 8000d5a:	d1f9      	bne.n	8000d50 <strcpy+0x2>
 8000d5c:	4770      	bx	lr
	...

08000d60 <std>:
 8000d60:	2300      	movs	r3, #0
 8000d62:	b510      	push	{r4, lr}
 8000d64:	4604      	mov	r4, r0
 8000d66:	e9c0 3300 	strd	r3, r3, [r0]
 8000d6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000d6e:	6083      	str	r3, [r0, #8]
 8000d70:	8181      	strh	r1, [r0, #12]
 8000d72:	6643      	str	r3, [r0, #100]	; 0x64
 8000d74:	81c2      	strh	r2, [r0, #14]
 8000d76:	6183      	str	r3, [r0, #24]
 8000d78:	4619      	mov	r1, r3
 8000d7a:	2208      	movs	r2, #8
 8000d7c:	305c      	adds	r0, #92	; 0x5c
 8000d7e:	f7ff ffb7 	bl	8000cf0 <memset>
 8000d82:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <std+0x38>)
 8000d84:	6263      	str	r3, [r4, #36]	; 0x24
 8000d86:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <std+0x3c>)
 8000d88:	62a3      	str	r3, [r4, #40]	; 0x28
 8000d8a:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <std+0x40>)
 8000d8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000d8e:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <std+0x44>)
 8000d90:	6224      	str	r4, [r4, #32]
 8000d92:	6323      	str	r3, [r4, #48]	; 0x30
 8000d94:	bd10      	pop	{r4, pc}
 8000d96:	bf00      	nop
 8000d98:	08001601 	.word	0x08001601
 8000d9c:	08001623 	.word	0x08001623
 8000da0:	0800165b 	.word	0x0800165b
 8000da4:	0800167f 	.word	0x0800167f

08000da8 <_cleanup_r>:
 8000da8:	4901      	ldr	r1, [pc, #4]	; (8000db0 <_cleanup_r+0x8>)
 8000daa:	f000 b8af 	b.w	8000f0c <_fwalk_reent>
 8000dae:	bf00      	nop
 8000db0:	08001959 	.word	0x08001959

08000db4 <__sfmoreglue>:
 8000db4:	b570      	push	{r4, r5, r6, lr}
 8000db6:	1e4a      	subs	r2, r1, #1
 8000db8:	2568      	movs	r5, #104	; 0x68
 8000dba:	4355      	muls	r5, r2
 8000dbc:	460e      	mov	r6, r1
 8000dbe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000dc2:	f000 f8c5 	bl	8000f50 <_malloc_r>
 8000dc6:	4604      	mov	r4, r0
 8000dc8:	b140      	cbz	r0, 8000ddc <__sfmoreglue+0x28>
 8000dca:	2100      	movs	r1, #0
 8000dcc:	e9c0 1600 	strd	r1, r6, [r0]
 8000dd0:	300c      	adds	r0, #12
 8000dd2:	60a0      	str	r0, [r4, #8]
 8000dd4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000dd8:	f7ff ff8a 	bl	8000cf0 <memset>
 8000ddc:	4620      	mov	r0, r4
 8000dde:	bd70      	pop	{r4, r5, r6, pc}

08000de0 <__sfp_lock_acquire>:
 8000de0:	4801      	ldr	r0, [pc, #4]	; (8000de8 <__sfp_lock_acquire+0x8>)
 8000de2:	f000 b8b3 	b.w	8000f4c <__retarget_lock_acquire_recursive>
 8000de6:	bf00      	nop
 8000de8:	200004d8 	.word	0x200004d8

08000dec <__sfp_lock_release>:
 8000dec:	4801      	ldr	r0, [pc, #4]	; (8000df4 <__sfp_lock_release+0x8>)
 8000dee:	f000 b8ae 	b.w	8000f4e <__retarget_lock_release_recursive>
 8000df2:	bf00      	nop
 8000df4:	200004d8 	.word	0x200004d8

08000df8 <__sinit_lock_acquire>:
 8000df8:	4801      	ldr	r0, [pc, #4]	; (8000e00 <__sinit_lock_acquire+0x8>)
 8000dfa:	f000 b8a7 	b.w	8000f4c <__retarget_lock_acquire_recursive>
 8000dfe:	bf00      	nop
 8000e00:	200004d3 	.word	0x200004d3

08000e04 <__sinit_lock_release>:
 8000e04:	4801      	ldr	r0, [pc, #4]	; (8000e0c <__sinit_lock_release+0x8>)
 8000e06:	f000 b8a2 	b.w	8000f4e <__retarget_lock_release_recursive>
 8000e0a:	bf00      	nop
 8000e0c:	200004d3 	.word	0x200004d3

08000e10 <__sinit>:
 8000e10:	b510      	push	{r4, lr}
 8000e12:	4604      	mov	r4, r0
 8000e14:	f7ff fff0 	bl	8000df8 <__sinit_lock_acquire>
 8000e18:	69a3      	ldr	r3, [r4, #24]
 8000e1a:	b11b      	cbz	r3, 8000e24 <__sinit+0x14>
 8000e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e20:	f7ff bff0 	b.w	8000e04 <__sinit_lock_release>
 8000e24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000e28:	6523      	str	r3, [r4, #80]	; 0x50
 8000e2a:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <__sinit+0x68>)
 8000e2c:	4a13      	ldr	r2, [pc, #76]	; (8000e7c <__sinit+0x6c>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	62a2      	str	r2, [r4, #40]	; 0x28
 8000e32:	42a3      	cmp	r3, r4
 8000e34:	bf04      	itt	eq
 8000e36:	2301      	moveq	r3, #1
 8000e38:	61a3      	streq	r3, [r4, #24]
 8000e3a:	4620      	mov	r0, r4
 8000e3c:	f000 f820 	bl	8000e80 <__sfp>
 8000e40:	6060      	str	r0, [r4, #4]
 8000e42:	4620      	mov	r0, r4
 8000e44:	f000 f81c 	bl	8000e80 <__sfp>
 8000e48:	60a0      	str	r0, [r4, #8]
 8000e4a:	4620      	mov	r0, r4
 8000e4c:	f000 f818 	bl	8000e80 <__sfp>
 8000e50:	2200      	movs	r2, #0
 8000e52:	60e0      	str	r0, [r4, #12]
 8000e54:	2104      	movs	r1, #4
 8000e56:	6860      	ldr	r0, [r4, #4]
 8000e58:	f7ff ff82 	bl	8000d60 <std>
 8000e5c:	68a0      	ldr	r0, [r4, #8]
 8000e5e:	2201      	movs	r2, #1
 8000e60:	2109      	movs	r1, #9
 8000e62:	f7ff ff7d 	bl	8000d60 <std>
 8000e66:	68e0      	ldr	r0, [r4, #12]
 8000e68:	2202      	movs	r2, #2
 8000e6a:	2112      	movs	r1, #18
 8000e6c:	f7ff ff78 	bl	8000d60 <std>
 8000e70:	2301      	movs	r3, #1
 8000e72:	61a3      	str	r3, [r4, #24]
 8000e74:	e7d2      	b.n	8000e1c <__sinit+0xc>
 8000e76:	bf00      	nop
 8000e78:	08001e00 	.word	0x08001e00
 8000e7c:	08000da9 	.word	0x08000da9

08000e80 <__sfp>:
 8000e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e82:	4607      	mov	r7, r0
 8000e84:	f7ff ffac 	bl	8000de0 <__sfp_lock_acquire>
 8000e88:	4b1e      	ldr	r3, [pc, #120]	; (8000f04 <__sfp+0x84>)
 8000e8a:	681e      	ldr	r6, [r3, #0]
 8000e8c:	69b3      	ldr	r3, [r6, #24]
 8000e8e:	b913      	cbnz	r3, 8000e96 <__sfp+0x16>
 8000e90:	4630      	mov	r0, r6
 8000e92:	f7ff ffbd 	bl	8000e10 <__sinit>
 8000e96:	3648      	adds	r6, #72	; 0x48
 8000e98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	d503      	bpl.n	8000ea8 <__sfp+0x28>
 8000ea0:	6833      	ldr	r3, [r6, #0]
 8000ea2:	b30b      	cbz	r3, 8000ee8 <__sfp+0x68>
 8000ea4:	6836      	ldr	r6, [r6, #0]
 8000ea6:	e7f7      	b.n	8000e98 <__sfp+0x18>
 8000ea8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000eac:	b9d5      	cbnz	r5, 8000ee4 <__sfp+0x64>
 8000eae:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <__sfp+0x88>)
 8000eb0:	60e3      	str	r3, [r4, #12]
 8000eb2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000eb6:	6665      	str	r5, [r4, #100]	; 0x64
 8000eb8:	f000 f847 	bl	8000f4a <__retarget_lock_init_recursive>
 8000ebc:	f7ff ff96 	bl	8000dec <__sfp_lock_release>
 8000ec0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000ec4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000ec8:	6025      	str	r5, [r4, #0]
 8000eca:	61a5      	str	r5, [r4, #24]
 8000ecc:	2208      	movs	r2, #8
 8000ece:	4629      	mov	r1, r5
 8000ed0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000ed4:	f7ff ff0c 	bl	8000cf0 <memset>
 8000ed8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000edc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000ee0:	4620      	mov	r0, r4
 8000ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ee4:	3468      	adds	r4, #104	; 0x68
 8000ee6:	e7d9      	b.n	8000e9c <__sfp+0x1c>
 8000ee8:	2104      	movs	r1, #4
 8000eea:	4638      	mov	r0, r7
 8000eec:	f7ff ff62 	bl	8000db4 <__sfmoreglue>
 8000ef0:	4604      	mov	r4, r0
 8000ef2:	6030      	str	r0, [r6, #0]
 8000ef4:	2800      	cmp	r0, #0
 8000ef6:	d1d5      	bne.n	8000ea4 <__sfp+0x24>
 8000ef8:	f7ff ff78 	bl	8000dec <__sfp_lock_release>
 8000efc:	230c      	movs	r3, #12
 8000efe:	603b      	str	r3, [r7, #0]
 8000f00:	e7ee      	b.n	8000ee0 <__sfp+0x60>
 8000f02:	bf00      	nop
 8000f04:	08001e00 	.word	0x08001e00
 8000f08:	ffff0001 	.word	0xffff0001

08000f0c <_fwalk_reent>:
 8000f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f10:	4606      	mov	r6, r0
 8000f12:	4688      	mov	r8, r1
 8000f14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000f18:	2700      	movs	r7, #0
 8000f1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000f1e:	f1b9 0901 	subs.w	r9, r9, #1
 8000f22:	d505      	bpl.n	8000f30 <_fwalk_reent+0x24>
 8000f24:	6824      	ldr	r4, [r4, #0]
 8000f26:	2c00      	cmp	r4, #0
 8000f28:	d1f7      	bne.n	8000f1a <_fwalk_reent+0xe>
 8000f2a:	4638      	mov	r0, r7
 8000f2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f30:	89ab      	ldrh	r3, [r5, #12]
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d907      	bls.n	8000f46 <_fwalk_reent+0x3a>
 8000f36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	d003      	beq.n	8000f46 <_fwalk_reent+0x3a>
 8000f3e:	4629      	mov	r1, r5
 8000f40:	4630      	mov	r0, r6
 8000f42:	47c0      	blx	r8
 8000f44:	4307      	orrs	r7, r0
 8000f46:	3568      	adds	r5, #104	; 0x68
 8000f48:	e7e9      	b.n	8000f1e <_fwalk_reent+0x12>

08000f4a <__retarget_lock_init_recursive>:
 8000f4a:	4770      	bx	lr

08000f4c <__retarget_lock_acquire_recursive>:
 8000f4c:	4770      	bx	lr

08000f4e <__retarget_lock_release_recursive>:
 8000f4e:	4770      	bx	lr

08000f50 <_malloc_r>:
 8000f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f52:	1ccd      	adds	r5, r1, #3
 8000f54:	f025 0503 	bic.w	r5, r5, #3
 8000f58:	3508      	adds	r5, #8
 8000f5a:	2d0c      	cmp	r5, #12
 8000f5c:	bf38      	it	cc
 8000f5e:	250c      	movcc	r5, #12
 8000f60:	2d00      	cmp	r5, #0
 8000f62:	4606      	mov	r6, r0
 8000f64:	db01      	blt.n	8000f6a <_malloc_r+0x1a>
 8000f66:	42a9      	cmp	r1, r5
 8000f68:	d903      	bls.n	8000f72 <_malloc_r+0x22>
 8000f6a:	230c      	movs	r3, #12
 8000f6c:	6033      	str	r3, [r6, #0]
 8000f6e:	2000      	movs	r0, #0
 8000f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f72:	f000 fda3 	bl	8001abc <__malloc_lock>
 8000f76:	4921      	ldr	r1, [pc, #132]	; (8000ffc <_malloc_r+0xac>)
 8000f78:	680a      	ldr	r2, [r1, #0]
 8000f7a:	4614      	mov	r4, r2
 8000f7c:	b99c      	cbnz	r4, 8000fa6 <_malloc_r+0x56>
 8000f7e:	4f20      	ldr	r7, [pc, #128]	; (8001000 <_malloc_r+0xb0>)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	b923      	cbnz	r3, 8000f8e <_malloc_r+0x3e>
 8000f84:	4621      	mov	r1, r4
 8000f86:	4630      	mov	r0, r6
 8000f88:	f000 fb2a 	bl	80015e0 <_sbrk_r>
 8000f8c:	6038      	str	r0, [r7, #0]
 8000f8e:	4629      	mov	r1, r5
 8000f90:	4630      	mov	r0, r6
 8000f92:	f000 fb25 	bl	80015e0 <_sbrk_r>
 8000f96:	1c43      	adds	r3, r0, #1
 8000f98:	d123      	bne.n	8000fe2 <_malloc_r+0x92>
 8000f9a:	230c      	movs	r3, #12
 8000f9c:	6033      	str	r3, [r6, #0]
 8000f9e:	4630      	mov	r0, r6
 8000fa0:	f000 fd92 	bl	8001ac8 <__malloc_unlock>
 8000fa4:	e7e3      	b.n	8000f6e <_malloc_r+0x1e>
 8000fa6:	6823      	ldr	r3, [r4, #0]
 8000fa8:	1b5b      	subs	r3, r3, r5
 8000faa:	d417      	bmi.n	8000fdc <_malloc_r+0x8c>
 8000fac:	2b0b      	cmp	r3, #11
 8000fae:	d903      	bls.n	8000fb8 <_malloc_r+0x68>
 8000fb0:	6023      	str	r3, [r4, #0]
 8000fb2:	441c      	add	r4, r3
 8000fb4:	6025      	str	r5, [r4, #0]
 8000fb6:	e004      	b.n	8000fc2 <_malloc_r+0x72>
 8000fb8:	6863      	ldr	r3, [r4, #4]
 8000fba:	42a2      	cmp	r2, r4
 8000fbc:	bf0c      	ite	eq
 8000fbe:	600b      	streq	r3, [r1, #0]
 8000fc0:	6053      	strne	r3, [r2, #4]
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	f000 fd80 	bl	8001ac8 <__malloc_unlock>
 8000fc8:	f104 000b 	add.w	r0, r4, #11
 8000fcc:	1d23      	adds	r3, r4, #4
 8000fce:	f020 0007 	bic.w	r0, r0, #7
 8000fd2:	1ac2      	subs	r2, r0, r3
 8000fd4:	d0cc      	beq.n	8000f70 <_malloc_r+0x20>
 8000fd6:	1a1b      	subs	r3, r3, r0
 8000fd8:	50a3      	str	r3, [r4, r2]
 8000fda:	e7c9      	b.n	8000f70 <_malloc_r+0x20>
 8000fdc:	4622      	mov	r2, r4
 8000fde:	6864      	ldr	r4, [r4, #4]
 8000fe0:	e7cc      	b.n	8000f7c <_malloc_r+0x2c>
 8000fe2:	1cc4      	adds	r4, r0, #3
 8000fe4:	f024 0403 	bic.w	r4, r4, #3
 8000fe8:	42a0      	cmp	r0, r4
 8000fea:	d0e3      	beq.n	8000fb4 <_malloc_r+0x64>
 8000fec:	1a21      	subs	r1, r4, r0
 8000fee:	4630      	mov	r0, r6
 8000ff0:	f000 faf6 	bl	80015e0 <_sbrk_r>
 8000ff4:	3001      	adds	r0, #1
 8000ff6:	d1dd      	bne.n	8000fb4 <_malloc_r+0x64>
 8000ff8:	e7cf      	b.n	8000f9a <_malloc_r+0x4a>
 8000ffa:	bf00      	nop
 8000ffc:	20000498 	.word	0x20000498
 8001000:	2000049c 	.word	0x2000049c

08001004 <__sfputc_r>:
 8001004:	6893      	ldr	r3, [r2, #8]
 8001006:	3b01      	subs	r3, #1
 8001008:	2b00      	cmp	r3, #0
 800100a:	b410      	push	{r4}
 800100c:	6093      	str	r3, [r2, #8]
 800100e:	da08      	bge.n	8001022 <__sfputc_r+0x1e>
 8001010:	6994      	ldr	r4, [r2, #24]
 8001012:	42a3      	cmp	r3, r4
 8001014:	db01      	blt.n	800101a <__sfputc_r+0x16>
 8001016:	290a      	cmp	r1, #10
 8001018:	d103      	bne.n	8001022 <__sfputc_r+0x1e>
 800101a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800101e:	f000 bb33 	b.w	8001688 <__swbuf_r>
 8001022:	6813      	ldr	r3, [r2, #0]
 8001024:	1c58      	adds	r0, r3, #1
 8001026:	6010      	str	r0, [r2, #0]
 8001028:	7019      	strb	r1, [r3, #0]
 800102a:	4608      	mov	r0, r1
 800102c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001030:	4770      	bx	lr

08001032 <__sfputs_r>:
 8001032:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001034:	4606      	mov	r6, r0
 8001036:	460f      	mov	r7, r1
 8001038:	4614      	mov	r4, r2
 800103a:	18d5      	adds	r5, r2, r3
 800103c:	42ac      	cmp	r4, r5
 800103e:	d101      	bne.n	8001044 <__sfputs_r+0x12>
 8001040:	2000      	movs	r0, #0
 8001042:	e007      	b.n	8001054 <__sfputs_r+0x22>
 8001044:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001048:	463a      	mov	r2, r7
 800104a:	4630      	mov	r0, r6
 800104c:	f7ff ffda 	bl	8001004 <__sfputc_r>
 8001050:	1c43      	adds	r3, r0, #1
 8001052:	d1f3      	bne.n	800103c <__sfputs_r+0xa>
 8001054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001058 <_vfiprintf_r>:
 8001058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800105c:	460d      	mov	r5, r1
 800105e:	b09d      	sub	sp, #116	; 0x74
 8001060:	4614      	mov	r4, r2
 8001062:	4698      	mov	r8, r3
 8001064:	4606      	mov	r6, r0
 8001066:	b118      	cbz	r0, 8001070 <_vfiprintf_r+0x18>
 8001068:	6983      	ldr	r3, [r0, #24]
 800106a:	b90b      	cbnz	r3, 8001070 <_vfiprintf_r+0x18>
 800106c:	f7ff fed0 	bl	8000e10 <__sinit>
 8001070:	4b89      	ldr	r3, [pc, #548]	; (8001298 <_vfiprintf_r+0x240>)
 8001072:	429d      	cmp	r5, r3
 8001074:	d11b      	bne.n	80010ae <_vfiprintf_r+0x56>
 8001076:	6875      	ldr	r5, [r6, #4]
 8001078:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800107a:	07d9      	lsls	r1, r3, #31
 800107c:	d405      	bmi.n	800108a <_vfiprintf_r+0x32>
 800107e:	89ab      	ldrh	r3, [r5, #12]
 8001080:	059a      	lsls	r2, r3, #22
 8001082:	d402      	bmi.n	800108a <_vfiprintf_r+0x32>
 8001084:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001086:	f7ff ff61 	bl	8000f4c <__retarget_lock_acquire_recursive>
 800108a:	89ab      	ldrh	r3, [r5, #12]
 800108c:	071b      	lsls	r3, r3, #28
 800108e:	d501      	bpl.n	8001094 <_vfiprintf_r+0x3c>
 8001090:	692b      	ldr	r3, [r5, #16]
 8001092:	b9eb      	cbnz	r3, 80010d0 <_vfiprintf_r+0x78>
 8001094:	4629      	mov	r1, r5
 8001096:	4630      	mov	r0, r6
 8001098:	f000 fb5a 	bl	8001750 <__swsetup_r>
 800109c:	b1c0      	cbz	r0, 80010d0 <_vfiprintf_r+0x78>
 800109e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80010a0:	07dc      	lsls	r4, r3, #31
 80010a2:	d50e      	bpl.n	80010c2 <_vfiprintf_r+0x6a>
 80010a4:	f04f 30ff 	mov.w	r0, #4294967295
 80010a8:	b01d      	add	sp, #116	; 0x74
 80010aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80010ae:	4b7b      	ldr	r3, [pc, #492]	; (800129c <_vfiprintf_r+0x244>)
 80010b0:	429d      	cmp	r5, r3
 80010b2:	d101      	bne.n	80010b8 <_vfiprintf_r+0x60>
 80010b4:	68b5      	ldr	r5, [r6, #8]
 80010b6:	e7df      	b.n	8001078 <_vfiprintf_r+0x20>
 80010b8:	4b79      	ldr	r3, [pc, #484]	; (80012a0 <_vfiprintf_r+0x248>)
 80010ba:	429d      	cmp	r5, r3
 80010bc:	bf08      	it	eq
 80010be:	68f5      	ldreq	r5, [r6, #12]
 80010c0:	e7da      	b.n	8001078 <_vfiprintf_r+0x20>
 80010c2:	89ab      	ldrh	r3, [r5, #12]
 80010c4:	0598      	lsls	r0, r3, #22
 80010c6:	d4ed      	bmi.n	80010a4 <_vfiprintf_r+0x4c>
 80010c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80010ca:	f7ff ff40 	bl	8000f4e <__retarget_lock_release_recursive>
 80010ce:	e7e9      	b.n	80010a4 <_vfiprintf_r+0x4c>
 80010d0:	2300      	movs	r3, #0
 80010d2:	9309      	str	r3, [sp, #36]	; 0x24
 80010d4:	2320      	movs	r3, #32
 80010d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80010da:	f8cd 800c 	str.w	r8, [sp, #12]
 80010de:	2330      	movs	r3, #48	; 0x30
 80010e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80012a4 <_vfiprintf_r+0x24c>
 80010e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80010e8:	f04f 0901 	mov.w	r9, #1
 80010ec:	4623      	mov	r3, r4
 80010ee:	469a      	mov	sl, r3
 80010f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80010f4:	b10a      	cbz	r2, 80010fa <_vfiprintf_r+0xa2>
 80010f6:	2a25      	cmp	r2, #37	; 0x25
 80010f8:	d1f9      	bne.n	80010ee <_vfiprintf_r+0x96>
 80010fa:	ebba 0b04 	subs.w	fp, sl, r4
 80010fe:	d00b      	beq.n	8001118 <_vfiprintf_r+0xc0>
 8001100:	465b      	mov	r3, fp
 8001102:	4622      	mov	r2, r4
 8001104:	4629      	mov	r1, r5
 8001106:	4630      	mov	r0, r6
 8001108:	f7ff ff93 	bl	8001032 <__sfputs_r>
 800110c:	3001      	adds	r0, #1
 800110e:	f000 80aa 	beq.w	8001266 <_vfiprintf_r+0x20e>
 8001112:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001114:	445a      	add	r2, fp
 8001116:	9209      	str	r2, [sp, #36]	; 0x24
 8001118:	f89a 3000 	ldrb.w	r3, [sl]
 800111c:	2b00      	cmp	r3, #0
 800111e:	f000 80a2 	beq.w	8001266 <_vfiprintf_r+0x20e>
 8001122:	2300      	movs	r3, #0
 8001124:	f04f 32ff 	mov.w	r2, #4294967295
 8001128:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800112c:	f10a 0a01 	add.w	sl, sl, #1
 8001130:	9304      	str	r3, [sp, #16]
 8001132:	9307      	str	r3, [sp, #28]
 8001134:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001138:	931a      	str	r3, [sp, #104]	; 0x68
 800113a:	4654      	mov	r4, sl
 800113c:	2205      	movs	r2, #5
 800113e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001142:	4858      	ldr	r0, [pc, #352]	; (80012a4 <_vfiprintf_r+0x24c>)
 8001144:	f7ff f84c 	bl	80001e0 <memchr>
 8001148:	9a04      	ldr	r2, [sp, #16]
 800114a:	b9d8      	cbnz	r0, 8001184 <_vfiprintf_r+0x12c>
 800114c:	06d1      	lsls	r1, r2, #27
 800114e:	bf44      	itt	mi
 8001150:	2320      	movmi	r3, #32
 8001152:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001156:	0713      	lsls	r3, r2, #28
 8001158:	bf44      	itt	mi
 800115a:	232b      	movmi	r3, #43	; 0x2b
 800115c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001160:	f89a 3000 	ldrb.w	r3, [sl]
 8001164:	2b2a      	cmp	r3, #42	; 0x2a
 8001166:	d015      	beq.n	8001194 <_vfiprintf_r+0x13c>
 8001168:	9a07      	ldr	r2, [sp, #28]
 800116a:	4654      	mov	r4, sl
 800116c:	2000      	movs	r0, #0
 800116e:	f04f 0c0a 	mov.w	ip, #10
 8001172:	4621      	mov	r1, r4
 8001174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001178:	3b30      	subs	r3, #48	; 0x30
 800117a:	2b09      	cmp	r3, #9
 800117c:	d94e      	bls.n	800121c <_vfiprintf_r+0x1c4>
 800117e:	b1b0      	cbz	r0, 80011ae <_vfiprintf_r+0x156>
 8001180:	9207      	str	r2, [sp, #28]
 8001182:	e014      	b.n	80011ae <_vfiprintf_r+0x156>
 8001184:	eba0 0308 	sub.w	r3, r0, r8
 8001188:	fa09 f303 	lsl.w	r3, r9, r3
 800118c:	4313      	orrs	r3, r2
 800118e:	9304      	str	r3, [sp, #16]
 8001190:	46a2      	mov	sl, r4
 8001192:	e7d2      	b.n	800113a <_vfiprintf_r+0xe2>
 8001194:	9b03      	ldr	r3, [sp, #12]
 8001196:	1d19      	adds	r1, r3, #4
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	9103      	str	r1, [sp, #12]
 800119c:	2b00      	cmp	r3, #0
 800119e:	bfbb      	ittet	lt
 80011a0:	425b      	neglt	r3, r3
 80011a2:	f042 0202 	orrlt.w	r2, r2, #2
 80011a6:	9307      	strge	r3, [sp, #28]
 80011a8:	9307      	strlt	r3, [sp, #28]
 80011aa:	bfb8      	it	lt
 80011ac:	9204      	strlt	r2, [sp, #16]
 80011ae:	7823      	ldrb	r3, [r4, #0]
 80011b0:	2b2e      	cmp	r3, #46	; 0x2e
 80011b2:	d10c      	bne.n	80011ce <_vfiprintf_r+0x176>
 80011b4:	7863      	ldrb	r3, [r4, #1]
 80011b6:	2b2a      	cmp	r3, #42	; 0x2a
 80011b8:	d135      	bne.n	8001226 <_vfiprintf_r+0x1ce>
 80011ba:	9b03      	ldr	r3, [sp, #12]
 80011bc:	1d1a      	adds	r2, r3, #4
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	9203      	str	r2, [sp, #12]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	bfb8      	it	lt
 80011c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80011ca:	3402      	adds	r4, #2
 80011cc:	9305      	str	r3, [sp, #20]
 80011ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80012b4 <_vfiprintf_r+0x25c>
 80011d2:	7821      	ldrb	r1, [r4, #0]
 80011d4:	2203      	movs	r2, #3
 80011d6:	4650      	mov	r0, sl
 80011d8:	f7ff f802 	bl	80001e0 <memchr>
 80011dc:	b140      	cbz	r0, 80011f0 <_vfiprintf_r+0x198>
 80011de:	2340      	movs	r3, #64	; 0x40
 80011e0:	eba0 000a 	sub.w	r0, r0, sl
 80011e4:	fa03 f000 	lsl.w	r0, r3, r0
 80011e8:	9b04      	ldr	r3, [sp, #16]
 80011ea:	4303      	orrs	r3, r0
 80011ec:	3401      	adds	r4, #1
 80011ee:	9304      	str	r3, [sp, #16]
 80011f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80011f4:	482c      	ldr	r0, [pc, #176]	; (80012a8 <_vfiprintf_r+0x250>)
 80011f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80011fa:	2206      	movs	r2, #6
 80011fc:	f7fe fff0 	bl	80001e0 <memchr>
 8001200:	2800      	cmp	r0, #0
 8001202:	d03f      	beq.n	8001284 <_vfiprintf_r+0x22c>
 8001204:	4b29      	ldr	r3, [pc, #164]	; (80012ac <_vfiprintf_r+0x254>)
 8001206:	bb1b      	cbnz	r3, 8001250 <_vfiprintf_r+0x1f8>
 8001208:	9b03      	ldr	r3, [sp, #12]
 800120a:	3307      	adds	r3, #7
 800120c:	f023 0307 	bic.w	r3, r3, #7
 8001210:	3308      	adds	r3, #8
 8001212:	9303      	str	r3, [sp, #12]
 8001214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001216:	443b      	add	r3, r7
 8001218:	9309      	str	r3, [sp, #36]	; 0x24
 800121a:	e767      	b.n	80010ec <_vfiprintf_r+0x94>
 800121c:	fb0c 3202 	mla	r2, ip, r2, r3
 8001220:	460c      	mov	r4, r1
 8001222:	2001      	movs	r0, #1
 8001224:	e7a5      	b.n	8001172 <_vfiprintf_r+0x11a>
 8001226:	2300      	movs	r3, #0
 8001228:	3401      	adds	r4, #1
 800122a:	9305      	str	r3, [sp, #20]
 800122c:	4619      	mov	r1, r3
 800122e:	f04f 0c0a 	mov.w	ip, #10
 8001232:	4620      	mov	r0, r4
 8001234:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001238:	3a30      	subs	r2, #48	; 0x30
 800123a:	2a09      	cmp	r2, #9
 800123c:	d903      	bls.n	8001246 <_vfiprintf_r+0x1ee>
 800123e:	2b00      	cmp	r3, #0
 8001240:	d0c5      	beq.n	80011ce <_vfiprintf_r+0x176>
 8001242:	9105      	str	r1, [sp, #20]
 8001244:	e7c3      	b.n	80011ce <_vfiprintf_r+0x176>
 8001246:	fb0c 2101 	mla	r1, ip, r1, r2
 800124a:	4604      	mov	r4, r0
 800124c:	2301      	movs	r3, #1
 800124e:	e7f0      	b.n	8001232 <_vfiprintf_r+0x1da>
 8001250:	ab03      	add	r3, sp, #12
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	462a      	mov	r2, r5
 8001256:	4b16      	ldr	r3, [pc, #88]	; (80012b0 <_vfiprintf_r+0x258>)
 8001258:	a904      	add	r1, sp, #16
 800125a:	4630      	mov	r0, r6
 800125c:	f3af 8000 	nop.w
 8001260:	4607      	mov	r7, r0
 8001262:	1c78      	adds	r0, r7, #1
 8001264:	d1d6      	bne.n	8001214 <_vfiprintf_r+0x1bc>
 8001266:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001268:	07d9      	lsls	r1, r3, #31
 800126a:	d405      	bmi.n	8001278 <_vfiprintf_r+0x220>
 800126c:	89ab      	ldrh	r3, [r5, #12]
 800126e:	059a      	lsls	r2, r3, #22
 8001270:	d402      	bmi.n	8001278 <_vfiprintf_r+0x220>
 8001272:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001274:	f7ff fe6b 	bl	8000f4e <__retarget_lock_release_recursive>
 8001278:	89ab      	ldrh	r3, [r5, #12]
 800127a:	065b      	lsls	r3, r3, #25
 800127c:	f53f af12 	bmi.w	80010a4 <_vfiprintf_r+0x4c>
 8001280:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001282:	e711      	b.n	80010a8 <_vfiprintf_r+0x50>
 8001284:	ab03      	add	r3, sp, #12
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	462a      	mov	r2, r5
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <_vfiprintf_r+0x258>)
 800128c:	a904      	add	r1, sp, #16
 800128e:	4630      	mov	r0, r6
 8001290:	f000 f880 	bl	8001394 <_printf_i>
 8001294:	e7e4      	b.n	8001260 <_vfiprintf_r+0x208>
 8001296:	bf00      	nop
 8001298:	08001e24 	.word	0x08001e24
 800129c:	08001e44 	.word	0x08001e44
 80012a0:	08001e04 	.word	0x08001e04
 80012a4:	08001e64 	.word	0x08001e64
 80012a8:	08001e6e 	.word	0x08001e6e
 80012ac:	00000000 	.word	0x00000000
 80012b0:	08001033 	.word	0x08001033
 80012b4:	08001e6a 	.word	0x08001e6a

080012b8 <_printf_common>:
 80012b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012bc:	4616      	mov	r6, r2
 80012be:	4699      	mov	r9, r3
 80012c0:	688a      	ldr	r2, [r1, #8]
 80012c2:	690b      	ldr	r3, [r1, #16]
 80012c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80012c8:	4293      	cmp	r3, r2
 80012ca:	bfb8      	it	lt
 80012cc:	4613      	movlt	r3, r2
 80012ce:	6033      	str	r3, [r6, #0]
 80012d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80012d4:	4607      	mov	r7, r0
 80012d6:	460c      	mov	r4, r1
 80012d8:	b10a      	cbz	r2, 80012de <_printf_common+0x26>
 80012da:	3301      	adds	r3, #1
 80012dc:	6033      	str	r3, [r6, #0]
 80012de:	6823      	ldr	r3, [r4, #0]
 80012e0:	0699      	lsls	r1, r3, #26
 80012e2:	bf42      	ittt	mi
 80012e4:	6833      	ldrmi	r3, [r6, #0]
 80012e6:	3302      	addmi	r3, #2
 80012e8:	6033      	strmi	r3, [r6, #0]
 80012ea:	6825      	ldr	r5, [r4, #0]
 80012ec:	f015 0506 	ands.w	r5, r5, #6
 80012f0:	d106      	bne.n	8001300 <_printf_common+0x48>
 80012f2:	f104 0a19 	add.w	sl, r4, #25
 80012f6:	68e3      	ldr	r3, [r4, #12]
 80012f8:	6832      	ldr	r2, [r6, #0]
 80012fa:	1a9b      	subs	r3, r3, r2
 80012fc:	42ab      	cmp	r3, r5
 80012fe:	dc26      	bgt.n	800134e <_printf_common+0x96>
 8001300:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001304:	1e13      	subs	r3, r2, #0
 8001306:	6822      	ldr	r2, [r4, #0]
 8001308:	bf18      	it	ne
 800130a:	2301      	movne	r3, #1
 800130c:	0692      	lsls	r2, r2, #26
 800130e:	d42b      	bmi.n	8001368 <_printf_common+0xb0>
 8001310:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001314:	4649      	mov	r1, r9
 8001316:	4638      	mov	r0, r7
 8001318:	47c0      	blx	r8
 800131a:	3001      	adds	r0, #1
 800131c:	d01e      	beq.n	800135c <_printf_common+0xa4>
 800131e:	6823      	ldr	r3, [r4, #0]
 8001320:	68e5      	ldr	r5, [r4, #12]
 8001322:	6832      	ldr	r2, [r6, #0]
 8001324:	f003 0306 	and.w	r3, r3, #6
 8001328:	2b04      	cmp	r3, #4
 800132a:	bf08      	it	eq
 800132c:	1aad      	subeq	r5, r5, r2
 800132e:	68a3      	ldr	r3, [r4, #8]
 8001330:	6922      	ldr	r2, [r4, #16]
 8001332:	bf0c      	ite	eq
 8001334:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001338:	2500      	movne	r5, #0
 800133a:	4293      	cmp	r3, r2
 800133c:	bfc4      	itt	gt
 800133e:	1a9b      	subgt	r3, r3, r2
 8001340:	18ed      	addgt	r5, r5, r3
 8001342:	2600      	movs	r6, #0
 8001344:	341a      	adds	r4, #26
 8001346:	42b5      	cmp	r5, r6
 8001348:	d11a      	bne.n	8001380 <_printf_common+0xc8>
 800134a:	2000      	movs	r0, #0
 800134c:	e008      	b.n	8001360 <_printf_common+0xa8>
 800134e:	2301      	movs	r3, #1
 8001350:	4652      	mov	r2, sl
 8001352:	4649      	mov	r1, r9
 8001354:	4638      	mov	r0, r7
 8001356:	47c0      	blx	r8
 8001358:	3001      	adds	r0, #1
 800135a:	d103      	bne.n	8001364 <_printf_common+0xac>
 800135c:	f04f 30ff 	mov.w	r0, #4294967295
 8001360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001364:	3501      	adds	r5, #1
 8001366:	e7c6      	b.n	80012f6 <_printf_common+0x3e>
 8001368:	18e1      	adds	r1, r4, r3
 800136a:	1c5a      	adds	r2, r3, #1
 800136c:	2030      	movs	r0, #48	; 0x30
 800136e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001372:	4422      	add	r2, r4
 8001374:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001378:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800137c:	3302      	adds	r3, #2
 800137e:	e7c7      	b.n	8001310 <_printf_common+0x58>
 8001380:	2301      	movs	r3, #1
 8001382:	4622      	mov	r2, r4
 8001384:	4649      	mov	r1, r9
 8001386:	4638      	mov	r0, r7
 8001388:	47c0      	blx	r8
 800138a:	3001      	adds	r0, #1
 800138c:	d0e6      	beq.n	800135c <_printf_common+0xa4>
 800138e:	3601      	adds	r6, #1
 8001390:	e7d9      	b.n	8001346 <_printf_common+0x8e>
	...

08001394 <_printf_i>:
 8001394:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001398:	460c      	mov	r4, r1
 800139a:	4691      	mov	r9, r2
 800139c:	7e27      	ldrb	r7, [r4, #24]
 800139e:	990c      	ldr	r1, [sp, #48]	; 0x30
 80013a0:	2f78      	cmp	r7, #120	; 0x78
 80013a2:	4680      	mov	r8, r0
 80013a4:	469a      	mov	sl, r3
 80013a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80013aa:	d807      	bhi.n	80013bc <_printf_i+0x28>
 80013ac:	2f62      	cmp	r7, #98	; 0x62
 80013ae:	d80a      	bhi.n	80013c6 <_printf_i+0x32>
 80013b0:	2f00      	cmp	r7, #0
 80013b2:	f000 80d8 	beq.w	8001566 <_printf_i+0x1d2>
 80013b6:	2f58      	cmp	r7, #88	; 0x58
 80013b8:	f000 80a3 	beq.w	8001502 <_printf_i+0x16e>
 80013bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80013c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80013c4:	e03a      	b.n	800143c <_printf_i+0xa8>
 80013c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80013ca:	2b15      	cmp	r3, #21
 80013cc:	d8f6      	bhi.n	80013bc <_printf_i+0x28>
 80013ce:	a001      	add	r0, pc, #4	; (adr r0, 80013d4 <_printf_i+0x40>)
 80013d0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80013d4:	0800142d 	.word	0x0800142d
 80013d8:	08001441 	.word	0x08001441
 80013dc:	080013bd 	.word	0x080013bd
 80013e0:	080013bd 	.word	0x080013bd
 80013e4:	080013bd 	.word	0x080013bd
 80013e8:	080013bd 	.word	0x080013bd
 80013ec:	08001441 	.word	0x08001441
 80013f0:	080013bd 	.word	0x080013bd
 80013f4:	080013bd 	.word	0x080013bd
 80013f8:	080013bd 	.word	0x080013bd
 80013fc:	080013bd 	.word	0x080013bd
 8001400:	0800154d 	.word	0x0800154d
 8001404:	08001471 	.word	0x08001471
 8001408:	0800152f 	.word	0x0800152f
 800140c:	080013bd 	.word	0x080013bd
 8001410:	080013bd 	.word	0x080013bd
 8001414:	0800156f 	.word	0x0800156f
 8001418:	080013bd 	.word	0x080013bd
 800141c:	08001471 	.word	0x08001471
 8001420:	080013bd 	.word	0x080013bd
 8001424:	080013bd 	.word	0x080013bd
 8001428:	08001537 	.word	0x08001537
 800142c:	680b      	ldr	r3, [r1, #0]
 800142e:	1d1a      	adds	r2, r3, #4
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	600a      	str	r2, [r1, #0]
 8001434:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001438:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800143c:	2301      	movs	r3, #1
 800143e:	e0a3      	b.n	8001588 <_printf_i+0x1f4>
 8001440:	6825      	ldr	r5, [r4, #0]
 8001442:	6808      	ldr	r0, [r1, #0]
 8001444:	062e      	lsls	r6, r5, #24
 8001446:	f100 0304 	add.w	r3, r0, #4
 800144a:	d50a      	bpl.n	8001462 <_printf_i+0xce>
 800144c:	6805      	ldr	r5, [r0, #0]
 800144e:	600b      	str	r3, [r1, #0]
 8001450:	2d00      	cmp	r5, #0
 8001452:	da03      	bge.n	800145c <_printf_i+0xc8>
 8001454:	232d      	movs	r3, #45	; 0x2d
 8001456:	426d      	negs	r5, r5
 8001458:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800145c:	485e      	ldr	r0, [pc, #376]	; (80015d8 <_printf_i+0x244>)
 800145e:	230a      	movs	r3, #10
 8001460:	e019      	b.n	8001496 <_printf_i+0x102>
 8001462:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001466:	6805      	ldr	r5, [r0, #0]
 8001468:	600b      	str	r3, [r1, #0]
 800146a:	bf18      	it	ne
 800146c:	b22d      	sxthne	r5, r5
 800146e:	e7ef      	b.n	8001450 <_printf_i+0xbc>
 8001470:	680b      	ldr	r3, [r1, #0]
 8001472:	6825      	ldr	r5, [r4, #0]
 8001474:	1d18      	adds	r0, r3, #4
 8001476:	6008      	str	r0, [r1, #0]
 8001478:	0628      	lsls	r0, r5, #24
 800147a:	d501      	bpl.n	8001480 <_printf_i+0xec>
 800147c:	681d      	ldr	r5, [r3, #0]
 800147e:	e002      	b.n	8001486 <_printf_i+0xf2>
 8001480:	0669      	lsls	r1, r5, #25
 8001482:	d5fb      	bpl.n	800147c <_printf_i+0xe8>
 8001484:	881d      	ldrh	r5, [r3, #0]
 8001486:	4854      	ldr	r0, [pc, #336]	; (80015d8 <_printf_i+0x244>)
 8001488:	2f6f      	cmp	r7, #111	; 0x6f
 800148a:	bf0c      	ite	eq
 800148c:	2308      	moveq	r3, #8
 800148e:	230a      	movne	r3, #10
 8001490:	2100      	movs	r1, #0
 8001492:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001496:	6866      	ldr	r6, [r4, #4]
 8001498:	60a6      	str	r6, [r4, #8]
 800149a:	2e00      	cmp	r6, #0
 800149c:	bfa2      	ittt	ge
 800149e:	6821      	ldrge	r1, [r4, #0]
 80014a0:	f021 0104 	bicge.w	r1, r1, #4
 80014a4:	6021      	strge	r1, [r4, #0]
 80014a6:	b90d      	cbnz	r5, 80014ac <_printf_i+0x118>
 80014a8:	2e00      	cmp	r6, #0
 80014aa:	d04d      	beq.n	8001548 <_printf_i+0x1b4>
 80014ac:	4616      	mov	r6, r2
 80014ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80014b2:	fb03 5711 	mls	r7, r3, r1, r5
 80014b6:	5dc7      	ldrb	r7, [r0, r7]
 80014b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80014bc:	462f      	mov	r7, r5
 80014be:	42bb      	cmp	r3, r7
 80014c0:	460d      	mov	r5, r1
 80014c2:	d9f4      	bls.n	80014ae <_printf_i+0x11a>
 80014c4:	2b08      	cmp	r3, #8
 80014c6:	d10b      	bne.n	80014e0 <_printf_i+0x14c>
 80014c8:	6823      	ldr	r3, [r4, #0]
 80014ca:	07df      	lsls	r7, r3, #31
 80014cc:	d508      	bpl.n	80014e0 <_printf_i+0x14c>
 80014ce:	6923      	ldr	r3, [r4, #16]
 80014d0:	6861      	ldr	r1, [r4, #4]
 80014d2:	4299      	cmp	r1, r3
 80014d4:	bfde      	ittt	le
 80014d6:	2330      	movle	r3, #48	; 0x30
 80014d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80014dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80014e0:	1b92      	subs	r2, r2, r6
 80014e2:	6122      	str	r2, [r4, #16]
 80014e4:	f8cd a000 	str.w	sl, [sp]
 80014e8:	464b      	mov	r3, r9
 80014ea:	aa03      	add	r2, sp, #12
 80014ec:	4621      	mov	r1, r4
 80014ee:	4640      	mov	r0, r8
 80014f0:	f7ff fee2 	bl	80012b8 <_printf_common>
 80014f4:	3001      	adds	r0, #1
 80014f6:	d14c      	bne.n	8001592 <_printf_i+0x1fe>
 80014f8:	f04f 30ff 	mov.w	r0, #4294967295
 80014fc:	b004      	add	sp, #16
 80014fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001502:	4835      	ldr	r0, [pc, #212]	; (80015d8 <_printf_i+0x244>)
 8001504:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001508:	6823      	ldr	r3, [r4, #0]
 800150a:	680e      	ldr	r6, [r1, #0]
 800150c:	061f      	lsls	r7, r3, #24
 800150e:	f856 5b04 	ldr.w	r5, [r6], #4
 8001512:	600e      	str	r6, [r1, #0]
 8001514:	d514      	bpl.n	8001540 <_printf_i+0x1ac>
 8001516:	07d9      	lsls	r1, r3, #31
 8001518:	bf44      	itt	mi
 800151a:	f043 0320 	orrmi.w	r3, r3, #32
 800151e:	6023      	strmi	r3, [r4, #0]
 8001520:	b91d      	cbnz	r5, 800152a <_printf_i+0x196>
 8001522:	6823      	ldr	r3, [r4, #0]
 8001524:	f023 0320 	bic.w	r3, r3, #32
 8001528:	6023      	str	r3, [r4, #0]
 800152a:	2310      	movs	r3, #16
 800152c:	e7b0      	b.n	8001490 <_printf_i+0xfc>
 800152e:	6823      	ldr	r3, [r4, #0]
 8001530:	f043 0320 	orr.w	r3, r3, #32
 8001534:	6023      	str	r3, [r4, #0]
 8001536:	2378      	movs	r3, #120	; 0x78
 8001538:	4828      	ldr	r0, [pc, #160]	; (80015dc <_printf_i+0x248>)
 800153a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800153e:	e7e3      	b.n	8001508 <_printf_i+0x174>
 8001540:	065e      	lsls	r6, r3, #25
 8001542:	bf48      	it	mi
 8001544:	b2ad      	uxthmi	r5, r5
 8001546:	e7e6      	b.n	8001516 <_printf_i+0x182>
 8001548:	4616      	mov	r6, r2
 800154a:	e7bb      	b.n	80014c4 <_printf_i+0x130>
 800154c:	680b      	ldr	r3, [r1, #0]
 800154e:	6826      	ldr	r6, [r4, #0]
 8001550:	6960      	ldr	r0, [r4, #20]
 8001552:	1d1d      	adds	r5, r3, #4
 8001554:	600d      	str	r5, [r1, #0]
 8001556:	0635      	lsls	r5, r6, #24
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	d501      	bpl.n	8001560 <_printf_i+0x1cc>
 800155c:	6018      	str	r0, [r3, #0]
 800155e:	e002      	b.n	8001566 <_printf_i+0x1d2>
 8001560:	0671      	lsls	r1, r6, #25
 8001562:	d5fb      	bpl.n	800155c <_printf_i+0x1c8>
 8001564:	8018      	strh	r0, [r3, #0]
 8001566:	2300      	movs	r3, #0
 8001568:	6123      	str	r3, [r4, #16]
 800156a:	4616      	mov	r6, r2
 800156c:	e7ba      	b.n	80014e4 <_printf_i+0x150>
 800156e:	680b      	ldr	r3, [r1, #0]
 8001570:	1d1a      	adds	r2, r3, #4
 8001572:	600a      	str	r2, [r1, #0]
 8001574:	681e      	ldr	r6, [r3, #0]
 8001576:	6862      	ldr	r2, [r4, #4]
 8001578:	2100      	movs	r1, #0
 800157a:	4630      	mov	r0, r6
 800157c:	f7fe fe30 	bl	80001e0 <memchr>
 8001580:	b108      	cbz	r0, 8001586 <_printf_i+0x1f2>
 8001582:	1b80      	subs	r0, r0, r6
 8001584:	6060      	str	r0, [r4, #4]
 8001586:	6863      	ldr	r3, [r4, #4]
 8001588:	6123      	str	r3, [r4, #16]
 800158a:	2300      	movs	r3, #0
 800158c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001590:	e7a8      	b.n	80014e4 <_printf_i+0x150>
 8001592:	6923      	ldr	r3, [r4, #16]
 8001594:	4632      	mov	r2, r6
 8001596:	4649      	mov	r1, r9
 8001598:	4640      	mov	r0, r8
 800159a:	47d0      	blx	sl
 800159c:	3001      	adds	r0, #1
 800159e:	d0ab      	beq.n	80014f8 <_printf_i+0x164>
 80015a0:	6823      	ldr	r3, [r4, #0]
 80015a2:	079b      	lsls	r3, r3, #30
 80015a4:	d413      	bmi.n	80015ce <_printf_i+0x23a>
 80015a6:	68e0      	ldr	r0, [r4, #12]
 80015a8:	9b03      	ldr	r3, [sp, #12]
 80015aa:	4298      	cmp	r0, r3
 80015ac:	bfb8      	it	lt
 80015ae:	4618      	movlt	r0, r3
 80015b0:	e7a4      	b.n	80014fc <_printf_i+0x168>
 80015b2:	2301      	movs	r3, #1
 80015b4:	4632      	mov	r2, r6
 80015b6:	4649      	mov	r1, r9
 80015b8:	4640      	mov	r0, r8
 80015ba:	47d0      	blx	sl
 80015bc:	3001      	adds	r0, #1
 80015be:	d09b      	beq.n	80014f8 <_printf_i+0x164>
 80015c0:	3501      	adds	r5, #1
 80015c2:	68e3      	ldr	r3, [r4, #12]
 80015c4:	9903      	ldr	r1, [sp, #12]
 80015c6:	1a5b      	subs	r3, r3, r1
 80015c8:	42ab      	cmp	r3, r5
 80015ca:	dcf2      	bgt.n	80015b2 <_printf_i+0x21e>
 80015cc:	e7eb      	b.n	80015a6 <_printf_i+0x212>
 80015ce:	2500      	movs	r5, #0
 80015d0:	f104 0619 	add.w	r6, r4, #25
 80015d4:	e7f5      	b.n	80015c2 <_printf_i+0x22e>
 80015d6:	bf00      	nop
 80015d8:	08001e75 	.word	0x08001e75
 80015dc:	08001e86 	.word	0x08001e86

080015e0 <_sbrk_r>:
 80015e0:	b538      	push	{r3, r4, r5, lr}
 80015e2:	4d06      	ldr	r5, [pc, #24]	; (80015fc <_sbrk_r+0x1c>)
 80015e4:	2300      	movs	r3, #0
 80015e6:	4604      	mov	r4, r0
 80015e8:	4608      	mov	r0, r1
 80015ea:	602b      	str	r3, [r5, #0]
 80015ec:	f7ff faf6 	bl	8000bdc <_sbrk>
 80015f0:	1c43      	adds	r3, r0, #1
 80015f2:	d102      	bne.n	80015fa <_sbrk_r+0x1a>
 80015f4:	682b      	ldr	r3, [r5, #0]
 80015f6:	b103      	cbz	r3, 80015fa <_sbrk_r+0x1a>
 80015f8:	6023      	str	r3, [r4, #0]
 80015fa:	bd38      	pop	{r3, r4, r5, pc}
 80015fc:	200004dc 	.word	0x200004dc

08001600 <__sread>:
 8001600:	b510      	push	{r4, lr}
 8001602:	460c      	mov	r4, r1
 8001604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001608:	f000 fab4 	bl	8001b74 <_read_r>
 800160c:	2800      	cmp	r0, #0
 800160e:	bfab      	itete	ge
 8001610:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001612:	89a3      	ldrhlt	r3, [r4, #12]
 8001614:	181b      	addge	r3, r3, r0
 8001616:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800161a:	bfac      	ite	ge
 800161c:	6563      	strge	r3, [r4, #84]	; 0x54
 800161e:	81a3      	strhlt	r3, [r4, #12]
 8001620:	bd10      	pop	{r4, pc}

08001622 <__swrite>:
 8001622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001626:	461f      	mov	r7, r3
 8001628:	898b      	ldrh	r3, [r1, #12]
 800162a:	05db      	lsls	r3, r3, #23
 800162c:	4605      	mov	r5, r0
 800162e:	460c      	mov	r4, r1
 8001630:	4616      	mov	r6, r2
 8001632:	d505      	bpl.n	8001640 <__swrite+0x1e>
 8001634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001638:	2302      	movs	r3, #2
 800163a:	2200      	movs	r2, #0
 800163c:	f000 f9c8 	bl	80019d0 <_lseek_r>
 8001640:	89a3      	ldrh	r3, [r4, #12]
 8001642:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001646:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800164a:	81a3      	strh	r3, [r4, #12]
 800164c:	4632      	mov	r2, r6
 800164e:	463b      	mov	r3, r7
 8001650:	4628      	mov	r0, r5
 8001652:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001656:	f000 b869 	b.w	800172c <_write_r>

0800165a <__sseek>:
 800165a:	b510      	push	{r4, lr}
 800165c:	460c      	mov	r4, r1
 800165e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001662:	f000 f9b5 	bl	80019d0 <_lseek_r>
 8001666:	1c43      	adds	r3, r0, #1
 8001668:	89a3      	ldrh	r3, [r4, #12]
 800166a:	bf15      	itete	ne
 800166c:	6560      	strne	r0, [r4, #84]	; 0x54
 800166e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001672:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001676:	81a3      	strheq	r3, [r4, #12]
 8001678:	bf18      	it	ne
 800167a:	81a3      	strhne	r3, [r4, #12]
 800167c:	bd10      	pop	{r4, pc}

0800167e <__sclose>:
 800167e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001682:	f000 b8d3 	b.w	800182c <_close_r>
	...

08001688 <__swbuf_r>:
 8001688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800168a:	460e      	mov	r6, r1
 800168c:	4614      	mov	r4, r2
 800168e:	4605      	mov	r5, r0
 8001690:	b118      	cbz	r0, 800169a <__swbuf_r+0x12>
 8001692:	6983      	ldr	r3, [r0, #24]
 8001694:	b90b      	cbnz	r3, 800169a <__swbuf_r+0x12>
 8001696:	f7ff fbbb 	bl	8000e10 <__sinit>
 800169a:	4b21      	ldr	r3, [pc, #132]	; (8001720 <__swbuf_r+0x98>)
 800169c:	429c      	cmp	r4, r3
 800169e:	d12b      	bne.n	80016f8 <__swbuf_r+0x70>
 80016a0:	686c      	ldr	r4, [r5, #4]
 80016a2:	69a3      	ldr	r3, [r4, #24]
 80016a4:	60a3      	str	r3, [r4, #8]
 80016a6:	89a3      	ldrh	r3, [r4, #12]
 80016a8:	071a      	lsls	r2, r3, #28
 80016aa:	d52f      	bpl.n	800170c <__swbuf_r+0x84>
 80016ac:	6923      	ldr	r3, [r4, #16]
 80016ae:	b36b      	cbz	r3, 800170c <__swbuf_r+0x84>
 80016b0:	6923      	ldr	r3, [r4, #16]
 80016b2:	6820      	ldr	r0, [r4, #0]
 80016b4:	1ac0      	subs	r0, r0, r3
 80016b6:	6963      	ldr	r3, [r4, #20]
 80016b8:	b2f6      	uxtb	r6, r6
 80016ba:	4283      	cmp	r3, r0
 80016bc:	4637      	mov	r7, r6
 80016be:	dc04      	bgt.n	80016ca <__swbuf_r+0x42>
 80016c0:	4621      	mov	r1, r4
 80016c2:	4628      	mov	r0, r5
 80016c4:	f000 f948 	bl	8001958 <_fflush_r>
 80016c8:	bb30      	cbnz	r0, 8001718 <__swbuf_r+0x90>
 80016ca:	68a3      	ldr	r3, [r4, #8]
 80016cc:	3b01      	subs	r3, #1
 80016ce:	60a3      	str	r3, [r4, #8]
 80016d0:	6823      	ldr	r3, [r4, #0]
 80016d2:	1c5a      	adds	r2, r3, #1
 80016d4:	6022      	str	r2, [r4, #0]
 80016d6:	701e      	strb	r6, [r3, #0]
 80016d8:	6963      	ldr	r3, [r4, #20]
 80016da:	3001      	adds	r0, #1
 80016dc:	4283      	cmp	r3, r0
 80016de:	d004      	beq.n	80016ea <__swbuf_r+0x62>
 80016e0:	89a3      	ldrh	r3, [r4, #12]
 80016e2:	07db      	lsls	r3, r3, #31
 80016e4:	d506      	bpl.n	80016f4 <__swbuf_r+0x6c>
 80016e6:	2e0a      	cmp	r6, #10
 80016e8:	d104      	bne.n	80016f4 <__swbuf_r+0x6c>
 80016ea:	4621      	mov	r1, r4
 80016ec:	4628      	mov	r0, r5
 80016ee:	f000 f933 	bl	8001958 <_fflush_r>
 80016f2:	b988      	cbnz	r0, 8001718 <__swbuf_r+0x90>
 80016f4:	4638      	mov	r0, r7
 80016f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016f8:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <__swbuf_r+0x9c>)
 80016fa:	429c      	cmp	r4, r3
 80016fc:	d101      	bne.n	8001702 <__swbuf_r+0x7a>
 80016fe:	68ac      	ldr	r4, [r5, #8]
 8001700:	e7cf      	b.n	80016a2 <__swbuf_r+0x1a>
 8001702:	4b09      	ldr	r3, [pc, #36]	; (8001728 <__swbuf_r+0xa0>)
 8001704:	429c      	cmp	r4, r3
 8001706:	bf08      	it	eq
 8001708:	68ec      	ldreq	r4, [r5, #12]
 800170a:	e7ca      	b.n	80016a2 <__swbuf_r+0x1a>
 800170c:	4621      	mov	r1, r4
 800170e:	4628      	mov	r0, r5
 8001710:	f000 f81e 	bl	8001750 <__swsetup_r>
 8001714:	2800      	cmp	r0, #0
 8001716:	d0cb      	beq.n	80016b0 <__swbuf_r+0x28>
 8001718:	f04f 37ff 	mov.w	r7, #4294967295
 800171c:	e7ea      	b.n	80016f4 <__swbuf_r+0x6c>
 800171e:	bf00      	nop
 8001720:	08001e24 	.word	0x08001e24
 8001724:	08001e44 	.word	0x08001e44
 8001728:	08001e04 	.word	0x08001e04

0800172c <_write_r>:
 800172c:	b538      	push	{r3, r4, r5, lr}
 800172e:	4d07      	ldr	r5, [pc, #28]	; (800174c <_write_r+0x20>)
 8001730:	4604      	mov	r4, r0
 8001732:	4608      	mov	r0, r1
 8001734:	4611      	mov	r1, r2
 8001736:	2200      	movs	r2, #0
 8001738:	602a      	str	r2, [r5, #0]
 800173a:	461a      	mov	r2, r3
 800173c:	f7ff f9fd 	bl	8000b3a <_write>
 8001740:	1c43      	adds	r3, r0, #1
 8001742:	d102      	bne.n	800174a <_write_r+0x1e>
 8001744:	682b      	ldr	r3, [r5, #0]
 8001746:	b103      	cbz	r3, 800174a <_write_r+0x1e>
 8001748:	6023      	str	r3, [r4, #0]
 800174a:	bd38      	pop	{r3, r4, r5, pc}
 800174c:	200004dc 	.word	0x200004dc

08001750 <__swsetup_r>:
 8001750:	4b32      	ldr	r3, [pc, #200]	; (800181c <__swsetup_r+0xcc>)
 8001752:	b570      	push	{r4, r5, r6, lr}
 8001754:	681d      	ldr	r5, [r3, #0]
 8001756:	4606      	mov	r6, r0
 8001758:	460c      	mov	r4, r1
 800175a:	b125      	cbz	r5, 8001766 <__swsetup_r+0x16>
 800175c:	69ab      	ldr	r3, [r5, #24]
 800175e:	b913      	cbnz	r3, 8001766 <__swsetup_r+0x16>
 8001760:	4628      	mov	r0, r5
 8001762:	f7ff fb55 	bl	8000e10 <__sinit>
 8001766:	4b2e      	ldr	r3, [pc, #184]	; (8001820 <__swsetup_r+0xd0>)
 8001768:	429c      	cmp	r4, r3
 800176a:	d10f      	bne.n	800178c <__swsetup_r+0x3c>
 800176c:	686c      	ldr	r4, [r5, #4]
 800176e:	89a3      	ldrh	r3, [r4, #12]
 8001770:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001774:	0719      	lsls	r1, r3, #28
 8001776:	d42c      	bmi.n	80017d2 <__swsetup_r+0x82>
 8001778:	06dd      	lsls	r5, r3, #27
 800177a:	d411      	bmi.n	80017a0 <__swsetup_r+0x50>
 800177c:	2309      	movs	r3, #9
 800177e:	6033      	str	r3, [r6, #0]
 8001780:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001784:	81a3      	strh	r3, [r4, #12]
 8001786:	f04f 30ff 	mov.w	r0, #4294967295
 800178a:	e03e      	b.n	800180a <__swsetup_r+0xba>
 800178c:	4b25      	ldr	r3, [pc, #148]	; (8001824 <__swsetup_r+0xd4>)
 800178e:	429c      	cmp	r4, r3
 8001790:	d101      	bne.n	8001796 <__swsetup_r+0x46>
 8001792:	68ac      	ldr	r4, [r5, #8]
 8001794:	e7eb      	b.n	800176e <__swsetup_r+0x1e>
 8001796:	4b24      	ldr	r3, [pc, #144]	; (8001828 <__swsetup_r+0xd8>)
 8001798:	429c      	cmp	r4, r3
 800179a:	bf08      	it	eq
 800179c:	68ec      	ldreq	r4, [r5, #12]
 800179e:	e7e6      	b.n	800176e <__swsetup_r+0x1e>
 80017a0:	0758      	lsls	r0, r3, #29
 80017a2:	d512      	bpl.n	80017ca <__swsetup_r+0x7a>
 80017a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80017a6:	b141      	cbz	r1, 80017ba <__swsetup_r+0x6a>
 80017a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80017ac:	4299      	cmp	r1, r3
 80017ae:	d002      	beq.n	80017b6 <__swsetup_r+0x66>
 80017b0:	4630      	mov	r0, r6
 80017b2:	f000 f98f 	bl	8001ad4 <_free_r>
 80017b6:	2300      	movs	r3, #0
 80017b8:	6363      	str	r3, [r4, #52]	; 0x34
 80017ba:	89a3      	ldrh	r3, [r4, #12]
 80017bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80017c0:	81a3      	strh	r3, [r4, #12]
 80017c2:	2300      	movs	r3, #0
 80017c4:	6063      	str	r3, [r4, #4]
 80017c6:	6923      	ldr	r3, [r4, #16]
 80017c8:	6023      	str	r3, [r4, #0]
 80017ca:	89a3      	ldrh	r3, [r4, #12]
 80017cc:	f043 0308 	orr.w	r3, r3, #8
 80017d0:	81a3      	strh	r3, [r4, #12]
 80017d2:	6923      	ldr	r3, [r4, #16]
 80017d4:	b94b      	cbnz	r3, 80017ea <__swsetup_r+0x9a>
 80017d6:	89a3      	ldrh	r3, [r4, #12]
 80017d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80017dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017e0:	d003      	beq.n	80017ea <__swsetup_r+0x9a>
 80017e2:	4621      	mov	r1, r4
 80017e4:	4630      	mov	r0, r6
 80017e6:	f000 f929 	bl	8001a3c <__smakebuf_r>
 80017ea:	89a0      	ldrh	r0, [r4, #12]
 80017ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80017f0:	f010 0301 	ands.w	r3, r0, #1
 80017f4:	d00a      	beq.n	800180c <__swsetup_r+0xbc>
 80017f6:	2300      	movs	r3, #0
 80017f8:	60a3      	str	r3, [r4, #8]
 80017fa:	6963      	ldr	r3, [r4, #20]
 80017fc:	425b      	negs	r3, r3
 80017fe:	61a3      	str	r3, [r4, #24]
 8001800:	6923      	ldr	r3, [r4, #16]
 8001802:	b943      	cbnz	r3, 8001816 <__swsetup_r+0xc6>
 8001804:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001808:	d1ba      	bne.n	8001780 <__swsetup_r+0x30>
 800180a:	bd70      	pop	{r4, r5, r6, pc}
 800180c:	0781      	lsls	r1, r0, #30
 800180e:	bf58      	it	pl
 8001810:	6963      	ldrpl	r3, [r4, #20]
 8001812:	60a3      	str	r3, [r4, #8]
 8001814:	e7f4      	b.n	8001800 <__swsetup_r+0xb0>
 8001816:	2000      	movs	r0, #0
 8001818:	e7f7      	b.n	800180a <__swsetup_r+0xba>
 800181a:	bf00      	nop
 800181c:	2000000c 	.word	0x2000000c
 8001820:	08001e24 	.word	0x08001e24
 8001824:	08001e44 	.word	0x08001e44
 8001828:	08001e04 	.word	0x08001e04

0800182c <_close_r>:
 800182c:	b538      	push	{r3, r4, r5, lr}
 800182e:	4d06      	ldr	r5, [pc, #24]	; (8001848 <_close_r+0x1c>)
 8001830:	2300      	movs	r3, #0
 8001832:	4604      	mov	r4, r0
 8001834:	4608      	mov	r0, r1
 8001836:	602b      	str	r3, [r5, #0]
 8001838:	f7ff f99b 	bl	8000b72 <_close>
 800183c:	1c43      	adds	r3, r0, #1
 800183e:	d102      	bne.n	8001846 <_close_r+0x1a>
 8001840:	682b      	ldr	r3, [r5, #0]
 8001842:	b103      	cbz	r3, 8001846 <_close_r+0x1a>
 8001844:	6023      	str	r3, [r4, #0]
 8001846:	bd38      	pop	{r3, r4, r5, pc}
 8001848:	200004dc 	.word	0x200004dc

0800184c <__sflush_r>:
 800184c:	898a      	ldrh	r2, [r1, #12]
 800184e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001852:	4605      	mov	r5, r0
 8001854:	0710      	lsls	r0, r2, #28
 8001856:	460c      	mov	r4, r1
 8001858:	d458      	bmi.n	800190c <__sflush_r+0xc0>
 800185a:	684b      	ldr	r3, [r1, #4]
 800185c:	2b00      	cmp	r3, #0
 800185e:	dc05      	bgt.n	800186c <__sflush_r+0x20>
 8001860:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001862:	2b00      	cmp	r3, #0
 8001864:	dc02      	bgt.n	800186c <__sflush_r+0x20>
 8001866:	2000      	movs	r0, #0
 8001868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800186c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800186e:	2e00      	cmp	r6, #0
 8001870:	d0f9      	beq.n	8001866 <__sflush_r+0x1a>
 8001872:	2300      	movs	r3, #0
 8001874:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001878:	682f      	ldr	r7, [r5, #0]
 800187a:	602b      	str	r3, [r5, #0]
 800187c:	d032      	beq.n	80018e4 <__sflush_r+0x98>
 800187e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001880:	89a3      	ldrh	r3, [r4, #12]
 8001882:	075a      	lsls	r2, r3, #29
 8001884:	d505      	bpl.n	8001892 <__sflush_r+0x46>
 8001886:	6863      	ldr	r3, [r4, #4]
 8001888:	1ac0      	subs	r0, r0, r3
 800188a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800188c:	b10b      	cbz	r3, 8001892 <__sflush_r+0x46>
 800188e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001890:	1ac0      	subs	r0, r0, r3
 8001892:	2300      	movs	r3, #0
 8001894:	4602      	mov	r2, r0
 8001896:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001898:	6a21      	ldr	r1, [r4, #32]
 800189a:	4628      	mov	r0, r5
 800189c:	47b0      	blx	r6
 800189e:	1c43      	adds	r3, r0, #1
 80018a0:	89a3      	ldrh	r3, [r4, #12]
 80018a2:	d106      	bne.n	80018b2 <__sflush_r+0x66>
 80018a4:	6829      	ldr	r1, [r5, #0]
 80018a6:	291d      	cmp	r1, #29
 80018a8:	d82c      	bhi.n	8001904 <__sflush_r+0xb8>
 80018aa:	4a2a      	ldr	r2, [pc, #168]	; (8001954 <__sflush_r+0x108>)
 80018ac:	40ca      	lsrs	r2, r1
 80018ae:	07d6      	lsls	r6, r2, #31
 80018b0:	d528      	bpl.n	8001904 <__sflush_r+0xb8>
 80018b2:	2200      	movs	r2, #0
 80018b4:	6062      	str	r2, [r4, #4]
 80018b6:	04d9      	lsls	r1, r3, #19
 80018b8:	6922      	ldr	r2, [r4, #16]
 80018ba:	6022      	str	r2, [r4, #0]
 80018bc:	d504      	bpl.n	80018c8 <__sflush_r+0x7c>
 80018be:	1c42      	adds	r2, r0, #1
 80018c0:	d101      	bne.n	80018c6 <__sflush_r+0x7a>
 80018c2:	682b      	ldr	r3, [r5, #0]
 80018c4:	b903      	cbnz	r3, 80018c8 <__sflush_r+0x7c>
 80018c6:	6560      	str	r0, [r4, #84]	; 0x54
 80018c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80018ca:	602f      	str	r7, [r5, #0]
 80018cc:	2900      	cmp	r1, #0
 80018ce:	d0ca      	beq.n	8001866 <__sflush_r+0x1a>
 80018d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80018d4:	4299      	cmp	r1, r3
 80018d6:	d002      	beq.n	80018de <__sflush_r+0x92>
 80018d8:	4628      	mov	r0, r5
 80018da:	f000 f8fb 	bl	8001ad4 <_free_r>
 80018de:	2000      	movs	r0, #0
 80018e0:	6360      	str	r0, [r4, #52]	; 0x34
 80018e2:	e7c1      	b.n	8001868 <__sflush_r+0x1c>
 80018e4:	6a21      	ldr	r1, [r4, #32]
 80018e6:	2301      	movs	r3, #1
 80018e8:	4628      	mov	r0, r5
 80018ea:	47b0      	blx	r6
 80018ec:	1c41      	adds	r1, r0, #1
 80018ee:	d1c7      	bne.n	8001880 <__sflush_r+0x34>
 80018f0:	682b      	ldr	r3, [r5, #0]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0c4      	beq.n	8001880 <__sflush_r+0x34>
 80018f6:	2b1d      	cmp	r3, #29
 80018f8:	d001      	beq.n	80018fe <__sflush_r+0xb2>
 80018fa:	2b16      	cmp	r3, #22
 80018fc:	d101      	bne.n	8001902 <__sflush_r+0xb6>
 80018fe:	602f      	str	r7, [r5, #0]
 8001900:	e7b1      	b.n	8001866 <__sflush_r+0x1a>
 8001902:	89a3      	ldrh	r3, [r4, #12]
 8001904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001908:	81a3      	strh	r3, [r4, #12]
 800190a:	e7ad      	b.n	8001868 <__sflush_r+0x1c>
 800190c:	690f      	ldr	r7, [r1, #16]
 800190e:	2f00      	cmp	r7, #0
 8001910:	d0a9      	beq.n	8001866 <__sflush_r+0x1a>
 8001912:	0793      	lsls	r3, r2, #30
 8001914:	680e      	ldr	r6, [r1, #0]
 8001916:	bf08      	it	eq
 8001918:	694b      	ldreq	r3, [r1, #20]
 800191a:	600f      	str	r7, [r1, #0]
 800191c:	bf18      	it	ne
 800191e:	2300      	movne	r3, #0
 8001920:	eba6 0807 	sub.w	r8, r6, r7
 8001924:	608b      	str	r3, [r1, #8]
 8001926:	f1b8 0f00 	cmp.w	r8, #0
 800192a:	dd9c      	ble.n	8001866 <__sflush_r+0x1a>
 800192c:	6a21      	ldr	r1, [r4, #32]
 800192e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001930:	4643      	mov	r3, r8
 8001932:	463a      	mov	r2, r7
 8001934:	4628      	mov	r0, r5
 8001936:	47b0      	blx	r6
 8001938:	2800      	cmp	r0, #0
 800193a:	dc06      	bgt.n	800194a <__sflush_r+0xfe>
 800193c:	89a3      	ldrh	r3, [r4, #12]
 800193e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001942:	81a3      	strh	r3, [r4, #12]
 8001944:	f04f 30ff 	mov.w	r0, #4294967295
 8001948:	e78e      	b.n	8001868 <__sflush_r+0x1c>
 800194a:	4407      	add	r7, r0
 800194c:	eba8 0800 	sub.w	r8, r8, r0
 8001950:	e7e9      	b.n	8001926 <__sflush_r+0xda>
 8001952:	bf00      	nop
 8001954:	20400001 	.word	0x20400001

08001958 <_fflush_r>:
 8001958:	b538      	push	{r3, r4, r5, lr}
 800195a:	690b      	ldr	r3, [r1, #16]
 800195c:	4605      	mov	r5, r0
 800195e:	460c      	mov	r4, r1
 8001960:	b913      	cbnz	r3, 8001968 <_fflush_r+0x10>
 8001962:	2500      	movs	r5, #0
 8001964:	4628      	mov	r0, r5
 8001966:	bd38      	pop	{r3, r4, r5, pc}
 8001968:	b118      	cbz	r0, 8001972 <_fflush_r+0x1a>
 800196a:	6983      	ldr	r3, [r0, #24]
 800196c:	b90b      	cbnz	r3, 8001972 <_fflush_r+0x1a>
 800196e:	f7ff fa4f 	bl	8000e10 <__sinit>
 8001972:	4b14      	ldr	r3, [pc, #80]	; (80019c4 <_fflush_r+0x6c>)
 8001974:	429c      	cmp	r4, r3
 8001976:	d11b      	bne.n	80019b0 <_fflush_r+0x58>
 8001978:	686c      	ldr	r4, [r5, #4]
 800197a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d0ef      	beq.n	8001962 <_fflush_r+0xa>
 8001982:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001984:	07d0      	lsls	r0, r2, #31
 8001986:	d404      	bmi.n	8001992 <_fflush_r+0x3a>
 8001988:	0599      	lsls	r1, r3, #22
 800198a:	d402      	bmi.n	8001992 <_fflush_r+0x3a>
 800198c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800198e:	f7ff fadd 	bl	8000f4c <__retarget_lock_acquire_recursive>
 8001992:	4628      	mov	r0, r5
 8001994:	4621      	mov	r1, r4
 8001996:	f7ff ff59 	bl	800184c <__sflush_r>
 800199a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800199c:	07da      	lsls	r2, r3, #31
 800199e:	4605      	mov	r5, r0
 80019a0:	d4e0      	bmi.n	8001964 <_fflush_r+0xc>
 80019a2:	89a3      	ldrh	r3, [r4, #12]
 80019a4:	059b      	lsls	r3, r3, #22
 80019a6:	d4dd      	bmi.n	8001964 <_fflush_r+0xc>
 80019a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80019aa:	f7ff fad0 	bl	8000f4e <__retarget_lock_release_recursive>
 80019ae:	e7d9      	b.n	8001964 <_fflush_r+0xc>
 80019b0:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <_fflush_r+0x70>)
 80019b2:	429c      	cmp	r4, r3
 80019b4:	d101      	bne.n	80019ba <_fflush_r+0x62>
 80019b6:	68ac      	ldr	r4, [r5, #8]
 80019b8:	e7df      	b.n	800197a <_fflush_r+0x22>
 80019ba:	4b04      	ldr	r3, [pc, #16]	; (80019cc <_fflush_r+0x74>)
 80019bc:	429c      	cmp	r4, r3
 80019be:	bf08      	it	eq
 80019c0:	68ec      	ldreq	r4, [r5, #12]
 80019c2:	e7da      	b.n	800197a <_fflush_r+0x22>
 80019c4:	08001e24 	.word	0x08001e24
 80019c8:	08001e44 	.word	0x08001e44
 80019cc:	08001e04 	.word	0x08001e04

080019d0 <_lseek_r>:
 80019d0:	b538      	push	{r3, r4, r5, lr}
 80019d2:	4d07      	ldr	r5, [pc, #28]	; (80019f0 <_lseek_r+0x20>)
 80019d4:	4604      	mov	r4, r0
 80019d6:	4608      	mov	r0, r1
 80019d8:	4611      	mov	r1, r2
 80019da:	2200      	movs	r2, #0
 80019dc:	602a      	str	r2, [r5, #0]
 80019de:	461a      	mov	r2, r3
 80019e0:	f7ff f8ee 	bl	8000bc0 <_lseek>
 80019e4:	1c43      	adds	r3, r0, #1
 80019e6:	d102      	bne.n	80019ee <_lseek_r+0x1e>
 80019e8:	682b      	ldr	r3, [r5, #0]
 80019ea:	b103      	cbz	r3, 80019ee <_lseek_r+0x1e>
 80019ec:	6023      	str	r3, [r4, #0]
 80019ee:	bd38      	pop	{r3, r4, r5, pc}
 80019f0:	200004dc 	.word	0x200004dc

080019f4 <__swhatbuf_r>:
 80019f4:	b570      	push	{r4, r5, r6, lr}
 80019f6:	460e      	mov	r6, r1
 80019f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019fc:	2900      	cmp	r1, #0
 80019fe:	b096      	sub	sp, #88	; 0x58
 8001a00:	4614      	mov	r4, r2
 8001a02:	461d      	mov	r5, r3
 8001a04:	da07      	bge.n	8001a16 <__swhatbuf_r+0x22>
 8001a06:	2300      	movs	r3, #0
 8001a08:	602b      	str	r3, [r5, #0]
 8001a0a:	89b3      	ldrh	r3, [r6, #12]
 8001a0c:	061a      	lsls	r2, r3, #24
 8001a0e:	d410      	bmi.n	8001a32 <__swhatbuf_r+0x3e>
 8001a10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a14:	e00e      	b.n	8001a34 <__swhatbuf_r+0x40>
 8001a16:	466a      	mov	r2, sp
 8001a18:	f000 f8be 	bl	8001b98 <_fstat_r>
 8001a1c:	2800      	cmp	r0, #0
 8001a1e:	dbf2      	blt.n	8001a06 <__swhatbuf_r+0x12>
 8001a20:	9a01      	ldr	r2, [sp, #4]
 8001a22:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001a26:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001a2a:	425a      	negs	r2, r3
 8001a2c:	415a      	adcs	r2, r3
 8001a2e:	602a      	str	r2, [r5, #0]
 8001a30:	e7ee      	b.n	8001a10 <__swhatbuf_r+0x1c>
 8001a32:	2340      	movs	r3, #64	; 0x40
 8001a34:	2000      	movs	r0, #0
 8001a36:	6023      	str	r3, [r4, #0]
 8001a38:	b016      	add	sp, #88	; 0x58
 8001a3a:	bd70      	pop	{r4, r5, r6, pc}

08001a3c <__smakebuf_r>:
 8001a3c:	898b      	ldrh	r3, [r1, #12]
 8001a3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001a40:	079d      	lsls	r5, r3, #30
 8001a42:	4606      	mov	r6, r0
 8001a44:	460c      	mov	r4, r1
 8001a46:	d507      	bpl.n	8001a58 <__smakebuf_r+0x1c>
 8001a48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001a4c:	6023      	str	r3, [r4, #0]
 8001a4e:	6123      	str	r3, [r4, #16]
 8001a50:	2301      	movs	r3, #1
 8001a52:	6163      	str	r3, [r4, #20]
 8001a54:	b002      	add	sp, #8
 8001a56:	bd70      	pop	{r4, r5, r6, pc}
 8001a58:	ab01      	add	r3, sp, #4
 8001a5a:	466a      	mov	r2, sp
 8001a5c:	f7ff ffca 	bl	80019f4 <__swhatbuf_r>
 8001a60:	9900      	ldr	r1, [sp, #0]
 8001a62:	4605      	mov	r5, r0
 8001a64:	4630      	mov	r0, r6
 8001a66:	f7ff fa73 	bl	8000f50 <_malloc_r>
 8001a6a:	b948      	cbnz	r0, 8001a80 <__smakebuf_r+0x44>
 8001a6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a70:	059a      	lsls	r2, r3, #22
 8001a72:	d4ef      	bmi.n	8001a54 <__smakebuf_r+0x18>
 8001a74:	f023 0303 	bic.w	r3, r3, #3
 8001a78:	f043 0302 	orr.w	r3, r3, #2
 8001a7c:	81a3      	strh	r3, [r4, #12]
 8001a7e:	e7e3      	b.n	8001a48 <__smakebuf_r+0xc>
 8001a80:	4b0d      	ldr	r3, [pc, #52]	; (8001ab8 <__smakebuf_r+0x7c>)
 8001a82:	62b3      	str	r3, [r6, #40]	; 0x28
 8001a84:	89a3      	ldrh	r3, [r4, #12]
 8001a86:	6020      	str	r0, [r4, #0]
 8001a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a8c:	81a3      	strh	r3, [r4, #12]
 8001a8e:	9b00      	ldr	r3, [sp, #0]
 8001a90:	6163      	str	r3, [r4, #20]
 8001a92:	9b01      	ldr	r3, [sp, #4]
 8001a94:	6120      	str	r0, [r4, #16]
 8001a96:	b15b      	cbz	r3, 8001ab0 <__smakebuf_r+0x74>
 8001a98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001a9c:	4630      	mov	r0, r6
 8001a9e:	f000 f88d 	bl	8001bbc <_isatty_r>
 8001aa2:	b128      	cbz	r0, 8001ab0 <__smakebuf_r+0x74>
 8001aa4:	89a3      	ldrh	r3, [r4, #12]
 8001aa6:	f023 0303 	bic.w	r3, r3, #3
 8001aaa:	f043 0301 	orr.w	r3, r3, #1
 8001aae:	81a3      	strh	r3, [r4, #12]
 8001ab0:	89a0      	ldrh	r0, [r4, #12]
 8001ab2:	4305      	orrs	r5, r0
 8001ab4:	81a5      	strh	r5, [r4, #12]
 8001ab6:	e7cd      	b.n	8001a54 <__smakebuf_r+0x18>
 8001ab8:	08000da9 	.word	0x08000da9

08001abc <__malloc_lock>:
 8001abc:	4801      	ldr	r0, [pc, #4]	; (8001ac4 <__malloc_lock+0x8>)
 8001abe:	f7ff ba45 	b.w	8000f4c <__retarget_lock_acquire_recursive>
 8001ac2:	bf00      	nop
 8001ac4:	200004d4 	.word	0x200004d4

08001ac8 <__malloc_unlock>:
 8001ac8:	4801      	ldr	r0, [pc, #4]	; (8001ad0 <__malloc_unlock+0x8>)
 8001aca:	f7ff ba40 	b.w	8000f4e <__retarget_lock_release_recursive>
 8001ace:	bf00      	nop
 8001ad0:	200004d4 	.word	0x200004d4

08001ad4 <_free_r>:
 8001ad4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001ad6:	2900      	cmp	r1, #0
 8001ad8:	d048      	beq.n	8001b6c <_free_r+0x98>
 8001ada:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001ade:	9001      	str	r0, [sp, #4]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f1a1 0404 	sub.w	r4, r1, #4
 8001ae6:	bfb8      	it	lt
 8001ae8:	18e4      	addlt	r4, r4, r3
 8001aea:	f7ff ffe7 	bl	8001abc <__malloc_lock>
 8001aee:	4a20      	ldr	r2, [pc, #128]	; (8001b70 <_free_r+0x9c>)
 8001af0:	9801      	ldr	r0, [sp, #4]
 8001af2:	6813      	ldr	r3, [r2, #0]
 8001af4:	4615      	mov	r5, r2
 8001af6:	b933      	cbnz	r3, 8001b06 <_free_r+0x32>
 8001af8:	6063      	str	r3, [r4, #4]
 8001afa:	6014      	str	r4, [r2, #0]
 8001afc:	b003      	add	sp, #12
 8001afe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001b02:	f7ff bfe1 	b.w	8001ac8 <__malloc_unlock>
 8001b06:	42a3      	cmp	r3, r4
 8001b08:	d90b      	bls.n	8001b22 <_free_r+0x4e>
 8001b0a:	6821      	ldr	r1, [r4, #0]
 8001b0c:	1862      	adds	r2, r4, r1
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	bf04      	itt	eq
 8001b12:	681a      	ldreq	r2, [r3, #0]
 8001b14:	685b      	ldreq	r3, [r3, #4]
 8001b16:	6063      	str	r3, [r4, #4]
 8001b18:	bf04      	itt	eq
 8001b1a:	1852      	addeq	r2, r2, r1
 8001b1c:	6022      	streq	r2, [r4, #0]
 8001b1e:	602c      	str	r4, [r5, #0]
 8001b20:	e7ec      	b.n	8001afc <_free_r+0x28>
 8001b22:	461a      	mov	r2, r3
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	b10b      	cbz	r3, 8001b2c <_free_r+0x58>
 8001b28:	42a3      	cmp	r3, r4
 8001b2a:	d9fa      	bls.n	8001b22 <_free_r+0x4e>
 8001b2c:	6811      	ldr	r1, [r2, #0]
 8001b2e:	1855      	adds	r5, r2, r1
 8001b30:	42a5      	cmp	r5, r4
 8001b32:	d10b      	bne.n	8001b4c <_free_r+0x78>
 8001b34:	6824      	ldr	r4, [r4, #0]
 8001b36:	4421      	add	r1, r4
 8001b38:	1854      	adds	r4, r2, r1
 8001b3a:	42a3      	cmp	r3, r4
 8001b3c:	6011      	str	r1, [r2, #0]
 8001b3e:	d1dd      	bne.n	8001afc <_free_r+0x28>
 8001b40:	681c      	ldr	r4, [r3, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	6053      	str	r3, [r2, #4]
 8001b46:	4421      	add	r1, r4
 8001b48:	6011      	str	r1, [r2, #0]
 8001b4a:	e7d7      	b.n	8001afc <_free_r+0x28>
 8001b4c:	d902      	bls.n	8001b54 <_free_r+0x80>
 8001b4e:	230c      	movs	r3, #12
 8001b50:	6003      	str	r3, [r0, #0]
 8001b52:	e7d3      	b.n	8001afc <_free_r+0x28>
 8001b54:	6825      	ldr	r5, [r4, #0]
 8001b56:	1961      	adds	r1, r4, r5
 8001b58:	428b      	cmp	r3, r1
 8001b5a:	bf04      	itt	eq
 8001b5c:	6819      	ldreq	r1, [r3, #0]
 8001b5e:	685b      	ldreq	r3, [r3, #4]
 8001b60:	6063      	str	r3, [r4, #4]
 8001b62:	bf04      	itt	eq
 8001b64:	1949      	addeq	r1, r1, r5
 8001b66:	6021      	streq	r1, [r4, #0]
 8001b68:	6054      	str	r4, [r2, #4]
 8001b6a:	e7c7      	b.n	8001afc <_free_r+0x28>
 8001b6c:	b003      	add	sp, #12
 8001b6e:	bd30      	pop	{r4, r5, pc}
 8001b70:	20000498 	.word	0x20000498

08001b74 <_read_r>:
 8001b74:	b538      	push	{r3, r4, r5, lr}
 8001b76:	4d07      	ldr	r5, [pc, #28]	; (8001b94 <_read_r+0x20>)
 8001b78:	4604      	mov	r4, r0
 8001b7a:	4608      	mov	r0, r1
 8001b7c:	4611      	mov	r1, r2
 8001b7e:	2200      	movs	r2, #0
 8001b80:	602a      	str	r2, [r5, #0]
 8001b82:	461a      	mov	r2, r3
 8001b84:	f7fe ffbc 	bl	8000b00 <_read>
 8001b88:	1c43      	adds	r3, r0, #1
 8001b8a:	d102      	bne.n	8001b92 <_read_r+0x1e>
 8001b8c:	682b      	ldr	r3, [r5, #0]
 8001b8e:	b103      	cbz	r3, 8001b92 <_read_r+0x1e>
 8001b90:	6023      	str	r3, [r4, #0]
 8001b92:	bd38      	pop	{r3, r4, r5, pc}
 8001b94:	200004dc 	.word	0x200004dc

08001b98 <_fstat_r>:
 8001b98:	b538      	push	{r3, r4, r5, lr}
 8001b9a:	4d07      	ldr	r5, [pc, #28]	; (8001bb8 <_fstat_r+0x20>)
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	4604      	mov	r4, r0
 8001ba0:	4608      	mov	r0, r1
 8001ba2:	4611      	mov	r1, r2
 8001ba4:	602b      	str	r3, [r5, #0]
 8001ba6:	f7fe fff0 	bl	8000b8a <_fstat>
 8001baa:	1c43      	adds	r3, r0, #1
 8001bac:	d102      	bne.n	8001bb4 <_fstat_r+0x1c>
 8001bae:	682b      	ldr	r3, [r5, #0]
 8001bb0:	b103      	cbz	r3, 8001bb4 <_fstat_r+0x1c>
 8001bb2:	6023      	str	r3, [r4, #0]
 8001bb4:	bd38      	pop	{r3, r4, r5, pc}
 8001bb6:	bf00      	nop
 8001bb8:	200004dc 	.word	0x200004dc

08001bbc <_isatty_r>:
 8001bbc:	b538      	push	{r3, r4, r5, lr}
 8001bbe:	4d06      	ldr	r5, [pc, #24]	; (8001bd8 <_isatty_r+0x1c>)
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	4604      	mov	r4, r0
 8001bc4:	4608      	mov	r0, r1
 8001bc6:	602b      	str	r3, [r5, #0]
 8001bc8:	f7fe ffef 	bl	8000baa <_isatty>
 8001bcc:	1c43      	adds	r3, r0, #1
 8001bce:	d102      	bne.n	8001bd6 <_isatty_r+0x1a>
 8001bd0:	682b      	ldr	r3, [r5, #0]
 8001bd2:	b103      	cbz	r3, 8001bd6 <_isatty_r+0x1a>
 8001bd4:	6023      	str	r3, [r4, #0]
 8001bd6:	bd38      	pop	{r3, r4, r5, pc}
 8001bd8:	200004dc 	.word	0x200004dc

08001bdc <_init>:
 8001bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bde:	bf00      	nop
 8001be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001be2:	bc08      	pop	{r3}
 8001be4:	469e      	mov	lr, r3
 8001be6:	4770      	bx	lr

08001be8 <_fini>:
 8001be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bea:	bf00      	nop
 8001bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bee:	bc08      	pop	{r3}
 8001bf0:	469e      	mov	lr, r3
 8001bf2:	4770      	bx	lr
