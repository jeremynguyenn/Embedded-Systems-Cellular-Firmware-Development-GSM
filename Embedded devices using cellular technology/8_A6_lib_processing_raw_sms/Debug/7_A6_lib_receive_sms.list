
7_A6_lib_receive_sms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000019d8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000031c  08001b78  08001b78  00011b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e94  08001e94  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001e94  08001e94  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e94  08001e94  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e94  08001e94  00011e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e98  08001e98  00011e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001e9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000470  20000064  08001f00  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004d4  08001f00  000204d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004623  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c89  00000000  00000000  000246b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000260  00000000  00000000  00025340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001f8  00000000  00000000  000255a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ff9c  00000000  00000000  00025798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002cfb  00000000  00000000  00035734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055ac7  00000000  00000000  0003842f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0008def6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001008  00000000  00000000  0008df4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001b60 	.word	0x08001b60

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08001b60 	.word	0x08001b60

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__io_putchar>:

static uint16_t compute_uart_bd(uint32_t periph_clk,uint32_t baudrate);
static void debug_uart_write(int ch);

int __io_putchar(int ch)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	debug_uart_write(ch);
 8000288:	6878      	ldr	r0, [r7, #4]
 800028a:	f000 f913 	bl	80004b4 <debug_uart_write>
	return ch;
 800028e:	687b      	ldr	r3, [r7, #4]
}
 8000290:	4618      	mov	r0, r3
 8000292:	3708      	adds	r7, #8
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}

08000298 <debug_uart_init>:

void debug_uart_init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	/*1. Enable clock access to UART pins' GPIO port (GPIOA)*/
	RCC->AHB1ENR |= GPIOAEN;
 800029c:	4b36      	ldr	r3, [pc, #216]	; (8000378 <debug_uart_init+0xe0>)
 800029e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a0:	4a35      	ldr	r2, [pc, #212]	; (8000378 <debug_uart_init+0xe0>)
 80002a2:	f043 0301 	orr.w	r3, r3, #1
 80002a6:	6313      	str	r3, [r2, #48]	; 0x30

	/*2. Set PA2 mode to alternate function*/
	GPIOA->MODER &= ~(1U<<4);
 80002a8:	4b34      	ldr	r3, [pc, #208]	; (800037c <debug_uart_init+0xe4>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a33      	ldr	r2, [pc, #204]	; (800037c <debug_uart_init+0xe4>)
 80002ae:	f023 0310 	bic.w	r3, r3, #16
 80002b2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 80002b4:	4b31      	ldr	r3, [pc, #196]	; (800037c <debug_uart_init+0xe4>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a30      	ldr	r2, [pc, #192]	; (800037c <debug_uart_init+0xe4>)
 80002ba:	f043 0320 	orr.w	r3, r3, #32
 80002be:	6013      	str	r3, [r2, #0]

	/*3. Set PA3 mode to alternate function*/
	GPIOA->MODER &= ~(1U<<6);
 80002c0:	4b2e      	ldr	r3, [pc, #184]	; (800037c <debug_uart_init+0xe4>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a2d      	ldr	r2, [pc, #180]	; (800037c <debug_uart_init+0xe4>)
 80002c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80002ca:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 80002cc:	4b2b      	ldr	r3, [pc, #172]	; (800037c <debug_uart_init+0xe4>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a2a      	ldr	r2, [pc, #168]	; (800037c <debug_uart_init+0xe4>)
 80002d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002d6:	6013      	str	r3, [r2, #0]

	/*4.Set PA2 alternate function type to UART2_TX (AF07)*/
	GPIOA->AFR[0] |=(1U<<8);
 80002d8:	4b28      	ldr	r3, [pc, #160]	; (800037c <debug_uart_init+0xe4>)
 80002da:	6a1b      	ldr	r3, [r3, #32]
 80002dc:	4a27      	ldr	r2, [pc, #156]	; (800037c <debug_uart_init+0xe4>)
 80002de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002e2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 80002e4:	4b25      	ldr	r3, [pc, #148]	; (800037c <debug_uart_init+0xe4>)
 80002e6:	6a1b      	ldr	r3, [r3, #32]
 80002e8:	4a24      	ldr	r2, [pc, #144]	; (800037c <debug_uart_init+0xe4>)
 80002ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002ee:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 80002f0:	4b22      	ldr	r3, [pc, #136]	; (800037c <debug_uart_init+0xe4>)
 80002f2:	6a1b      	ldr	r3, [r3, #32]
 80002f4:	4a21      	ldr	r2, [pc, #132]	; (800037c <debug_uart_init+0xe4>)
 80002f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002fa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 80002fc:	4b1f      	ldr	r3, [pc, #124]	; (800037c <debug_uart_init+0xe4>)
 80002fe:	6a1b      	ldr	r3, [r3, #32]
 8000300:	4a1e      	ldr	r2, [pc, #120]	; (800037c <debug_uart_init+0xe4>)
 8000302:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000306:	6213      	str	r3, [r2, #32]

	/*4.Set PA3 alternate function type to UART2_RX (AF07)*/
	GPIOA->AFR[0] |=(1U<<12);
 8000308:	4b1c      	ldr	r3, [pc, #112]	; (800037c <debug_uart_init+0xe4>)
 800030a:	6a1b      	ldr	r3, [r3, #32]
 800030c:	4a1b      	ldr	r2, [pc, #108]	; (800037c <debug_uart_init+0xe4>)
 800030e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000312:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<13);
 8000314:	4b19      	ldr	r3, [pc, #100]	; (800037c <debug_uart_init+0xe4>)
 8000316:	6a1b      	ldr	r3, [r3, #32]
 8000318:	4a18      	ldr	r2, [pc, #96]	; (800037c <debug_uart_init+0xe4>)
 800031a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800031e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<14);
 8000320:	4b16      	ldr	r3, [pc, #88]	; (800037c <debug_uart_init+0xe4>)
 8000322:	6a1b      	ldr	r3, [r3, #32]
 8000324:	4a15      	ldr	r2, [pc, #84]	; (800037c <debug_uart_init+0xe4>)
 8000326:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800032a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<15);
 800032c:	4b13      	ldr	r3, [pc, #76]	; (800037c <debug_uart_init+0xe4>)
 800032e:	6a1b      	ldr	r3, [r3, #32]
 8000330:	4a12      	ldr	r2, [pc, #72]	; (800037c <debug_uart_init+0xe4>)
 8000332:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000336:	6213      	str	r3, [r2, #32]

	/*Configure UART module*/

	/*5. Enable clock access to the UART module*/
	RCC->APB1ENR |= UART2EN;
 8000338:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <debug_uart_init+0xe0>)
 800033a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800033c:	4a0e      	ldr	r2, [pc, #56]	; (8000378 <debug_uart_init+0xe0>)
 800033e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000342:	6413      	str	r3, [r2, #64]	; 0x40

	/*6. Disable UART module*/
	USART2->CR1 &=~CR1_UE;
 8000344:	4b0e      	ldr	r3, [pc, #56]	; (8000380 <debug_uart_init+0xe8>)
 8000346:	68db      	ldr	r3, [r3, #12]
 8000348:	4a0d      	ldr	r2, [pc, #52]	; (8000380 <debug_uart_init+0xe8>)
 800034a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800034e:	60d3      	str	r3, [r2, #12]

	/*7. Set UART baudrate*/
	USART2->BRR =  compute_uart_bd(SYS_FREQ,UART_BAUDRATE);
 8000350:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000354:	480b      	ldr	r0, [pc, #44]	; (8000384 <debug_uart_init+0xec>)
 8000356:	f000 f8c5 	bl	80004e4 <compute_uart_bd>
 800035a:	4603      	mov	r3, r0
 800035c:	461a      	mov	r2, r3
 800035e:	4b08      	ldr	r3, [pc, #32]	; (8000380 <debug_uart_init+0xe8>)
 8000360:	609a      	str	r2, [r3, #8]

    /*8. Set trnasfer direction*/
	USART2->CR1 = (CR1_TE | CR1_RE);
 8000362:	4b07      	ldr	r3, [pc, #28]	; (8000380 <debug_uart_init+0xe8>)
 8000364:	220c      	movs	r2, #12
 8000366:	60da      	str	r2, [r3, #12]

	/*9. Enable UART module*/
	USART2->CR1 |= CR1_UE;
 8000368:	4b05      	ldr	r3, [pc, #20]	; (8000380 <debug_uart_init+0xe8>)
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	4a04      	ldr	r2, [pc, #16]	; (8000380 <debug_uart_init+0xe8>)
 800036e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000372:	60d3      	str	r3, [r2, #12]


}
 8000374:	bf00      	nop
 8000376:	bd80      	pop	{r7, pc}
 8000378:	40023800 	.word	0x40023800
 800037c:	40020000 	.word	0x40020000
 8000380:	40004400 	.word	0x40004400
 8000384:	00f42400 	.word	0x00f42400

08000388 <a6_uart_init>:
 * A6 TX Pin   ==> PA10(RX)
 * A6 RX Pin   ==> PA9(TX)
 * */

void a6_uart_init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
	/*1. Enable clock access to UART pins' GPIO port (GPIOA)*/
	RCC->AHB1ENR |= GPIOAEN;
 800038c:	4b39      	ldr	r3, [pc, #228]	; (8000474 <a6_uart_init+0xec>)
 800038e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000390:	4a38      	ldr	r2, [pc, #224]	; (8000474 <a6_uart_init+0xec>)
 8000392:	f043 0301 	orr.w	r3, r3, #1
 8000396:	6313      	str	r3, [r2, #48]	; 0x30

	/*2. Set PA9 mode to alternate function*/
	GPIOA->MODER &= ~(1U<<18);
 8000398:	4b37      	ldr	r3, [pc, #220]	; (8000478 <a6_uart_init+0xf0>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a36      	ldr	r2, [pc, #216]	; (8000478 <a6_uart_init+0xf0>)
 800039e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80003a2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<19);
 80003a4:	4b34      	ldr	r3, [pc, #208]	; (8000478 <a6_uart_init+0xf0>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a33      	ldr	r2, [pc, #204]	; (8000478 <a6_uart_init+0xf0>)
 80003aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003ae:	6013      	str	r3, [r2, #0]

	/*3. Set PA10 mode to alternate function*/
	GPIOA->MODER &= ~(1U<<20);
 80003b0:	4b31      	ldr	r3, [pc, #196]	; (8000478 <a6_uart_init+0xf0>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a30      	ldr	r2, [pc, #192]	; (8000478 <a6_uart_init+0xf0>)
 80003b6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80003ba:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<21);
 80003bc:	4b2e      	ldr	r3, [pc, #184]	; (8000478 <a6_uart_init+0xf0>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a2d      	ldr	r2, [pc, #180]	; (8000478 <a6_uart_init+0xf0>)
 80003c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003c6:	6013      	str	r3, [r2, #0]

	/*4.Set PA9 alternate function type to UART1_TX (AF07)*/
	GPIOA->AFR[1] |=(1U<<4);
 80003c8:	4b2b      	ldr	r3, [pc, #172]	; (8000478 <a6_uart_init+0xf0>)
 80003ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003cc:	4a2a      	ldr	r2, [pc, #168]	; (8000478 <a6_uart_init+0xf0>)
 80003ce:	f043 0310 	orr.w	r3, r3, #16
 80003d2:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |=(1U<<5);
 80003d4:	4b28      	ldr	r3, [pc, #160]	; (8000478 <a6_uart_init+0xf0>)
 80003d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003d8:	4a27      	ldr	r2, [pc, #156]	; (8000478 <a6_uart_init+0xf0>)
 80003da:	f043 0320 	orr.w	r3, r3, #32
 80003de:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |=(1U<<6);
 80003e0:	4b25      	ldr	r3, [pc, #148]	; (8000478 <a6_uart_init+0xf0>)
 80003e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003e4:	4a24      	ldr	r2, [pc, #144]	; (8000478 <a6_uart_init+0xf0>)
 80003e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003ea:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] &= ~(1U<<7);
 80003ec:	4b22      	ldr	r3, [pc, #136]	; (8000478 <a6_uart_init+0xf0>)
 80003ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003f0:	4a21      	ldr	r2, [pc, #132]	; (8000478 <a6_uart_init+0xf0>)
 80003f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80003f6:	6253      	str	r3, [r2, #36]	; 0x24

	/*4.Set PA10 alternate function type to UART1_RX (AF07)*/
	GPIOA->AFR[1] |=(1U<<8);
 80003f8:	4b1f      	ldr	r3, [pc, #124]	; (8000478 <a6_uart_init+0xf0>)
 80003fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003fc:	4a1e      	ldr	r2, [pc, #120]	; (8000478 <a6_uart_init+0xf0>)
 80003fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000402:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |=(1U<<9);
 8000404:	4b1c      	ldr	r3, [pc, #112]	; (8000478 <a6_uart_init+0xf0>)
 8000406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000408:	4a1b      	ldr	r2, [pc, #108]	; (8000478 <a6_uart_init+0xf0>)
 800040a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800040e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |=(1U<<10);
 8000410:	4b19      	ldr	r3, [pc, #100]	; (8000478 <a6_uart_init+0xf0>)
 8000412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000414:	4a18      	ldr	r2, [pc, #96]	; (8000478 <a6_uart_init+0xf0>)
 8000416:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800041a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] &= ~(1U<<11);
 800041c:	4b16      	ldr	r3, [pc, #88]	; (8000478 <a6_uart_init+0xf0>)
 800041e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000420:	4a15      	ldr	r2, [pc, #84]	; (8000478 <a6_uart_init+0xf0>)
 8000422:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000426:	6253      	str	r3, [r2, #36]	; 0x24

	/*Configure UART module*/

    /*5. Enable clock access to the UART module*/
     RCC->APB2ENR |= UART1EN;
 8000428:	4b12      	ldr	r3, [pc, #72]	; (8000474 <a6_uart_init+0xec>)
 800042a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800042c:	4a11      	ldr	r2, [pc, #68]	; (8000474 <a6_uart_init+0xec>)
 800042e:	f043 0310 	orr.w	r3, r3, #16
 8000432:	6453      	str	r3, [r2, #68]	; 0x44

 	/*6. Disable UART module*/
 	 USART1->CR1 &=~CR1_UE;
 8000434:	4b11      	ldr	r3, [pc, #68]	; (800047c <a6_uart_init+0xf4>)
 8000436:	68db      	ldr	r3, [r3, #12]
 8000438:	4a10      	ldr	r2, [pc, #64]	; (800047c <a6_uart_init+0xf4>)
 800043a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800043e:	60d3      	str	r3, [r2, #12]

 	/*7. Set UART baudrate*/
 	USART1->BRR =  compute_uart_bd(SYS_FREQ,UART_BAUDRATE);
 8000440:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000444:	480e      	ldr	r0, [pc, #56]	; (8000480 <a6_uart_init+0xf8>)
 8000446:	f000 f84d 	bl	80004e4 <compute_uart_bd>
 800044a:	4603      	mov	r3, r0
 800044c:	461a      	mov	r2, r3
 800044e:	4b0b      	ldr	r3, [pc, #44]	; (800047c <a6_uart_init+0xf4>)
 8000450:	609a      	str	r2, [r3, #8]

    /*8. Set trnasfer direction*/
	USART1->CR1 = (CR1_TE | CR1_RE);
 8000452:	4b0a      	ldr	r3, [pc, #40]	; (800047c <a6_uart_init+0xf4>)
 8000454:	220c      	movs	r2, #12
 8000456:	60da      	str	r2, [r3, #12]

	/*9. Enable RXNEIE/*/

	USART1->CR1 |= CR1_RXNEIE;
 8000458:	4b08      	ldr	r3, [pc, #32]	; (800047c <a6_uart_init+0xf4>)
 800045a:	68db      	ldr	r3, [r3, #12]
 800045c:	4a07      	ldr	r2, [pc, #28]	; (800047c <a6_uart_init+0xf4>)
 800045e:	f043 0320 	orr.w	r3, r3, #32
 8000462:	60d3      	str	r3, [r2, #12]


 	/*6. Disable UART module*/
 	USART1->CR1 |= CR1_UE;
 8000464:	4b05      	ldr	r3, [pc, #20]	; (800047c <a6_uart_init+0xf4>)
 8000466:	68db      	ldr	r3, [r3, #12]
 8000468:	4a04      	ldr	r2, [pc, #16]	; (800047c <a6_uart_init+0xf4>)
 800046a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800046e:	60d3      	str	r3, [r2, #12]


}
 8000470:	bf00      	nop
 8000472:	bd80      	pop	{r7, pc}
 8000474:	40023800 	.word	0x40023800
 8000478:	40020000 	.word	0x40020000
 800047c:	40011000 	.word	0x40011000
 8000480:	00f42400 	.word	0x00f42400

08000484 <a6_uart_write_char>:

void a6_uart_write_char(char ch)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	71fb      	strb	r3, [r7, #7]
	/*Make sure the transmit data register is empty*/
	while(!(USART1->SR & SR_TXE)){}
 800048e:	bf00      	nop
 8000490:	4b07      	ldr	r3, [pc, #28]	; (80004b0 <a6_uart_write_char+0x2c>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000498:	2b00      	cmp	r3, #0
 800049a:	d0f9      	beq.n	8000490 <a6_uart_write_char+0xc>

	/*Write to transmit data register*/
	USART1->DR = (ch & 0xFF);
 800049c:	4a04      	ldr	r2, [pc, #16]	; (80004b0 <a6_uart_write_char+0x2c>)
 800049e:	79fb      	ldrb	r3, [r7, #7]
 80004a0:	6053      	str	r3, [r2, #4]

}
 80004a2:	bf00      	nop
 80004a4:	370c      	adds	r7, #12
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	40011000 	.word	0x40011000

080004b4 <debug_uart_write>:

static void debug_uart_write(int ch)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}
 80004bc:	bf00      	nop
 80004be:	4b08      	ldr	r3, [pc, #32]	; (80004e0 <debug_uart_write+0x2c>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d0f9      	beq.n	80004be <debug_uart_write+0xa>

	/*Write to transmit data register*/
	USART2->DR = (ch & 0xFF);
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4a04      	ldr	r2, [pc, #16]	; (80004e0 <debug_uart_write+0x2c>)
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	6053      	str	r3, [r2, #4]
}
 80004d2:	bf00      	nop
 80004d4:	370c      	adds	r7, #12
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	40004400 	.word	0x40004400

080004e4 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t periph_clk,uint32_t baudrate)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	085a      	lsrs	r2, r3, #1
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	441a      	add	r2, r3
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80004fc:	b29b      	uxth	r3, r3
}
 80004fe:	4618      	mov	r0, r3
 8000500:	370c      	adds	r7, #12
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
	...

0800050c <systick_delay_ms>:


void systick_delay_ms(uint32_t delay)
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
	/*1.Reload with number of clocks per millisecond*/
	SysTick->LOAD = SYSTICK_LOAD_VAL;
 8000514:	4b11      	ldr	r3, [pc, #68]	; (800055c <systick_delay_ms+0x50>)
 8000516:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800051a:	605a      	str	r2, [r3, #4]

	/*2. Clear systick current value register*/
	SysTick->VAL = 0;
 800051c:	4b0f      	ldr	r3, [pc, #60]	; (800055c <systick_delay_ms+0x50>)
 800051e:	2200      	movs	r2, #0
 8000520:	609a      	str	r2, [r3, #8]

	/*3. Enable systick and select internal clk src*/
	SysTick->CTRL = (CTRL_CLKSRC | CTRL_ENABLE);
 8000522:	4b0e      	ldr	r3, [pc, #56]	; (800055c <systick_delay_ms+0x50>)
 8000524:	2205      	movs	r2, #5
 8000526:	601a      	str	r2, [r3, #0]

	for(int i = 0 ; i < delay ; i++  )
 8000528:	2300      	movs	r3, #0
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	e009      	b.n	8000542 <systick_delay_ms+0x36>
	{
		while((SysTick->CTRL & CTRL_COUNTFLAG) == 0){}
 800052e:	bf00      	nop
 8000530:	4b0a      	ldr	r3, [pc, #40]	; (800055c <systick_delay_ms+0x50>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000538:	2b00      	cmp	r3, #0
 800053a:	d0f9      	beq.n	8000530 <systick_delay_ms+0x24>
	for(int i = 0 ; i < delay ; i++  )
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	3301      	adds	r3, #1
 8000540:	60fb      	str	r3, [r7, #12]
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	429a      	cmp	r2, r3
 8000548:	d8f1      	bhi.n	800052e <systick_delay_ms+0x22>
	}

	SysTick->CTRL = 0;
 800054a:	4b04      	ldr	r3, [pc, #16]	; (800055c <systick_delay_ms+0x50>)
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
}
 8000550:	bf00      	nop
 8000552:	3714      	adds	r7, #20
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr
 800055c:	e000e010 	.word	0xe000e010

08000560 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800056a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800056e:	2b00      	cmp	r3, #0
 8000570:	db0b      	blt.n	800058a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	f003 021f 	and.w	r2, r3, #31
 8000578:	4907      	ldr	r1, [pc, #28]	; (8000598 <__NVIC_EnableIRQ+0x38>)
 800057a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800057e:	095b      	lsrs	r3, r3, #5
 8000580:	2001      	movs	r0, #1
 8000582:	fa00 f202 	lsl.w	r2, r0, r2
 8000586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	e000e100 	.word	0xe000e100

0800059c <a6_module_init>:
static uint8_t a6_network_reg(void);
static uint8_t a6_module_name(void);


void a6_module_init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	/*Enable fifos*/
	tx_fifo_init();
 80005a0:	f000 f9f2 	bl	8000988 <tx_fifo_init>
	rx_fifo_init();
 80005a4:	f000 fa64 	bl	8000a70 <rx_fifo_init>

	/*Enable a6 uart*/
	a6_uart_init();
 80005a8:	f7ff feee 	bl	8000388 <a6_uart_init>

	/*Enable debug uart*/
	debug_uart_init();
 80005ac:	f7ff fe74 	bl	8000298 <debug_uart_init>

	/*Initialize flags*/
	searching   = false;
 80005b0:	4b0a      	ldr	r3, [pc, #40]	; (80005dc <a6_module_init+0x40>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	701a      	strb	r2, [r3, #0]
	is_response	= false;
 80005b6:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <a6_module_init+0x44>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	701a      	strb	r2, [r3, #0]

	printf("A6 Initialization...\n\r");
 80005bc:	4809      	ldr	r0, [pc, #36]	; (80005e4 <a6_module_init+0x48>)
 80005be:	f000 fb71 	bl	8000ca4 <iprintf>

	/*Enable interrupt*/
	NVIC_EnableIRQ(USART1_IRQn);
 80005c2:	2025      	movs	r0, #37	; 0x25
 80005c4:	f7ff ffcc 	bl	8000560 <__NVIC_EnableIRQ>

	/*Run test command*/
	a6_startup_test();
 80005c8:	f000 f840 	bl	800064c <a6_startup_test>

	/*Check signal quality*/
	a6_signal_quality();
 80005cc:	f000 f870 	bl	80006b0 <a6_signal_quality>

	/*Check network registration status*/
	a6_network_reg();
 80005d0:	f000 f8a0 	bl	8000714 <a6_network_reg>

	/*Get module name*/
	a6_module_name();
 80005d4:	f000 f8d0 	bl	8000778 <a6_module_name>
}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000080 	.word	0x20000080
 80005e0:	20000081 	.word	0x20000081
 80005e4:	08001b78 	.word	0x08001b78

080005e8 <a6_set_sms_format_to_text>:
	return 0;
}


uint8_t a6_set_sms_format_to_text(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
	uint8_t num_of_try  = MAX_NUM_OF_TRY;
 80005ee:	230a      	movs	r3, #10
 80005f0:	71fb      	strb	r3, [r7, #7]
	wait_resp("ok\r\n");
 80005f2:	4811      	ldr	r0, [pc, #68]	; (8000638 <a6_set_sms_format_to_text+0x50>)
 80005f4:	f000 f938 	bl	8000868 <wait_resp>

	while(num_of_try)
 80005f8:	e013      	b.n	8000622 <a6_set_sms_format_to_text+0x3a>
	{
		a6_send_cmd("AT+CMGF=1\r\n");
 80005fa:	4810      	ldr	r0, [pc, #64]	; (800063c <a6_set_sms_format_to_text+0x54>)
 80005fc:	f000 f9a2 	bl	8000944 <a6_send_cmd>
		systick_delay_ms(3000);
 8000600:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000604:	f7ff ff82 	bl	800050c <systick_delay_ms>

		if(is_response)
 8000608:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <a6_set_sms_format_to_text+0x58>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	2b00      	cmp	r3, #0
 8000610:	d004      	beq.n	800061c <a6_set_sms_format_to_text+0x34>
		{
			/*Success*/
			printf("Format set successfully.....\n\r");
 8000612:	480c      	ldr	r0, [pc, #48]	; (8000644 <a6_set_sms_format_to_text+0x5c>)
 8000614:	f000 fb46 	bl	8000ca4 <iprintf>
			return 1;
 8000618:	2301      	movs	r3, #1
 800061a:	e009      	b.n	8000630 <a6_set_sms_format_to_text+0x48>
		}
		num_of_try--;
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	3b01      	subs	r3, #1
 8000620:	71fb      	strb	r3, [r7, #7]
	while(num_of_try)
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d1e8      	bne.n	80005fa <a6_set_sms_format_to_text+0x12>
	}

	printf("ERR : Format set  failure....\n\r");
 8000628:	4807      	ldr	r0, [pc, #28]	; (8000648 <a6_set_sms_format_to_text+0x60>)
 800062a:	f000 fb3b 	bl	8000ca4 <iprintf>
	return 0;
 800062e:	2300      	movs	r3, #0

}
 8000630:	4618      	mov	r0, r3
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	08001b90 	.word	0x08001b90
 800063c:	08001c10 	.word	0x08001c10
 8000640:	20000081 	.word	0x20000081
 8000644:	08001c1c 	.word	0x08001c1c
 8000648:	08001c3c 	.word	0x08001c3c

0800064c <a6_startup_test>:


}

static uint8_t a6_startup_test(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
	uint8_t num_of_try  = MAX_NUM_OF_TRY;
 8000652:	230a      	movs	r3, #10
 8000654:	71fb      	strb	r3, [r7, #7]
	wait_resp("ok\r\n");
 8000656:	4811      	ldr	r0, [pc, #68]	; (800069c <a6_startup_test+0x50>)
 8000658:	f000 f906 	bl	8000868 <wait_resp>

	while(num_of_try)
 800065c:	e013      	b.n	8000686 <a6_startup_test+0x3a>
	{
		a6_send_cmd("AT+COPN=?\r\n");
 800065e:	4810      	ldr	r0, [pc, #64]	; (80006a0 <a6_startup_test+0x54>)
 8000660:	f000 f970 	bl	8000944 <a6_send_cmd>
		systick_delay_ms(3000);
 8000664:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000668:	f7ff ff50 	bl	800050c <systick_delay_ms>

		if(is_response)
 800066c:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <a6_startup_test+0x58>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2b00      	cmp	r3, #0
 8000674:	d004      	beq.n	8000680 <a6_startup_test+0x34>
		{
			/*Success*/
			printf("Test was successful.....\n\r");
 8000676:	480c      	ldr	r0, [pc, #48]	; (80006a8 <a6_startup_test+0x5c>)
 8000678:	f000 fb14 	bl	8000ca4 <iprintf>
			return 1;
 800067c:	2301      	movs	r3, #1
 800067e:	e009      	b.n	8000694 <a6_startup_test+0x48>
		}
		num_of_try--;
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	3b01      	subs	r3, #1
 8000684:	71fb      	strb	r3, [r7, #7]
	while(num_of_try)
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d1e8      	bne.n	800065e <a6_startup_test+0x12>
	}

	printf("ERR : Test failure....\n\r");
 800068c:	4807      	ldr	r0, [pc, #28]	; (80006ac <a6_startup_test+0x60>)
 800068e:	f000 fb09 	bl	8000ca4 <iprintf>
	return 0;
 8000692:	2300      	movs	r3, #0

}
 8000694:	4618      	mov	r0, r3
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	08001b90 	.word	0x08001b90
 80006a0:	08001c9c 	.word	0x08001c9c
 80006a4:	20000081 	.word	0x20000081
 80006a8:	08001ca8 	.word	0x08001ca8
 80006ac:	08001cc4 	.word	0x08001cc4

080006b0 <a6_signal_quality>:

static uint8_t a6_signal_quality(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
	uint8_t num_of_try  = MAX_NUM_OF_TRY;
 80006b6:	230a      	movs	r3, #10
 80006b8:	71fb      	strb	r3, [r7, #7]
	wait_resp("ok\r\n");
 80006ba:	4811      	ldr	r0, [pc, #68]	; (8000700 <a6_signal_quality+0x50>)
 80006bc:	f000 f8d4 	bl	8000868 <wait_resp>

	while(num_of_try)
 80006c0:	e013      	b.n	80006ea <a6_signal_quality+0x3a>
	{
		a6_send_cmd("AT+CSQ=?\r\n");
 80006c2:	4810      	ldr	r0, [pc, #64]	; (8000704 <a6_signal_quality+0x54>)
 80006c4:	f000 f93e 	bl	8000944 <a6_send_cmd>
		systick_delay_ms(3000);
 80006c8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80006cc:	f7ff ff1e 	bl	800050c <systick_delay_ms>

		if(is_response)
 80006d0:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <a6_signal_quality+0x58>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d004      	beq.n	80006e4 <a6_signal_quality+0x34>
		{
			/*Success*/
			printf("Signal check successful.....\n\r");
 80006da:	480c      	ldr	r0, [pc, #48]	; (800070c <a6_signal_quality+0x5c>)
 80006dc:	f000 fae2 	bl	8000ca4 <iprintf>
			return 1;
 80006e0:	2301      	movs	r3, #1
 80006e2:	e009      	b.n	80006f8 <a6_signal_quality+0x48>
		}
		num_of_try--;
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	3b01      	subs	r3, #1
 80006e8:	71fb      	strb	r3, [r7, #7]
	while(num_of_try)
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d1e8      	bne.n	80006c2 <a6_signal_quality+0x12>
	}

	printf("ERR : Signal check failure....\n\r");
 80006f0:	4807      	ldr	r0, [pc, #28]	; (8000710 <a6_signal_quality+0x60>)
 80006f2:	f000 fad7 	bl	8000ca4 <iprintf>
	return 0;
 80006f6:	2300      	movs	r3, #0

}
 80006f8:	4618      	mov	r0, r3
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	08001b90 	.word	0x08001b90
 8000704:	08001ce0 	.word	0x08001ce0
 8000708:	20000081 	.word	0x20000081
 800070c:	08001cec 	.word	0x08001cec
 8000710:	08001d0c 	.word	0x08001d0c

08000714 <a6_network_reg>:


static uint8_t a6_network_reg(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
	uint8_t num_of_try  = MAX_NUM_OF_TRY;
 800071a:	230a      	movs	r3, #10
 800071c:	71fb      	strb	r3, [r7, #7]
	wait_resp("ok\r\n");
 800071e:	4811      	ldr	r0, [pc, #68]	; (8000764 <a6_network_reg+0x50>)
 8000720:	f000 f8a2 	bl	8000868 <wait_resp>

	while(num_of_try)
 8000724:	e013      	b.n	800074e <a6_network_reg+0x3a>
	{
		a6_send_cmd("AT+CREG=?\r\n");
 8000726:	4810      	ldr	r0, [pc, #64]	; (8000768 <a6_network_reg+0x54>)
 8000728:	f000 f90c 	bl	8000944 <a6_send_cmd>
		systick_delay_ms(3000);
 800072c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000730:	f7ff feec 	bl	800050c <systick_delay_ms>

		if(is_response)
 8000734:	4b0d      	ldr	r3, [pc, #52]	; (800076c <a6_network_reg+0x58>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	b2db      	uxtb	r3, r3
 800073a:	2b00      	cmp	r3, #0
 800073c:	d004      	beq.n	8000748 <a6_network_reg+0x34>
		{
			/*Success*/
			printf("Network registration status retrieved.....\n\r");
 800073e:	480c      	ldr	r0, [pc, #48]	; (8000770 <a6_network_reg+0x5c>)
 8000740:	f000 fab0 	bl	8000ca4 <iprintf>
			return 1;
 8000744:	2301      	movs	r3, #1
 8000746:	e009      	b.n	800075c <a6_network_reg+0x48>
		}
		num_of_try--;
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	3b01      	subs	r3, #1
 800074c:	71fb      	strb	r3, [r7, #7]
	while(num_of_try)
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d1e8      	bne.n	8000726 <a6_network_reg+0x12>
	}

	printf("ERR : Registration status retrieval error....\n\r");
 8000754:	4807      	ldr	r0, [pc, #28]	; (8000774 <a6_network_reg+0x60>)
 8000756:	f000 faa5 	bl	8000ca4 <iprintf>
	return 0;
 800075a:	2300      	movs	r3, #0

}
 800075c:	4618      	mov	r0, r3
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	08001b90 	.word	0x08001b90
 8000768:	08001d30 	.word	0x08001d30
 800076c:	20000081 	.word	0x20000081
 8000770:	08001d3c 	.word	0x08001d3c
 8000774:	08001d6c 	.word	0x08001d6c

08000778 <a6_module_name>:

static uint8_t a6_module_name(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
	uint8_t num_of_try  = MAX_NUM_OF_TRY;
 800077e:	230a      	movs	r3, #10
 8000780:	71fb      	strb	r3, [r7, #7]
	wait_resp("ok\r\n");
 8000782:	4811      	ldr	r0, [pc, #68]	; (80007c8 <a6_module_name+0x50>)
 8000784:	f000 f870 	bl	8000868 <wait_resp>

	while(num_of_try)
 8000788:	e013      	b.n	80007b2 <a6_module_name+0x3a>
	{
		a6_send_cmd("ATI\r\n");
 800078a:	4810      	ldr	r0, [pc, #64]	; (80007cc <a6_module_name+0x54>)
 800078c:	f000 f8da 	bl	8000944 <a6_send_cmd>
		systick_delay_ms(3000);
 8000790:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000794:	f7ff feba 	bl	800050c <systick_delay_ms>

		if(is_response)
 8000798:	4b0d      	ldr	r3, [pc, #52]	; (80007d0 <a6_module_name+0x58>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	b2db      	uxtb	r3, r3
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d004      	beq.n	80007ac <a6_module_name+0x34>
		{
			/*Success*/
			printf("Module name retrieved successfully.....\n\r");
 80007a2:	480c      	ldr	r0, [pc, #48]	; (80007d4 <a6_module_name+0x5c>)
 80007a4:	f000 fa7e 	bl	8000ca4 <iprintf>
			return 1;
 80007a8:	2301      	movs	r3, #1
 80007aa:	e009      	b.n	80007c0 <a6_module_name+0x48>
		}
		num_of_try--;
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	3b01      	subs	r3, #1
 80007b0:	71fb      	strb	r3, [r7, #7]
	while(num_of_try)
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d1e8      	bne.n	800078a <a6_module_name+0x12>
	}

	printf("ERR : Module name  retrieval error....\n\r");
 80007b8:	4807      	ldr	r0, [pc, #28]	; (80007d8 <a6_module_name+0x60>)
 80007ba:	f000 fa73 	bl	8000ca4 <iprintf>
	return 0;
 80007be:	2300      	movs	r3, #0

}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	08001b90 	.word	0x08001b90
 80007cc:	08001d9c 	.word	0x08001d9c
 80007d0:	20000081 	.word	0x20000081
 80007d4:	08001da4 	.word	0x08001da4
 80007d8:	08001dd0 	.word	0x08001dd0

080007dc <cpy_to_uart>:


/*Copy content of tx_fifo into debug uart*/
static void cpy_to_uart(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
	char letter;

	/*Make sure transmit data register is empty and
	 * fifo has content*/
	while((USART2->SR  & SR_TXE) && tx_fifo_size() >0)
 80007e2:	e006      	b.n	80007f2 <cpy_to_uart+0x16>
	{
		/*Get char from fifo*/
		tx_fifo_get(&letter);
 80007e4:	1dfb      	adds	r3, r7, #7
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 f90c 	bl	8000a04 <tx_fifo_get>

		/*Put into uart data register*/
		USART2->DR = letter;
 80007ec:	79fa      	ldrb	r2, [r7, #7]
 80007ee:	4b08      	ldr	r3, [pc, #32]	; (8000810 <cpy_to_uart+0x34>)
 80007f0:	605a      	str	r2, [r3, #4]
	while((USART2->SR  & SR_TXE) && tx_fifo_size() >0)
 80007f2:	4b07      	ldr	r3, [pc, #28]	; (8000810 <cpy_to_uart+0x34>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d004      	beq.n	8000808 <cpy_to_uart+0x2c>
 80007fe:	f000 f927 	bl	8000a50 <tx_fifo_size>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d1ed      	bne.n	80007e4 <cpy_to_uart+0x8>
	}

}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40004400 	.word	0x40004400

08000814 <uart_output_char>:

/*Output uart character*/
static void uart_output_char(char data)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
     if(tx_fifo_put(data) == FIFOFAIL)
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	4618      	mov	r0, r3
 8000822:	f000 f8c3 	bl	80009ac <tx_fifo_put>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d002      	beq.n	8000832 <uart_output_char+0x1e>
     {
    	 return;
     }

     cpy_to_uart();
 800082c:	f7ff ffd6 	bl	80007dc <cpy_to_uart>
 8000830:	e000      	b.n	8000834 <uart_output_char+0x20>
    	 return;
 8000832:	bf00      	nop
}
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <to_lower>:



static char to_lower(char letter)

{
 800083a:	b480      	push	{r7}
 800083c:	b083      	sub	sp, #12
 800083e:	af00      	add	r7, sp, #0
 8000840:	4603      	mov	r3, r0
 8000842:	71fb      	strb	r3, [r7, #7]
	if((letter >= 'A') && (letter <= 'Z'))
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	2b40      	cmp	r3, #64	; 0x40
 8000848:	d906      	bls.n	8000858 <to_lower+0x1e>
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	2b5a      	cmp	r3, #90	; 0x5a
 800084e:	d803      	bhi.n	8000858 <to_lower+0x1e>
	{
		letter |=0x20;
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	f043 0320 	orr.w	r3, r3, #32
 8000856:	71fb      	strb	r3, [r7, #7]
	}

	return letter;
 8000858:	79fb      	ldrb	r3, [r7, #7]
}
 800085a:	4618      	mov	r0, r3
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
	...

08000868 <wait_resp>:


/*Initialize the string search in the rx data stream*/

static void wait_resp(char *pt)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	strcpy(sub_str,pt);
 8000870:	6879      	ldr	r1, [r7, #4]
 8000872:	4808      	ldr	r0, [pc, #32]	; (8000894 <wait_resp+0x2c>)
 8000874:	f000 fa2e 	bl	8000cd4 <strcpy>
	search_idx 	= 0;
 8000878:	4b07      	ldr	r3, [pc, #28]	; (8000898 <wait_resp+0x30>)
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
	is_response = false;
 800087e:	4b07      	ldr	r3, [pc, #28]	; (800089c <wait_resp+0x34>)
 8000880:	2200      	movs	r2, #0
 8000882:	701a      	strb	r2, [r3, #0]
	searching 	= true;
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <wait_resp+0x38>)
 8000886:	2201      	movs	r2, #1
 8000888:	701a      	strb	r2, [r3, #0]
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000494 	.word	0x20000494
 8000898:	20000084 	.word	0x20000084
 800089c:	20000081 	.word	0x20000081
 80008a0:	20000080 	.word	0x20000080

080008a4 <search_check>:



/*Search for string in rx data stream*/
static void search_check(char letter)
{
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	71fb      	strb	r3, [r7, #7]
	if(searching)
 80008ae:	4b14      	ldr	r3, [pc, #80]	; (8000900 <search_check+0x5c>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d01f      	beq.n	80008f8 <search_check+0x54>
	{
		/*Check if characters match*/
		if(sub_str[search_idx] == to_lower(letter))
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <search_check+0x60>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a12      	ldr	r2, [pc, #72]	; (8000908 <search_check+0x64>)
 80008be:	5cd4      	ldrb	r4, [r2, r3]
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff ffb9 	bl	800083a <to_lower>
 80008c8:	4603      	mov	r3, r0
 80008ca:	429c      	cmp	r4, r3
 80008cc:	d111      	bne.n	80008f2 <search_check+0x4e>
		{
			search_idx++;
 80008ce:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <search_check+0x60>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	3301      	adds	r3, #1
 80008d4:	4a0b      	ldr	r2, [pc, #44]	; (8000904 <search_check+0x60>)
 80008d6:	6013      	str	r3, [r2, #0]

			/* Check if end of string */
			if(sub_str[search_idx] == 0)
 80008d8:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <search_check+0x60>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a0a      	ldr	r2, [pc, #40]	; (8000908 <search_check+0x64>)
 80008de:	5cd3      	ldrb	r3, [r2, r3]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d109      	bne.n	80008f8 <search_check+0x54>
			{
				is_response =  true;
 80008e4:	4b09      	ldr	r3, [pc, #36]	; (800090c <search_check+0x68>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	701a      	strb	r2, [r3, #0]
				searching   =  false;
 80008ea:	4b05      	ldr	r3, [pc, #20]	; (8000900 <search_check+0x5c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	701a      	strb	r2, [r3, #0]
		{
			/*Start over*/
			search_idx = 0;
		}
	}
}
 80008f0:	e002      	b.n	80008f8 <search_check+0x54>
			search_idx = 0;
 80008f2:	4b04      	ldr	r3, [pc, #16]	; (8000904 <search_check+0x60>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
}
 80008f8:	bf00      	nop
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd90      	pop	{r4, r7, pc}
 8000900:	20000080 	.word	0x20000080
 8000904:	20000084 	.word	0x20000084
 8000908:	20000494 	.word	0x20000494
 800090c:	20000081 	.word	0x20000081

08000910 <a6_process_data>:


static void a6_process_data(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
	char letter;

	/*Check if there is new data in data register*/
	if(USART1->SR & SR_RXNE)
 8000916:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <a6_process_data+0x30>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	f003 0320 	and.w	r3, r3, #32
 800091e:	2b00      	cmp	r3, #0
 8000920:	d00a      	beq.n	8000938 <a6_process_data+0x28>
	{
		/*Store data from a6 uart data register to local variable*/
       letter  =  USART1->DR;
 8000922:	4b07      	ldr	r3, [pc, #28]	; (8000940 <a6_process_data+0x30>)
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	71fb      	strb	r3, [r7, #7]

       /*Print data from a6 uart data register to debug uart, meaning, your computer */
       uart_output_char(letter);
 8000928:	79fb      	ldrb	r3, [r7, #7]
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff ff72 	bl	8000814 <uart_output_char>


       /*Check for response*/
       search_check(letter);
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff ffb6 	bl	80008a4 <search_check>

	}

}
 8000938:	bf00      	nop
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40011000 	.word	0x40011000

08000944 <a6_send_cmd>:


/*Send command to a6*/
static void a6_send_cmd(const char * cmd)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	int index = 0;
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]

	while(cmd[index] != 0)
 8000950:	e009      	b.n	8000966 <a6_send_cmd+0x22>
	{
		a6_uart_write_char(cmd[index++]);
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	1c5a      	adds	r2, r3, #1
 8000956:	60fa      	str	r2, [r7, #12]
 8000958:	461a      	mov	r2, r3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4413      	add	r3, r2
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff fd8f 	bl	8000484 <a6_uart_write_char>
	while(cmd[index] != 0)
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	4413      	add	r3, r2
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d1ef      	bne.n	8000952 <a6_send_cmd+0xe>
	}
}
 8000972:	bf00      	nop
 8000974:	bf00      	nop
 8000976:	3710      	adds	r7, #16
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0

	a6_process_data();
 8000980:	f7ff ffc6 	bl	8000910 <a6_process_data>
}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}

08000988 <tx_fifo_init>:


/*Initialize tx fifo*/

void tx_fifo_init(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
	tx_put_itr = 0;
 800098c:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <tx_fifo_init+0x1c>)
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
	tx_get_itr = 0;
 8000992:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <tx_fifo_init+0x20>)
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	200004c0 	.word	0x200004c0
 80009a8:	200004bc 	.word	0x200004bc

080009ac <tx_fifo_put>:

/*Put data into tx fifo*/

uint8_t tx_fifo_put(tx_dataType data)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	71fb      	strb	r3, [r7, #7]

	/*Check if fifo is full*/
	if((tx_put_itr - tx_get_itr) & ~(TXFIFOSIZE -1))
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <tx_fifo_put+0x4c>)
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	4b10      	ldr	r3, [pc, #64]	; (80009fc <tx_fifo_put+0x50>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	1ad3      	subs	r3, r2, r3
 80009c0:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80009c4:	f023 0303 	bic.w	r3, r3, #3
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <tx_fifo_put+0x24>
	{
		/*fifo is full*/
		return (TXFAIL);
 80009cc:	2300      	movs	r3, #0
 80009ce:	e00c      	b.n	80009ea <tx_fifo_put+0x3e>
	}
	/*Put data into fifo*/
	TX_FIFO[tx_put_itr & (TXFIFOSIZE-1)] =  data;
 80009d0:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <tx_fifo_put+0x4c>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80009d8:	4909      	ldr	r1, [pc, #36]	; (8000a00 <tx_fifo_put+0x54>)
 80009da:	79fa      	ldrb	r2, [r7, #7]
 80009dc:	54ca      	strb	r2, [r1, r3]

	/*Increment itr*/
	tx_put_itr++;
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <tx_fifo_put+0x4c>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	3301      	adds	r3, #1
 80009e4:	4a04      	ldr	r2, [pc, #16]	; (80009f8 <tx_fifo_put+0x4c>)
 80009e6:	6013      	str	r3, [r2, #0]

	return(TXSUCCESS);
 80009e8:	2301      	movs	r3, #1
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	200004c0 	.word	0x200004c0
 80009fc:	200004bc 	.word	0x200004bc
 8000a00:	20000088 	.word	0x20000088

08000a04 <tx_fifo_get>:

uint8_t tx_fifo_get(tx_dataType *pdata)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
   /*Check if fifo is empty*/
	if(tx_put_itr == tx_get_itr)
 8000a0c:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <tx_fifo_get+0x40>)
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <tx_fifo_get+0x44>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d101      	bne.n	8000a1c <tx_fifo_get+0x18>
	{
		/*fifo empty*/
		return (TXFAIL);
 8000a18:	2300      	movs	r3, #0
 8000a1a:	e00d      	b.n	8000a38 <tx_fifo_get+0x34>
	}

	/*Get the data*/
	*pdata =  TX_FIFO[tx_get_itr & (TXFIFOSIZE - 1)];
 8000a1c:	4b0a      	ldr	r3, [pc, #40]	; (8000a48 <tx_fifo_get+0x44>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a24:	4a09      	ldr	r2, [pc, #36]	; (8000a4c <tx_fifo_get+0x48>)
 8000a26:	5cd2      	ldrb	r2, [r2, r3]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	701a      	strb	r2, [r3, #0]

	/*Increment the itr*/
	tx_get_itr++;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <tx_fifo_get+0x44>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	3301      	adds	r3, #1
 8000a32:	4a05      	ldr	r2, [pc, #20]	; (8000a48 <tx_fifo_get+0x44>)
 8000a34:	6013      	str	r3, [r2, #0]

	return (TXSUCCESS);
 8000a36:	2301      	movs	r3, #1
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	200004c0 	.word	0x200004c0
 8000a48:	200004bc 	.word	0x200004bc
 8000a4c:	20000088 	.word	0x20000088

08000a50 <tx_fifo_size>:


uint32_t tx_fifo_size(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
	return (uint32_t)(tx_put_itr -  tx_get_itr);
 8000a54:	4b04      	ldr	r3, [pc, #16]	; (8000a68 <tx_fifo_size+0x18>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <tx_fifo_size+0x1c>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	1ad3      	subs	r3, r2, r3
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	200004c0 	.word	0x200004c0
 8000a6c:	200004bc 	.word	0x200004bc

08000a70 <rx_fifo_init>:


/*Initialize rx fifo*/

void rx_fifo_init(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
	rx_put_itr = 0;
 8000a74:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <rx_fifo_init+0x1c>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
	rx_get_itr = 0;
 8000a7a:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <rx_fifo_init+0x20>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	200004b4 	.word	0x200004b4
 8000a90:	200004b8 	.word	0x200004b8

08000a94 <main>:

char receiver_number[] = "7491265055";
char sms_message[]  = "Hello from remote STM32 Machine";

int main()
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
	a6_module_init();
 8000a98:	f7ff fd80 	bl	800059c <a6_module_init>
	a6_set_sms_format_to_text();
 8000a9c:	f7ff fda4 	bl	80005e8 <a6_set_sms_format_to_text>
 8000aa0:	2300      	movs	r3, #0

}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b086      	sub	sp, #24
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	60f8      	str	r0, [r7, #12]
 8000aae:	60b9      	str	r1, [r7, #8]
 8000ab0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	617b      	str	r3, [r7, #20]
 8000ab6:	e00a      	b.n	8000ace <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ab8:	f3af 8000 	nop.w
 8000abc:	4601      	mov	r1, r0
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	1c5a      	adds	r2, r3, #1
 8000ac2:	60ba      	str	r2, [r7, #8]
 8000ac4:	b2ca      	uxtb	r2, r1
 8000ac6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	3301      	adds	r3, #1
 8000acc:	617b      	str	r3, [r7, #20]
 8000ace:	697a      	ldr	r2, [r7, #20]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	dbf0      	blt.n	8000ab8 <_read+0x12>
	}

return len;
 8000ad6:	687b      	ldr	r3, [r7, #4]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3718      	adds	r7, #24
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]
 8000af0:	e009      	b.n	8000b06 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	1c5a      	adds	r2, r3, #1
 8000af6:	60ba      	str	r2, [r7, #8]
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	4618      	mov	r0, r3
 8000afc:	f7ff fbc0 	bl	8000280 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	3301      	adds	r3, #1
 8000b04:	617b      	str	r3, [r7, #20]
 8000b06:	697a      	ldr	r2, [r7, #20]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	dbf1      	blt.n	8000af2 <_write+0x12>
	}
	return len;
 8000b0e:	687b      	ldr	r3, [r7, #4]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3718      	adds	r7, #24
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <_close>:

int _close(int file)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	return -1;
 8000b20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b40:	605a      	str	r2, [r3, #4]
	return 0;
 8000b42:	2300      	movs	r3, #0
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <_isatty>:

int _isatty(int file)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
	return 1;
 8000b58:	2301      	movs	r3, #1
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b66:	b480      	push	{r7}
 8000b68:	b085      	sub	sp, #20
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	60f8      	str	r0, [r7, #12]
 8000b6e:	60b9      	str	r1, [r7, #8]
 8000b70:	607a      	str	r2, [r7, #4]
	return 0;
 8000b72:	2300      	movs	r3, #0
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3714      	adds	r7, #20
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b88:	4a14      	ldr	r2, [pc, #80]	; (8000bdc <_sbrk+0x5c>)
 8000b8a:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <_sbrk+0x60>)
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b94:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <_sbrk+0x64>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d102      	bne.n	8000ba2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b9c:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <_sbrk+0x64>)
 8000b9e:	4a12      	ldr	r2, [pc, #72]	; (8000be8 <_sbrk+0x68>)
 8000ba0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ba2:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <_sbrk+0x64>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4413      	add	r3, r2
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d207      	bcs.n	8000bc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bb0:	f000 f846 	bl	8000c40 <__errno>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bba:	f04f 33ff 	mov.w	r3, #4294967295
 8000bbe:	e009      	b.n	8000bd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <_sbrk+0x64>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bc6:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <_sbrk+0x64>)
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4413      	add	r3, r2
 8000bce:	4a05      	ldr	r2, [pc, #20]	; (8000be4 <_sbrk+0x64>)
 8000bd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3718      	adds	r7, #24
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20020000 	.word	0x20020000
 8000be0:	00000400 	.word	0x00000400
 8000be4:	20000488 	.word	0x20000488
 8000be8:	200004d8 	.word	0x200004d8

08000bec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bec:	480d      	ldr	r0, [pc, #52]	; (8000c24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bee:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000bf0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bf4:	480c      	ldr	r0, [pc, #48]	; (8000c28 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bf6:	490d      	ldr	r1, [pc, #52]	; (8000c2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bf8:	4a0d      	ldr	r2, [pc, #52]	; (8000c30 <LoopForever+0xe>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bfc:	e002      	b.n	8000c04 <LoopCopyDataInit>

08000bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c02:	3304      	adds	r3, #4

08000c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c08:	d3f9      	bcc.n	8000bfe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c0c:	4c0a      	ldr	r4, [pc, #40]	; (8000c38 <LoopForever+0x16>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c10:	e001      	b.n	8000c16 <LoopFillZerobss>

08000c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c14:	3204      	adds	r2, #4

08000c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c18:	d3fb      	bcc.n	8000c12 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c1a:	f000 f817 	bl	8000c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c1e:	f7ff ff39 	bl	8000a94 <main>

08000c22 <LoopForever>:

LoopForever:
    b LoopForever
 8000c22:	e7fe      	b.n	8000c22 <LoopForever>
  ldr   r0, =_estack
 8000c24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c2c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000c30:	08001e9c 	.word	0x08001e9c
  ldr r2, =_sbss
 8000c34:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000c38:	200004d4 	.word	0x200004d4

08000c3c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c3c:	e7fe      	b.n	8000c3c <ADC_IRQHandler>
	...

08000c40 <__errno>:
 8000c40:	4b01      	ldr	r3, [pc, #4]	; (8000c48 <__errno+0x8>)
 8000c42:	6818      	ldr	r0, [r3, #0]
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	20000000 	.word	0x20000000

08000c4c <__libc_init_array>:
 8000c4c:	b570      	push	{r4, r5, r6, lr}
 8000c4e:	4d0d      	ldr	r5, [pc, #52]	; (8000c84 <__libc_init_array+0x38>)
 8000c50:	4c0d      	ldr	r4, [pc, #52]	; (8000c88 <__libc_init_array+0x3c>)
 8000c52:	1b64      	subs	r4, r4, r5
 8000c54:	10a4      	asrs	r4, r4, #2
 8000c56:	2600      	movs	r6, #0
 8000c58:	42a6      	cmp	r6, r4
 8000c5a:	d109      	bne.n	8000c70 <__libc_init_array+0x24>
 8000c5c:	4d0b      	ldr	r5, [pc, #44]	; (8000c8c <__libc_init_array+0x40>)
 8000c5e:	4c0c      	ldr	r4, [pc, #48]	; (8000c90 <__libc_init_array+0x44>)
 8000c60:	f000 ff7e 	bl	8001b60 <_init>
 8000c64:	1b64      	subs	r4, r4, r5
 8000c66:	10a4      	asrs	r4, r4, #2
 8000c68:	2600      	movs	r6, #0
 8000c6a:	42a6      	cmp	r6, r4
 8000c6c:	d105      	bne.n	8000c7a <__libc_init_array+0x2e>
 8000c6e:	bd70      	pop	{r4, r5, r6, pc}
 8000c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c74:	4798      	blx	r3
 8000c76:	3601      	adds	r6, #1
 8000c78:	e7ee      	b.n	8000c58 <__libc_init_array+0xc>
 8000c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c7e:	4798      	blx	r3
 8000c80:	3601      	adds	r6, #1
 8000c82:	e7f2      	b.n	8000c6a <__libc_init_array+0x1e>
 8000c84:	08001e94 	.word	0x08001e94
 8000c88:	08001e94 	.word	0x08001e94
 8000c8c:	08001e94 	.word	0x08001e94
 8000c90:	08001e98 	.word	0x08001e98

08000c94 <memset>:
 8000c94:	4402      	add	r2, r0
 8000c96:	4603      	mov	r3, r0
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d100      	bne.n	8000c9e <memset+0xa>
 8000c9c:	4770      	bx	lr
 8000c9e:	f803 1b01 	strb.w	r1, [r3], #1
 8000ca2:	e7f9      	b.n	8000c98 <memset+0x4>

08000ca4 <iprintf>:
 8000ca4:	b40f      	push	{r0, r1, r2, r3}
 8000ca6:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <iprintf+0x2c>)
 8000ca8:	b513      	push	{r0, r1, r4, lr}
 8000caa:	681c      	ldr	r4, [r3, #0]
 8000cac:	b124      	cbz	r4, 8000cb8 <iprintf+0x14>
 8000cae:	69a3      	ldr	r3, [r4, #24]
 8000cb0:	b913      	cbnz	r3, 8000cb8 <iprintf+0x14>
 8000cb2:	4620      	mov	r0, r4
 8000cb4:	f000 f86e 	bl	8000d94 <__sinit>
 8000cb8:	ab05      	add	r3, sp, #20
 8000cba:	9a04      	ldr	r2, [sp, #16]
 8000cbc:	68a1      	ldr	r1, [r4, #8]
 8000cbe:	9301      	str	r3, [sp, #4]
 8000cc0:	4620      	mov	r0, r4
 8000cc2:	f000 f98b 	bl	8000fdc <_vfiprintf_r>
 8000cc6:	b002      	add	sp, #8
 8000cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ccc:	b004      	add	sp, #16
 8000cce:	4770      	bx	lr
 8000cd0:	20000000 	.word	0x20000000

08000cd4 <strcpy>:
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000cda:	f803 2b01 	strb.w	r2, [r3], #1
 8000cde:	2a00      	cmp	r2, #0
 8000ce0:	d1f9      	bne.n	8000cd6 <strcpy+0x2>
 8000ce2:	4770      	bx	lr

08000ce4 <std>:
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	b510      	push	{r4, lr}
 8000ce8:	4604      	mov	r4, r0
 8000cea:	e9c0 3300 	strd	r3, r3, [r0]
 8000cee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000cf2:	6083      	str	r3, [r0, #8]
 8000cf4:	8181      	strh	r1, [r0, #12]
 8000cf6:	6643      	str	r3, [r0, #100]	; 0x64
 8000cf8:	81c2      	strh	r2, [r0, #14]
 8000cfa:	6183      	str	r3, [r0, #24]
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	2208      	movs	r2, #8
 8000d00:	305c      	adds	r0, #92	; 0x5c
 8000d02:	f7ff ffc7 	bl	8000c94 <memset>
 8000d06:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <std+0x38>)
 8000d08:	6263      	str	r3, [r4, #36]	; 0x24
 8000d0a:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <std+0x3c>)
 8000d0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8000d0e:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <std+0x40>)
 8000d10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000d12:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <std+0x44>)
 8000d14:	6224      	str	r4, [r4, #32]
 8000d16:	6323      	str	r3, [r4, #48]	; 0x30
 8000d18:	bd10      	pop	{r4, pc}
 8000d1a:	bf00      	nop
 8000d1c:	08001585 	.word	0x08001585
 8000d20:	080015a7 	.word	0x080015a7
 8000d24:	080015df 	.word	0x080015df
 8000d28:	08001603 	.word	0x08001603

08000d2c <_cleanup_r>:
 8000d2c:	4901      	ldr	r1, [pc, #4]	; (8000d34 <_cleanup_r+0x8>)
 8000d2e:	f000 b8af 	b.w	8000e90 <_fwalk_reent>
 8000d32:	bf00      	nop
 8000d34:	080018dd 	.word	0x080018dd

08000d38 <__sfmoreglue>:
 8000d38:	b570      	push	{r4, r5, r6, lr}
 8000d3a:	1e4a      	subs	r2, r1, #1
 8000d3c:	2568      	movs	r5, #104	; 0x68
 8000d3e:	4355      	muls	r5, r2
 8000d40:	460e      	mov	r6, r1
 8000d42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000d46:	f000 f8c5 	bl	8000ed4 <_malloc_r>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	b140      	cbz	r0, 8000d60 <__sfmoreglue+0x28>
 8000d4e:	2100      	movs	r1, #0
 8000d50:	e9c0 1600 	strd	r1, r6, [r0]
 8000d54:	300c      	adds	r0, #12
 8000d56:	60a0      	str	r0, [r4, #8]
 8000d58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000d5c:	f7ff ff9a 	bl	8000c94 <memset>
 8000d60:	4620      	mov	r0, r4
 8000d62:	bd70      	pop	{r4, r5, r6, pc}

08000d64 <__sfp_lock_acquire>:
 8000d64:	4801      	ldr	r0, [pc, #4]	; (8000d6c <__sfp_lock_acquire+0x8>)
 8000d66:	f000 b8b3 	b.w	8000ed0 <__retarget_lock_acquire_recursive>
 8000d6a:	bf00      	nop
 8000d6c:	200004cc 	.word	0x200004cc

08000d70 <__sfp_lock_release>:
 8000d70:	4801      	ldr	r0, [pc, #4]	; (8000d78 <__sfp_lock_release+0x8>)
 8000d72:	f000 b8ae 	b.w	8000ed2 <__retarget_lock_release_recursive>
 8000d76:	bf00      	nop
 8000d78:	200004cc 	.word	0x200004cc

08000d7c <__sinit_lock_acquire>:
 8000d7c:	4801      	ldr	r0, [pc, #4]	; (8000d84 <__sinit_lock_acquire+0x8>)
 8000d7e:	f000 b8a7 	b.w	8000ed0 <__retarget_lock_acquire_recursive>
 8000d82:	bf00      	nop
 8000d84:	200004c7 	.word	0x200004c7

08000d88 <__sinit_lock_release>:
 8000d88:	4801      	ldr	r0, [pc, #4]	; (8000d90 <__sinit_lock_release+0x8>)
 8000d8a:	f000 b8a2 	b.w	8000ed2 <__retarget_lock_release_recursive>
 8000d8e:	bf00      	nop
 8000d90:	200004c7 	.word	0x200004c7

08000d94 <__sinit>:
 8000d94:	b510      	push	{r4, lr}
 8000d96:	4604      	mov	r4, r0
 8000d98:	f7ff fff0 	bl	8000d7c <__sinit_lock_acquire>
 8000d9c:	69a3      	ldr	r3, [r4, #24]
 8000d9e:	b11b      	cbz	r3, 8000da8 <__sinit+0x14>
 8000da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000da4:	f7ff bff0 	b.w	8000d88 <__sinit_lock_release>
 8000da8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000dac:	6523      	str	r3, [r4, #80]	; 0x50
 8000dae:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <__sinit+0x68>)
 8000db0:	4a13      	ldr	r2, [pc, #76]	; (8000e00 <__sinit+0x6c>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	62a2      	str	r2, [r4, #40]	; 0x28
 8000db6:	42a3      	cmp	r3, r4
 8000db8:	bf04      	itt	eq
 8000dba:	2301      	moveq	r3, #1
 8000dbc:	61a3      	streq	r3, [r4, #24]
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	f000 f820 	bl	8000e04 <__sfp>
 8000dc4:	6060      	str	r0, [r4, #4]
 8000dc6:	4620      	mov	r0, r4
 8000dc8:	f000 f81c 	bl	8000e04 <__sfp>
 8000dcc:	60a0      	str	r0, [r4, #8]
 8000dce:	4620      	mov	r0, r4
 8000dd0:	f000 f818 	bl	8000e04 <__sfp>
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	60e0      	str	r0, [r4, #12]
 8000dd8:	2104      	movs	r1, #4
 8000dda:	6860      	ldr	r0, [r4, #4]
 8000ddc:	f7ff ff82 	bl	8000ce4 <std>
 8000de0:	68a0      	ldr	r0, [r4, #8]
 8000de2:	2201      	movs	r2, #1
 8000de4:	2109      	movs	r1, #9
 8000de6:	f7ff ff7d 	bl	8000ce4 <std>
 8000dea:	68e0      	ldr	r0, [r4, #12]
 8000dec:	2202      	movs	r2, #2
 8000dee:	2112      	movs	r1, #18
 8000df0:	f7ff ff78 	bl	8000ce4 <std>
 8000df4:	2301      	movs	r3, #1
 8000df6:	61a3      	str	r3, [r4, #24]
 8000df8:	e7d2      	b.n	8000da0 <__sinit+0xc>
 8000dfa:	bf00      	nop
 8000dfc:	08001dfc 	.word	0x08001dfc
 8000e00:	08000d2d 	.word	0x08000d2d

08000e04 <__sfp>:
 8000e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e06:	4607      	mov	r7, r0
 8000e08:	f7ff ffac 	bl	8000d64 <__sfp_lock_acquire>
 8000e0c:	4b1e      	ldr	r3, [pc, #120]	; (8000e88 <__sfp+0x84>)
 8000e0e:	681e      	ldr	r6, [r3, #0]
 8000e10:	69b3      	ldr	r3, [r6, #24]
 8000e12:	b913      	cbnz	r3, 8000e1a <__sfp+0x16>
 8000e14:	4630      	mov	r0, r6
 8000e16:	f7ff ffbd 	bl	8000d94 <__sinit>
 8000e1a:	3648      	adds	r6, #72	; 0x48
 8000e1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000e20:	3b01      	subs	r3, #1
 8000e22:	d503      	bpl.n	8000e2c <__sfp+0x28>
 8000e24:	6833      	ldr	r3, [r6, #0]
 8000e26:	b30b      	cbz	r3, 8000e6c <__sfp+0x68>
 8000e28:	6836      	ldr	r6, [r6, #0]
 8000e2a:	e7f7      	b.n	8000e1c <__sfp+0x18>
 8000e2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000e30:	b9d5      	cbnz	r5, 8000e68 <__sfp+0x64>
 8000e32:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <__sfp+0x88>)
 8000e34:	60e3      	str	r3, [r4, #12]
 8000e36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000e3a:	6665      	str	r5, [r4, #100]	; 0x64
 8000e3c:	f000 f847 	bl	8000ece <__retarget_lock_init_recursive>
 8000e40:	f7ff ff96 	bl	8000d70 <__sfp_lock_release>
 8000e44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000e48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000e4c:	6025      	str	r5, [r4, #0]
 8000e4e:	61a5      	str	r5, [r4, #24]
 8000e50:	2208      	movs	r2, #8
 8000e52:	4629      	mov	r1, r5
 8000e54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000e58:	f7ff ff1c 	bl	8000c94 <memset>
 8000e5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000e60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000e64:	4620      	mov	r0, r4
 8000e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e68:	3468      	adds	r4, #104	; 0x68
 8000e6a:	e7d9      	b.n	8000e20 <__sfp+0x1c>
 8000e6c:	2104      	movs	r1, #4
 8000e6e:	4638      	mov	r0, r7
 8000e70:	f7ff ff62 	bl	8000d38 <__sfmoreglue>
 8000e74:	4604      	mov	r4, r0
 8000e76:	6030      	str	r0, [r6, #0]
 8000e78:	2800      	cmp	r0, #0
 8000e7a:	d1d5      	bne.n	8000e28 <__sfp+0x24>
 8000e7c:	f7ff ff78 	bl	8000d70 <__sfp_lock_release>
 8000e80:	230c      	movs	r3, #12
 8000e82:	603b      	str	r3, [r7, #0]
 8000e84:	e7ee      	b.n	8000e64 <__sfp+0x60>
 8000e86:	bf00      	nop
 8000e88:	08001dfc 	.word	0x08001dfc
 8000e8c:	ffff0001 	.word	0xffff0001

08000e90 <_fwalk_reent>:
 8000e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e94:	4606      	mov	r6, r0
 8000e96:	4688      	mov	r8, r1
 8000e98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000e9c:	2700      	movs	r7, #0
 8000e9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000ea2:	f1b9 0901 	subs.w	r9, r9, #1
 8000ea6:	d505      	bpl.n	8000eb4 <_fwalk_reent+0x24>
 8000ea8:	6824      	ldr	r4, [r4, #0]
 8000eaa:	2c00      	cmp	r4, #0
 8000eac:	d1f7      	bne.n	8000e9e <_fwalk_reent+0xe>
 8000eae:	4638      	mov	r0, r7
 8000eb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000eb4:	89ab      	ldrh	r3, [r5, #12]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d907      	bls.n	8000eca <_fwalk_reent+0x3a>
 8000eba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	d003      	beq.n	8000eca <_fwalk_reent+0x3a>
 8000ec2:	4629      	mov	r1, r5
 8000ec4:	4630      	mov	r0, r6
 8000ec6:	47c0      	blx	r8
 8000ec8:	4307      	orrs	r7, r0
 8000eca:	3568      	adds	r5, #104	; 0x68
 8000ecc:	e7e9      	b.n	8000ea2 <_fwalk_reent+0x12>

08000ece <__retarget_lock_init_recursive>:
 8000ece:	4770      	bx	lr

08000ed0 <__retarget_lock_acquire_recursive>:
 8000ed0:	4770      	bx	lr

08000ed2 <__retarget_lock_release_recursive>:
 8000ed2:	4770      	bx	lr

08000ed4 <_malloc_r>:
 8000ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ed6:	1ccd      	adds	r5, r1, #3
 8000ed8:	f025 0503 	bic.w	r5, r5, #3
 8000edc:	3508      	adds	r5, #8
 8000ede:	2d0c      	cmp	r5, #12
 8000ee0:	bf38      	it	cc
 8000ee2:	250c      	movcc	r5, #12
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	4606      	mov	r6, r0
 8000ee8:	db01      	blt.n	8000eee <_malloc_r+0x1a>
 8000eea:	42a9      	cmp	r1, r5
 8000eec:	d903      	bls.n	8000ef6 <_malloc_r+0x22>
 8000eee:	230c      	movs	r3, #12
 8000ef0:	6033      	str	r3, [r6, #0]
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ef6:	f000 fda3 	bl	8001a40 <__malloc_lock>
 8000efa:	4921      	ldr	r1, [pc, #132]	; (8000f80 <_malloc_r+0xac>)
 8000efc:	680a      	ldr	r2, [r1, #0]
 8000efe:	4614      	mov	r4, r2
 8000f00:	b99c      	cbnz	r4, 8000f2a <_malloc_r+0x56>
 8000f02:	4f20      	ldr	r7, [pc, #128]	; (8000f84 <_malloc_r+0xb0>)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	b923      	cbnz	r3, 8000f12 <_malloc_r+0x3e>
 8000f08:	4621      	mov	r1, r4
 8000f0a:	4630      	mov	r0, r6
 8000f0c:	f000 fb2a 	bl	8001564 <_sbrk_r>
 8000f10:	6038      	str	r0, [r7, #0]
 8000f12:	4629      	mov	r1, r5
 8000f14:	4630      	mov	r0, r6
 8000f16:	f000 fb25 	bl	8001564 <_sbrk_r>
 8000f1a:	1c43      	adds	r3, r0, #1
 8000f1c:	d123      	bne.n	8000f66 <_malloc_r+0x92>
 8000f1e:	230c      	movs	r3, #12
 8000f20:	6033      	str	r3, [r6, #0]
 8000f22:	4630      	mov	r0, r6
 8000f24:	f000 fd92 	bl	8001a4c <__malloc_unlock>
 8000f28:	e7e3      	b.n	8000ef2 <_malloc_r+0x1e>
 8000f2a:	6823      	ldr	r3, [r4, #0]
 8000f2c:	1b5b      	subs	r3, r3, r5
 8000f2e:	d417      	bmi.n	8000f60 <_malloc_r+0x8c>
 8000f30:	2b0b      	cmp	r3, #11
 8000f32:	d903      	bls.n	8000f3c <_malloc_r+0x68>
 8000f34:	6023      	str	r3, [r4, #0]
 8000f36:	441c      	add	r4, r3
 8000f38:	6025      	str	r5, [r4, #0]
 8000f3a:	e004      	b.n	8000f46 <_malloc_r+0x72>
 8000f3c:	6863      	ldr	r3, [r4, #4]
 8000f3e:	42a2      	cmp	r2, r4
 8000f40:	bf0c      	ite	eq
 8000f42:	600b      	streq	r3, [r1, #0]
 8000f44:	6053      	strne	r3, [r2, #4]
 8000f46:	4630      	mov	r0, r6
 8000f48:	f000 fd80 	bl	8001a4c <__malloc_unlock>
 8000f4c:	f104 000b 	add.w	r0, r4, #11
 8000f50:	1d23      	adds	r3, r4, #4
 8000f52:	f020 0007 	bic.w	r0, r0, #7
 8000f56:	1ac2      	subs	r2, r0, r3
 8000f58:	d0cc      	beq.n	8000ef4 <_malloc_r+0x20>
 8000f5a:	1a1b      	subs	r3, r3, r0
 8000f5c:	50a3      	str	r3, [r4, r2]
 8000f5e:	e7c9      	b.n	8000ef4 <_malloc_r+0x20>
 8000f60:	4622      	mov	r2, r4
 8000f62:	6864      	ldr	r4, [r4, #4]
 8000f64:	e7cc      	b.n	8000f00 <_malloc_r+0x2c>
 8000f66:	1cc4      	adds	r4, r0, #3
 8000f68:	f024 0403 	bic.w	r4, r4, #3
 8000f6c:	42a0      	cmp	r0, r4
 8000f6e:	d0e3      	beq.n	8000f38 <_malloc_r+0x64>
 8000f70:	1a21      	subs	r1, r4, r0
 8000f72:	4630      	mov	r0, r6
 8000f74:	f000 faf6 	bl	8001564 <_sbrk_r>
 8000f78:	3001      	adds	r0, #1
 8000f7a:	d1dd      	bne.n	8000f38 <_malloc_r+0x64>
 8000f7c:	e7cf      	b.n	8000f1e <_malloc_r+0x4a>
 8000f7e:	bf00      	nop
 8000f80:	2000048c 	.word	0x2000048c
 8000f84:	20000490 	.word	0x20000490

08000f88 <__sfputc_r>:
 8000f88:	6893      	ldr	r3, [r2, #8]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	b410      	push	{r4}
 8000f90:	6093      	str	r3, [r2, #8]
 8000f92:	da08      	bge.n	8000fa6 <__sfputc_r+0x1e>
 8000f94:	6994      	ldr	r4, [r2, #24]
 8000f96:	42a3      	cmp	r3, r4
 8000f98:	db01      	blt.n	8000f9e <__sfputc_r+0x16>
 8000f9a:	290a      	cmp	r1, #10
 8000f9c:	d103      	bne.n	8000fa6 <__sfputc_r+0x1e>
 8000f9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000fa2:	f000 bb33 	b.w	800160c <__swbuf_r>
 8000fa6:	6813      	ldr	r3, [r2, #0]
 8000fa8:	1c58      	adds	r0, r3, #1
 8000faa:	6010      	str	r0, [r2, #0]
 8000fac:	7019      	strb	r1, [r3, #0]
 8000fae:	4608      	mov	r0, r1
 8000fb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <__sfputs_r>:
 8000fb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fb8:	4606      	mov	r6, r0
 8000fba:	460f      	mov	r7, r1
 8000fbc:	4614      	mov	r4, r2
 8000fbe:	18d5      	adds	r5, r2, r3
 8000fc0:	42ac      	cmp	r4, r5
 8000fc2:	d101      	bne.n	8000fc8 <__sfputs_r+0x12>
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	e007      	b.n	8000fd8 <__sfputs_r+0x22>
 8000fc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000fcc:	463a      	mov	r2, r7
 8000fce:	4630      	mov	r0, r6
 8000fd0:	f7ff ffda 	bl	8000f88 <__sfputc_r>
 8000fd4:	1c43      	adds	r3, r0, #1
 8000fd6:	d1f3      	bne.n	8000fc0 <__sfputs_r+0xa>
 8000fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000fdc <_vfiprintf_r>:
 8000fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fe0:	460d      	mov	r5, r1
 8000fe2:	b09d      	sub	sp, #116	; 0x74
 8000fe4:	4614      	mov	r4, r2
 8000fe6:	4698      	mov	r8, r3
 8000fe8:	4606      	mov	r6, r0
 8000fea:	b118      	cbz	r0, 8000ff4 <_vfiprintf_r+0x18>
 8000fec:	6983      	ldr	r3, [r0, #24]
 8000fee:	b90b      	cbnz	r3, 8000ff4 <_vfiprintf_r+0x18>
 8000ff0:	f7ff fed0 	bl	8000d94 <__sinit>
 8000ff4:	4b89      	ldr	r3, [pc, #548]	; (800121c <_vfiprintf_r+0x240>)
 8000ff6:	429d      	cmp	r5, r3
 8000ff8:	d11b      	bne.n	8001032 <_vfiprintf_r+0x56>
 8000ffa:	6875      	ldr	r5, [r6, #4]
 8000ffc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000ffe:	07d9      	lsls	r1, r3, #31
 8001000:	d405      	bmi.n	800100e <_vfiprintf_r+0x32>
 8001002:	89ab      	ldrh	r3, [r5, #12]
 8001004:	059a      	lsls	r2, r3, #22
 8001006:	d402      	bmi.n	800100e <_vfiprintf_r+0x32>
 8001008:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800100a:	f7ff ff61 	bl	8000ed0 <__retarget_lock_acquire_recursive>
 800100e:	89ab      	ldrh	r3, [r5, #12]
 8001010:	071b      	lsls	r3, r3, #28
 8001012:	d501      	bpl.n	8001018 <_vfiprintf_r+0x3c>
 8001014:	692b      	ldr	r3, [r5, #16]
 8001016:	b9eb      	cbnz	r3, 8001054 <_vfiprintf_r+0x78>
 8001018:	4629      	mov	r1, r5
 800101a:	4630      	mov	r0, r6
 800101c:	f000 fb5a 	bl	80016d4 <__swsetup_r>
 8001020:	b1c0      	cbz	r0, 8001054 <_vfiprintf_r+0x78>
 8001022:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001024:	07dc      	lsls	r4, r3, #31
 8001026:	d50e      	bpl.n	8001046 <_vfiprintf_r+0x6a>
 8001028:	f04f 30ff 	mov.w	r0, #4294967295
 800102c:	b01d      	add	sp, #116	; 0x74
 800102e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001032:	4b7b      	ldr	r3, [pc, #492]	; (8001220 <_vfiprintf_r+0x244>)
 8001034:	429d      	cmp	r5, r3
 8001036:	d101      	bne.n	800103c <_vfiprintf_r+0x60>
 8001038:	68b5      	ldr	r5, [r6, #8]
 800103a:	e7df      	b.n	8000ffc <_vfiprintf_r+0x20>
 800103c:	4b79      	ldr	r3, [pc, #484]	; (8001224 <_vfiprintf_r+0x248>)
 800103e:	429d      	cmp	r5, r3
 8001040:	bf08      	it	eq
 8001042:	68f5      	ldreq	r5, [r6, #12]
 8001044:	e7da      	b.n	8000ffc <_vfiprintf_r+0x20>
 8001046:	89ab      	ldrh	r3, [r5, #12]
 8001048:	0598      	lsls	r0, r3, #22
 800104a:	d4ed      	bmi.n	8001028 <_vfiprintf_r+0x4c>
 800104c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800104e:	f7ff ff40 	bl	8000ed2 <__retarget_lock_release_recursive>
 8001052:	e7e9      	b.n	8001028 <_vfiprintf_r+0x4c>
 8001054:	2300      	movs	r3, #0
 8001056:	9309      	str	r3, [sp, #36]	; 0x24
 8001058:	2320      	movs	r3, #32
 800105a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800105e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001062:	2330      	movs	r3, #48	; 0x30
 8001064:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001228 <_vfiprintf_r+0x24c>
 8001068:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800106c:	f04f 0901 	mov.w	r9, #1
 8001070:	4623      	mov	r3, r4
 8001072:	469a      	mov	sl, r3
 8001074:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001078:	b10a      	cbz	r2, 800107e <_vfiprintf_r+0xa2>
 800107a:	2a25      	cmp	r2, #37	; 0x25
 800107c:	d1f9      	bne.n	8001072 <_vfiprintf_r+0x96>
 800107e:	ebba 0b04 	subs.w	fp, sl, r4
 8001082:	d00b      	beq.n	800109c <_vfiprintf_r+0xc0>
 8001084:	465b      	mov	r3, fp
 8001086:	4622      	mov	r2, r4
 8001088:	4629      	mov	r1, r5
 800108a:	4630      	mov	r0, r6
 800108c:	f7ff ff93 	bl	8000fb6 <__sfputs_r>
 8001090:	3001      	adds	r0, #1
 8001092:	f000 80aa 	beq.w	80011ea <_vfiprintf_r+0x20e>
 8001096:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001098:	445a      	add	r2, fp
 800109a:	9209      	str	r2, [sp, #36]	; 0x24
 800109c:	f89a 3000 	ldrb.w	r3, [sl]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	f000 80a2 	beq.w	80011ea <_vfiprintf_r+0x20e>
 80010a6:	2300      	movs	r3, #0
 80010a8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80010b0:	f10a 0a01 	add.w	sl, sl, #1
 80010b4:	9304      	str	r3, [sp, #16]
 80010b6:	9307      	str	r3, [sp, #28]
 80010b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80010bc:	931a      	str	r3, [sp, #104]	; 0x68
 80010be:	4654      	mov	r4, sl
 80010c0:	2205      	movs	r2, #5
 80010c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80010c6:	4858      	ldr	r0, [pc, #352]	; (8001228 <_vfiprintf_r+0x24c>)
 80010c8:	f7ff f88a 	bl	80001e0 <memchr>
 80010cc:	9a04      	ldr	r2, [sp, #16]
 80010ce:	b9d8      	cbnz	r0, 8001108 <_vfiprintf_r+0x12c>
 80010d0:	06d1      	lsls	r1, r2, #27
 80010d2:	bf44      	itt	mi
 80010d4:	2320      	movmi	r3, #32
 80010d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80010da:	0713      	lsls	r3, r2, #28
 80010dc:	bf44      	itt	mi
 80010de:	232b      	movmi	r3, #43	; 0x2b
 80010e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80010e4:	f89a 3000 	ldrb.w	r3, [sl]
 80010e8:	2b2a      	cmp	r3, #42	; 0x2a
 80010ea:	d015      	beq.n	8001118 <_vfiprintf_r+0x13c>
 80010ec:	9a07      	ldr	r2, [sp, #28]
 80010ee:	4654      	mov	r4, sl
 80010f0:	2000      	movs	r0, #0
 80010f2:	f04f 0c0a 	mov.w	ip, #10
 80010f6:	4621      	mov	r1, r4
 80010f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80010fc:	3b30      	subs	r3, #48	; 0x30
 80010fe:	2b09      	cmp	r3, #9
 8001100:	d94e      	bls.n	80011a0 <_vfiprintf_r+0x1c4>
 8001102:	b1b0      	cbz	r0, 8001132 <_vfiprintf_r+0x156>
 8001104:	9207      	str	r2, [sp, #28]
 8001106:	e014      	b.n	8001132 <_vfiprintf_r+0x156>
 8001108:	eba0 0308 	sub.w	r3, r0, r8
 800110c:	fa09 f303 	lsl.w	r3, r9, r3
 8001110:	4313      	orrs	r3, r2
 8001112:	9304      	str	r3, [sp, #16]
 8001114:	46a2      	mov	sl, r4
 8001116:	e7d2      	b.n	80010be <_vfiprintf_r+0xe2>
 8001118:	9b03      	ldr	r3, [sp, #12]
 800111a:	1d19      	adds	r1, r3, #4
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	9103      	str	r1, [sp, #12]
 8001120:	2b00      	cmp	r3, #0
 8001122:	bfbb      	ittet	lt
 8001124:	425b      	neglt	r3, r3
 8001126:	f042 0202 	orrlt.w	r2, r2, #2
 800112a:	9307      	strge	r3, [sp, #28]
 800112c:	9307      	strlt	r3, [sp, #28]
 800112e:	bfb8      	it	lt
 8001130:	9204      	strlt	r2, [sp, #16]
 8001132:	7823      	ldrb	r3, [r4, #0]
 8001134:	2b2e      	cmp	r3, #46	; 0x2e
 8001136:	d10c      	bne.n	8001152 <_vfiprintf_r+0x176>
 8001138:	7863      	ldrb	r3, [r4, #1]
 800113a:	2b2a      	cmp	r3, #42	; 0x2a
 800113c:	d135      	bne.n	80011aa <_vfiprintf_r+0x1ce>
 800113e:	9b03      	ldr	r3, [sp, #12]
 8001140:	1d1a      	adds	r2, r3, #4
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	9203      	str	r2, [sp, #12]
 8001146:	2b00      	cmp	r3, #0
 8001148:	bfb8      	it	lt
 800114a:	f04f 33ff 	movlt.w	r3, #4294967295
 800114e:	3402      	adds	r4, #2
 8001150:	9305      	str	r3, [sp, #20]
 8001152:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001238 <_vfiprintf_r+0x25c>
 8001156:	7821      	ldrb	r1, [r4, #0]
 8001158:	2203      	movs	r2, #3
 800115a:	4650      	mov	r0, sl
 800115c:	f7ff f840 	bl	80001e0 <memchr>
 8001160:	b140      	cbz	r0, 8001174 <_vfiprintf_r+0x198>
 8001162:	2340      	movs	r3, #64	; 0x40
 8001164:	eba0 000a 	sub.w	r0, r0, sl
 8001168:	fa03 f000 	lsl.w	r0, r3, r0
 800116c:	9b04      	ldr	r3, [sp, #16]
 800116e:	4303      	orrs	r3, r0
 8001170:	3401      	adds	r4, #1
 8001172:	9304      	str	r3, [sp, #16]
 8001174:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001178:	482c      	ldr	r0, [pc, #176]	; (800122c <_vfiprintf_r+0x250>)
 800117a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800117e:	2206      	movs	r2, #6
 8001180:	f7ff f82e 	bl	80001e0 <memchr>
 8001184:	2800      	cmp	r0, #0
 8001186:	d03f      	beq.n	8001208 <_vfiprintf_r+0x22c>
 8001188:	4b29      	ldr	r3, [pc, #164]	; (8001230 <_vfiprintf_r+0x254>)
 800118a:	bb1b      	cbnz	r3, 80011d4 <_vfiprintf_r+0x1f8>
 800118c:	9b03      	ldr	r3, [sp, #12]
 800118e:	3307      	adds	r3, #7
 8001190:	f023 0307 	bic.w	r3, r3, #7
 8001194:	3308      	adds	r3, #8
 8001196:	9303      	str	r3, [sp, #12]
 8001198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800119a:	443b      	add	r3, r7
 800119c:	9309      	str	r3, [sp, #36]	; 0x24
 800119e:	e767      	b.n	8001070 <_vfiprintf_r+0x94>
 80011a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80011a4:	460c      	mov	r4, r1
 80011a6:	2001      	movs	r0, #1
 80011a8:	e7a5      	b.n	80010f6 <_vfiprintf_r+0x11a>
 80011aa:	2300      	movs	r3, #0
 80011ac:	3401      	adds	r4, #1
 80011ae:	9305      	str	r3, [sp, #20]
 80011b0:	4619      	mov	r1, r3
 80011b2:	f04f 0c0a 	mov.w	ip, #10
 80011b6:	4620      	mov	r0, r4
 80011b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80011bc:	3a30      	subs	r2, #48	; 0x30
 80011be:	2a09      	cmp	r2, #9
 80011c0:	d903      	bls.n	80011ca <_vfiprintf_r+0x1ee>
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d0c5      	beq.n	8001152 <_vfiprintf_r+0x176>
 80011c6:	9105      	str	r1, [sp, #20]
 80011c8:	e7c3      	b.n	8001152 <_vfiprintf_r+0x176>
 80011ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80011ce:	4604      	mov	r4, r0
 80011d0:	2301      	movs	r3, #1
 80011d2:	e7f0      	b.n	80011b6 <_vfiprintf_r+0x1da>
 80011d4:	ab03      	add	r3, sp, #12
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	462a      	mov	r2, r5
 80011da:	4b16      	ldr	r3, [pc, #88]	; (8001234 <_vfiprintf_r+0x258>)
 80011dc:	a904      	add	r1, sp, #16
 80011de:	4630      	mov	r0, r6
 80011e0:	f3af 8000 	nop.w
 80011e4:	4607      	mov	r7, r0
 80011e6:	1c78      	adds	r0, r7, #1
 80011e8:	d1d6      	bne.n	8001198 <_vfiprintf_r+0x1bc>
 80011ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80011ec:	07d9      	lsls	r1, r3, #31
 80011ee:	d405      	bmi.n	80011fc <_vfiprintf_r+0x220>
 80011f0:	89ab      	ldrh	r3, [r5, #12]
 80011f2:	059a      	lsls	r2, r3, #22
 80011f4:	d402      	bmi.n	80011fc <_vfiprintf_r+0x220>
 80011f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80011f8:	f7ff fe6b 	bl	8000ed2 <__retarget_lock_release_recursive>
 80011fc:	89ab      	ldrh	r3, [r5, #12]
 80011fe:	065b      	lsls	r3, r3, #25
 8001200:	f53f af12 	bmi.w	8001028 <_vfiprintf_r+0x4c>
 8001204:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001206:	e711      	b.n	800102c <_vfiprintf_r+0x50>
 8001208:	ab03      	add	r3, sp, #12
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	462a      	mov	r2, r5
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <_vfiprintf_r+0x258>)
 8001210:	a904      	add	r1, sp, #16
 8001212:	4630      	mov	r0, r6
 8001214:	f000 f880 	bl	8001318 <_printf_i>
 8001218:	e7e4      	b.n	80011e4 <_vfiprintf_r+0x208>
 800121a:	bf00      	nop
 800121c:	08001e20 	.word	0x08001e20
 8001220:	08001e40 	.word	0x08001e40
 8001224:	08001e00 	.word	0x08001e00
 8001228:	08001e60 	.word	0x08001e60
 800122c:	08001e6a 	.word	0x08001e6a
 8001230:	00000000 	.word	0x00000000
 8001234:	08000fb7 	.word	0x08000fb7
 8001238:	08001e66 	.word	0x08001e66

0800123c <_printf_common>:
 800123c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001240:	4616      	mov	r6, r2
 8001242:	4699      	mov	r9, r3
 8001244:	688a      	ldr	r2, [r1, #8]
 8001246:	690b      	ldr	r3, [r1, #16]
 8001248:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800124c:	4293      	cmp	r3, r2
 800124e:	bfb8      	it	lt
 8001250:	4613      	movlt	r3, r2
 8001252:	6033      	str	r3, [r6, #0]
 8001254:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001258:	4607      	mov	r7, r0
 800125a:	460c      	mov	r4, r1
 800125c:	b10a      	cbz	r2, 8001262 <_printf_common+0x26>
 800125e:	3301      	adds	r3, #1
 8001260:	6033      	str	r3, [r6, #0]
 8001262:	6823      	ldr	r3, [r4, #0]
 8001264:	0699      	lsls	r1, r3, #26
 8001266:	bf42      	ittt	mi
 8001268:	6833      	ldrmi	r3, [r6, #0]
 800126a:	3302      	addmi	r3, #2
 800126c:	6033      	strmi	r3, [r6, #0]
 800126e:	6825      	ldr	r5, [r4, #0]
 8001270:	f015 0506 	ands.w	r5, r5, #6
 8001274:	d106      	bne.n	8001284 <_printf_common+0x48>
 8001276:	f104 0a19 	add.w	sl, r4, #25
 800127a:	68e3      	ldr	r3, [r4, #12]
 800127c:	6832      	ldr	r2, [r6, #0]
 800127e:	1a9b      	subs	r3, r3, r2
 8001280:	42ab      	cmp	r3, r5
 8001282:	dc26      	bgt.n	80012d2 <_printf_common+0x96>
 8001284:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001288:	1e13      	subs	r3, r2, #0
 800128a:	6822      	ldr	r2, [r4, #0]
 800128c:	bf18      	it	ne
 800128e:	2301      	movne	r3, #1
 8001290:	0692      	lsls	r2, r2, #26
 8001292:	d42b      	bmi.n	80012ec <_printf_common+0xb0>
 8001294:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001298:	4649      	mov	r1, r9
 800129a:	4638      	mov	r0, r7
 800129c:	47c0      	blx	r8
 800129e:	3001      	adds	r0, #1
 80012a0:	d01e      	beq.n	80012e0 <_printf_common+0xa4>
 80012a2:	6823      	ldr	r3, [r4, #0]
 80012a4:	68e5      	ldr	r5, [r4, #12]
 80012a6:	6832      	ldr	r2, [r6, #0]
 80012a8:	f003 0306 	and.w	r3, r3, #6
 80012ac:	2b04      	cmp	r3, #4
 80012ae:	bf08      	it	eq
 80012b0:	1aad      	subeq	r5, r5, r2
 80012b2:	68a3      	ldr	r3, [r4, #8]
 80012b4:	6922      	ldr	r2, [r4, #16]
 80012b6:	bf0c      	ite	eq
 80012b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80012bc:	2500      	movne	r5, #0
 80012be:	4293      	cmp	r3, r2
 80012c0:	bfc4      	itt	gt
 80012c2:	1a9b      	subgt	r3, r3, r2
 80012c4:	18ed      	addgt	r5, r5, r3
 80012c6:	2600      	movs	r6, #0
 80012c8:	341a      	adds	r4, #26
 80012ca:	42b5      	cmp	r5, r6
 80012cc:	d11a      	bne.n	8001304 <_printf_common+0xc8>
 80012ce:	2000      	movs	r0, #0
 80012d0:	e008      	b.n	80012e4 <_printf_common+0xa8>
 80012d2:	2301      	movs	r3, #1
 80012d4:	4652      	mov	r2, sl
 80012d6:	4649      	mov	r1, r9
 80012d8:	4638      	mov	r0, r7
 80012da:	47c0      	blx	r8
 80012dc:	3001      	adds	r0, #1
 80012de:	d103      	bne.n	80012e8 <_printf_common+0xac>
 80012e0:	f04f 30ff 	mov.w	r0, #4294967295
 80012e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012e8:	3501      	adds	r5, #1
 80012ea:	e7c6      	b.n	800127a <_printf_common+0x3e>
 80012ec:	18e1      	adds	r1, r4, r3
 80012ee:	1c5a      	adds	r2, r3, #1
 80012f0:	2030      	movs	r0, #48	; 0x30
 80012f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80012f6:	4422      	add	r2, r4
 80012f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80012fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001300:	3302      	adds	r3, #2
 8001302:	e7c7      	b.n	8001294 <_printf_common+0x58>
 8001304:	2301      	movs	r3, #1
 8001306:	4622      	mov	r2, r4
 8001308:	4649      	mov	r1, r9
 800130a:	4638      	mov	r0, r7
 800130c:	47c0      	blx	r8
 800130e:	3001      	adds	r0, #1
 8001310:	d0e6      	beq.n	80012e0 <_printf_common+0xa4>
 8001312:	3601      	adds	r6, #1
 8001314:	e7d9      	b.n	80012ca <_printf_common+0x8e>
	...

08001318 <_printf_i>:
 8001318:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800131c:	460c      	mov	r4, r1
 800131e:	4691      	mov	r9, r2
 8001320:	7e27      	ldrb	r7, [r4, #24]
 8001322:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001324:	2f78      	cmp	r7, #120	; 0x78
 8001326:	4680      	mov	r8, r0
 8001328:	469a      	mov	sl, r3
 800132a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800132e:	d807      	bhi.n	8001340 <_printf_i+0x28>
 8001330:	2f62      	cmp	r7, #98	; 0x62
 8001332:	d80a      	bhi.n	800134a <_printf_i+0x32>
 8001334:	2f00      	cmp	r7, #0
 8001336:	f000 80d8 	beq.w	80014ea <_printf_i+0x1d2>
 800133a:	2f58      	cmp	r7, #88	; 0x58
 800133c:	f000 80a3 	beq.w	8001486 <_printf_i+0x16e>
 8001340:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001344:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001348:	e03a      	b.n	80013c0 <_printf_i+0xa8>
 800134a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800134e:	2b15      	cmp	r3, #21
 8001350:	d8f6      	bhi.n	8001340 <_printf_i+0x28>
 8001352:	a001      	add	r0, pc, #4	; (adr r0, 8001358 <_printf_i+0x40>)
 8001354:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001358:	080013b1 	.word	0x080013b1
 800135c:	080013c5 	.word	0x080013c5
 8001360:	08001341 	.word	0x08001341
 8001364:	08001341 	.word	0x08001341
 8001368:	08001341 	.word	0x08001341
 800136c:	08001341 	.word	0x08001341
 8001370:	080013c5 	.word	0x080013c5
 8001374:	08001341 	.word	0x08001341
 8001378:	08001341 	.word	0x08001341
 800137c:	08001341 	.word	0x08001341
 8001380:	08001341 	.word	0x08001341
 8001384:	080014d1 	.word	0x080014d1
 8001388:	080013f5 	.word	0x080013f5
 800138c:	080014b3 	.word	0x080014b3
 8001390:	08001341 	.word	0x08001341
 8001394:	08001341 	.word	0x08001341
 8001398:	080014f3 	.word	0x080014f3
 800139c:	08001341 	.word	0x08001341
 80013a0:	080013f5 	.word	0x080013f5
 80013a4:	08001341 	.word	0x08001341
 80013a8:	08001341 	.word	0x08001341
 80013ac:	080014bb 	.word	0x080014bb
 80013b0:	680b      	ldr	r3, [r1, #0]
 80013b2:	1d1a      	adds	r2, r3, #4
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	600a      	str	r2, [r1, #0]
 80013b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80013bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80013c0:	2301      	movs	r3, #1
 80013c2:	e0a3      	b.n	800150c <_printf_i+0x1f4>
 80013c4:	6825      	ldr	r5, [r4, #0]
 80013c6:	6808      	ldr	r0, [r1, #0]
 80013c8:	062e      	lsls	r6, r5, #24
 80013ca:	f100 0304 	add.w	r3, r0, #4
 80013ce:	d50a      	bpl.n	80013e6 <_printf_i+0xce>
 80013d0:	6805      	ldr	r5, [r0, #0]
 80013d2:	600b      	str	r3, [r1, #0]
 80013d4:	2d00      	cmp	r5, #0
 80013d6:	da03      	bge.n	80013e0 <_printf_i+0xc8>
 80013d8:	232d      	movs	r3, #45	; 0x2d
 80013da:	426d      	negs	r5, r5
 80013dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80013e0:	485e      	ldr	r0, [pc, #376]	; (800155c <_printf_i+0x244>)
 80013e2:	230a      	movs	r3, #10
 80013e4:	e019      	b.n	800141a <_printf_i+0x102>
 80013e6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80013ea:	6805      	ldr	r5, [r0, #0]
 80013ec:	600b      	str	r3, [r1, #0]
 80013ee:	bf18      	it	ne
 80013f0:	b22d      	sxthne	r5, r5
 80013f2:	e7ef      	b.n	80013d4 <_printf_i+0xbc>
 80013f4:	680b      	ldr	r3, [r1, #0]
 80013f6:	6825      	ldr	r5, [r4, #0]
 80013f8:	1d18      	adds	r0, r3, #4
 80013fa:	6008      	str	r0, [r1, #0]
 80013fc:	0628      	lsls	r0, r5, #24
 80013fe:	d501      	bpl.n	8001404 <_printf_i+0xec>
 8001400:	681d      	ldr	r5, [r3, #0]
 8001402:	e002      	b.n	800140a <_printf_i+0xf2>
 8001404:	0669      	lsls	r1, r5, #25
 8001406:	d5fb      	bpl.n	8001400 <_printf_i+0xe8>
 8001408:	881d      	ldrh	r5, [r3, #0]
 800140a:	4854      	ldr	r0, [pc, #336]	; (800155c <_printf_i+0x244>)
 800140c:	2f6f      	cmp	r7, #111	; 0x6f
 800140e:	bf0c      	ite	eq
 8001410:	2308      	moveq	r3, #8
 8001412:	230a      	movne	r3, #10
 8001414:	2100      	movs	r1, #0
 8001416:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800141a:	6866      	ldr	r6, [r4, #4]
 800141c:	60a6      	str	r6, [r4, #8]
 800141e:	2e00      	cmp	r6, #0
 8001420:	bfa2      	ittt	ge
 8001422:	6821      	ldrge	r1, [r4, #0]
 8001424:	f021 0104 	bicge.w	r1, r1, #4
 8001428:	6021      	strge	r1, [r4, #0]
 800142a:	b90d      	cbnz	r5, 8001430 <_printf_i+0x118>
 800142c:	2e00      	cmp	r6, #0
 800142e:	d04d      	beq.n	80014cc <_printf_i+0x1b4>
 8001430:	4616      	mov	r6, r2
 8001432:	fbb5 f1f3 	udiv	r1, r5, r3
 8001436:	fb03 5711 	mls	r7, r3, r1, r5
 800143a:	5dc7      	ldrb	r7, [r0, r7]
 800143c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001440:	462f      	mov	r7, r5
 8001442:	42bb      	cmp	r3, r7
 8001444:	460d      	mov	r5, r1
 8001446:	d9f4      	bls.n	8001432 <_printf_i+0x11a>
 8001448:	2b08      	cmp	r3, #8
 800144a:	d10b      	bne.n	8001464 <_printf_i+0x14c>
 800144c:	6823      	ldr	r3, [r4, #0]
 800144e:	07df      	lsls	r7, r3, #31
 8001450:	d508      	bpl.n	8001464 <_printf_i+0x14c>
 8001452:	6923      	ldr	r3, [r4, #16]
 8001454:	6861      	ldr	r1, [r4, #4]
 8001456:	4299      	cmp	r1, r3
 8001458:	bfde      	ittt	le
 800145a:	2330      	movle	r3, #48	; 0x30
 800145c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001460:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001464:	1b92      	subs	r2, r2, r6
 8001466:	6122      	str	r2, [r4, #16]
 8001468:	f8cd a000 	str.w	sl, [sp]
 800146c:	464b      	mov	r3, r9
 800146e:	aa03      	add	r2, sp, #12
 8001470:	4621      	mov	r1, r4
 8001472:	4640      	mov	r0, r8
 8001474:	f7ff fee2 	bl	800123c <_printf_common>
 8001478:	3001      	adds	r0, #1
 800147a:	d14c      	bne.n	8001516 <_printf_i+0x1fe>
 800147c:	f04f 30ff 	mov.w	r0, #4294967295
 8001480:	b004      	add	sp, #16
 8001482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001486:	4835      	ldr	r0, [pc, #212]	; (800155c <_printf_i+0x244>)
 8001488:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800148c:	6823      	ldr	r3, [r4, #0]
 800148e:	680e      	ldr	r6, [r1, #0]
 8001490:	061f      	lsls	r7, r3, #24
 8001492:	f856 5b04 	ldr.w	r5, [r6], #4
 8001496:	600e      	str	r6, [r1, #0]
 8001498:	d514      	bpl.n	80014c4 <_printf_i+0x1ac>
 800149a:	07d9      	lsls	r1, r3, #31
 800149c:	bf44      	itt	mi
 800149e:	f043 0320 	orrmi.w	r3, r3, #32
 80014a2:	6023      	strmi	r3, [r4, #0]
 80014a4:	b91d      	cbnz	r5, 80014ae <_printf_i+0x196>
 80014a6:	6823      	ldr	r3, [r4, #0]
 80014a8:	f023 0320 	bic.w	r3, r3, #32
 80014ac:	6023      	str	r3, [r4, #0]
 80014ae:	2310      	movs	r3, #16
 80014b0:	e7b0      	b.n	8001414 <_printf_i+0xfc>
 80014b2:	6823      	ldr	r3, [r4, #0]
 80014b4:	f043 0320 	orr.w	r3, r3, #32
 80014b8:	6023      	str	r3, [r4, #0]
 80014ba:	2378      	movs	r3, #120	; 0x78
 80014bc:	4828      	ldr	r0, [pc, #160]	; (8001560 <_printf_i+0x248>)
 80014be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80014c2:	e7e3      	b.n	800148c <_printf_i+0x174>
 80014c4:	065e      	lsls	r6, r3, #25
 80014c6:	bf48      	it	mi
 80014c8:	b2ad      	uxthmi	r5, r5
 80014ca:	e7e6      	b.n	800149a <_printf_i+0x182>
 80014cc:	4616      	mov	r6, r2
 80014ce:	e7bb      	b.n	8001448 <_printf_i+0x130>
 80014d0:	680b      	ldr	r3, [r1, #0]
 80014d2:	6826      	ldr	r6, [r4, #0]
 80014d4:	6960      	ldr	r0, [r4, #20]
 80014d6:	1d1d      	adds	r5, r3, #4
 80014d8:	600d      	str	r5, [r1, #0]
 80014da:	0635      	lsls	r5, r6, #24
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	d501      	bpl.n	80014e4 <_printf_i+0x1cc>
 80014e0:	6018      	str	r0, [r3, #0]
 80014e2:	e002      	b.n	80014ea <_printf_i+0x1d2>
 80014e4:	0671      	lsls	r1, r6, #25
 80014e6:	d5fb      	bpl.n	80014e0 <_printf_i+0x1c8>
 80014e8:	8018      	strh	r0, [r3, #0]
 80014ea:	2300      	movs	r3, #0
 80014ec:	6123      	str	r3, [r4, #16]
 80014ee:	4616      	mov	r6, r2
 80014f0:	e7ba      	b.n	8001468 <_printf_i+0x150>
 80014f2:	680b      	ldr	r3, [r1, #0]
 80014f4:	1d1a      	adds	r2, r3, #4
 80014f6:	600a      	str	r2, [r1, #0]
 80014f8:	681e      	ldr	r6, [r3, #0]
 80014fa:	6862      	ldr	r2, [r4, #4]
 80014fc:	2100      	movs	r1, #0
 80014fe:	4630      	mov	r0, r6
 8001500:	f7fe fe6e 	bl	80001e0 <memchr>
 8001504:	b108      	cbz	r0, 800150a <_printf_i+0x1f2>
 8001506:	1b80      	subs	r0, r0, r6
 8001508:	6060      	str	r0, [r4, #4]
 800150a:	6863      	ldr	r3, [r4, #4]
 800150c:	6123      	str	r3, [r4, #16]
 800150e:	2300      	movs	r3, #0
 8001510:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001514:	e7a8      	b.n	8001468 <_printf_i+0x150>
 8001516:	6923      	ldr	r3, [r4, #16]
 8001518:	4632      	mov	r2, r6
 800151a:	4649      	mov	r1, r9
 800151c:	4640      	mov	r0, r8
 800151e:	47d0      	blx	sl
 8001520:	3001      	adds	r0, #1
 8001522:	d0ab      	beq.n	800147c <_printf_i+0x164>
 8001524:	6823      	ldr	r3, [r4, #0]
 8001526:	079b      	lsls	r3, r3, #30
 8001528:	d413      	bmi.n	8001552 <_printf_i+0x23a>
 800152a:	68e0      	ldr	r0, [r4, #12]
 800152c:	9b03      	ldr	r3, [sp, #12]
 800152e:	4298      	cmp	r0, r3
 8001530:	bfb8      	it	lt
 8001532:	4618      	movlt	r0, r3
 8001534:	e7a4      	b.n	8001480 <_printf_i+0x168>
 8001536:	2301      	movs	r3, #1
 8001538:	4632      	mov	r2, r6
 800153a:	4649      	mov	r1, r9
 800153c:	4640      	mov	r0, r8
 800153e:	47d0      	blx	sl
 8001540:	3001      	adds	r0, #1
 8001542:	d09b      	beq.n	800147c <_printf_i+0x164>
 8001544:	3501      	adds	r5, #1
 8001546:	68e3      	ldr	r3, [r4, #12]
 8001548:	9903      	ldr	r1, [sp, #12]
 800154a:	1a5b      	subs	r3, r3, r1
 800154c:	42ab      	cmp	r3, r5
 800154e:	dcf2      	bgt.n	8001536 <_printf_i+0x21e>
 8001550:	e7eb      	b.n	800152a <_printf_i+0x212>
 8001552:	2500      	movs	r5, #0
 8001554:	f104 0619 	add.w	r6, r4, #25
 8001558:	e7f5      	b.n	8001546 <_printf_i+0x22e>
 800155a:	bf00      	nop
 800155c:	08001e71 	.word	0x08001e71
 8001560:	08001e82 	.word	0x08001e82

08001564 <_sbrk_r>:
 8001564:	b538      	push	{r3, r4, r5, lr}
 8001566:	4d06      	ldr	r5, [pc, #24]	; (8001580 <_sbrk_r+0x1c>)
 8001568:	2300      	movs	r3, #0
 800156a:	4604      	mov	r4, r0
 800156c:	4608      	mov	r0, r1
 800156e:	602b      	str	r3, [r5, #0]
 8001570:	f7ff fb06 	bl	8000b80 <_sbrk>
 8001574:	1c43      	adds	r3, r0, #1
 8001576:	d102      	bne.n	800157e <_sbrk_r+0x1a>
 8001578:	682b      	ldr	r3, [r5, #0]
 800157a:	b103      	cbz	r3, 800157e <_sbrk_r+0x1a>
 800157c:	6023      	str	r3, [r4, #0]
 800157e:	bd38      	pop	{r3, r4, r5, pc}
 8001580:	200004d0 	.word	0x200004d0

08001584 <__sread>:
 8001584:	b510      	push	{r4, lr}
 8001586:	460c      	mov	r4, r1
 8001588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800158c:	f000 fab4 	bl	8001af8 <_read_r>
 8001590:	2800      	cmp	r0, #0
 8001592:	bfab      	itete	ge
 8001594:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001596:	89a3      	ldrhlt	r3, [r4, #12]
 8001598:	181b      	addge	r3, r3, r0
 800159a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800159e:	bfac      	ite	ge
 80015a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80015a2:	81a3      	strhlt	r3, [r4, #12]
 80015a4:	bd10      	pop	{r4, pc}

080015a6 <__swrite>:
 80015a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015aa:	461f      	mov	r7, r3
 80015ac:	898b      	ldrh	r3, [r1, #12]
 80015ae:	05db      	lsls	r3, r3, #23
 80015b0:	4605      	mov	r5, r0
 80015b2:	460c      	mov	r4, r1
 80015b4:	4616      	mov	r6, r2
 80015b6:	d505      	bpl.n	80015c4 <__swrite+0x1e>
 80015b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015bc:	2302      	movs	r3, #2
 80015be:	2200      	movs	r2, #0
 80015c0:	f000 f9c8 	bl	8001954 <_lseek_r>
 80015c4:	89a3      	ldrh	r3, [r4, #12]
 80015c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80015ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80015ce:	81a3      	strh	r3, [r4, #12]
 80015d0:	4632      	mov	r2, r6
 80015d2:	463b      	mov	r3, r7
 80015d4:	4628      	mov	r0, r5
 80015d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80015da:	f000 b869 	b.w	80016b0 <_write_r>

080015de <__sseek>:
 80015de:	b510      	push	{r4, lr}
 80015e0:	460c      	mov	r4, r1
 80015e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015e6:	f000 f9b5 	bl	8001954 <_lseek_r>
 80015ea:	1c43      	adds	r3, r0, #1
 80015ec:	89a3      	ldrh	r3, [r4, #12]
 80015ee:	bf15      	itete	ne
 80015f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80015f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80015f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80015fa:	81a3      	strheq	r3, [r4, #12]
 80015fc:	bf18      	it	ne
 80015fe:	81a3      	strhne	r3, [r4, #12]
 8001600:	bd10      	pop	{r4, pc}

08001602 <__sclose>:
 8001602:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001606:	f000 b8d3 	b.w	80017b0 <_close_r>
	...

0800160c <__swbuf_r>:
 800160c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800160e:	460e      	mov	r6, r1
 8001610:	4614      	mov	r4, r2
 8001612:	4605      	mov	r5, r0
 8001614:	b118      	cbz	r0, 800161e <__swbuf_r+0x12>
 8001616:	6983      	ldr	r3, [r0, #24]
 8001618:	b90b      	cbnz	r3, 800161e <__swbuf_r+0x12>
 800161a:	f7ff fbbb 	bl	8000d94 <__sinit>
 800161e:	4b21      	ldr	r3, [pc, #132]	; (80016a4 <__swbuf_r+0x98>)
 8001620:	429c      	cmp	r4, r3
 8001622:	d12b      	bne.n	800167c <__swbuf_r+0x70>
 8001624:	686c      	ldr	r4, [r5, #4]
 8001626:	69a3      	ldr	r3, [r4, #24]
 8001628:	60a3      	str	r3, [r4, #8]
 800162a:	89a3      	ldrh	r3, [r4, #12]
 800162c:	071a      	lsls	r2, r3, #28
 800162e:	d52f      	bpl.n	8001690 <__swbuf_r+0x84>
 8001630:	6923      	ldr	r3, [r4, #16]
 8001632:	b36b      	cbz	r3, 8001690 <__swbuf_r+0x84>
 8001634:	6923      	ldr	r3, [r4, #16]
 8001636:	6820      	ldr	r0, [r4, #0]
 8001638:	1ac0      	subs	r0, r0, r3
 800163a:	6963      	ldr	r3, [r4, #20]
 800163c:	b2f6      	uxtb	r6, r6
 800163e:	4283      	cmp	r3, r0
 8001640:	4637      	mov	r7, r6
 8001642:	dc04      	bgt.n	800164e <__swbuf_r+0x42>
 8001644:	4621      	mov	r1, r4
 8001646:	4628      	mov	r0, r5
 8001648:	f000 f948 	bl	80018dc <_fflush_r>
 800164c:	bb30      	cbnz	r0, 800169c <__swbuf_r+0x90>
 800164e:	68a3      	ldr	r3, [r4, #8]
 8001650:	3b01      	subs	r3, #1
 8001652:	60a3      	str	r3, [r4, #8]
 8001654:	6823      	ldr	r3, [r4, #0]
 8001656:	1c5a      	adds	r2, r3, #1
 8001658:	6022      	str	r2, [r4, #0]
 800165a:	701e      	strb	r6, [r3, #0]
 800165c:	6963      	ldr	r3, [r4, #20]
 800165e:	3001      	adds	r0, #1
 8001660:	4283      	cmp	r3, r0
 8001662:	d004      	beq.n	800166e <__swbuf_r+0x62>
 8001664:	89a3      	ldrh	r3, [r4, #12]
 8001666:	07db      	lsls	r3, r3, #31
 8001668:	d506      	bpl.n	8001678 <__swbuf_r+0x6c>
 800166a:	2e0a      	cmp	r6, #10
 800166c:	d104      	bne.n	8001678 <__swbuf_r+0x6c>
 800166e:	4621      	mov	r1, r4
 8001670:	4628      	mov	r0, r5
 8001672:	f000 f933 	bl	80018dc <_fflush_r>
 8001676:	b988      	cbnz	r0, 800169c <__swbuf_r+0x90>
 8001678:	4638      	mov	r0, r7
 800167a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800167c:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <__swbuf_r+0x9c>)
 800167e:	429c      	cmp	r4, r3
 8001680:	d101      	bne.n	8001686 <__swbuf_r+0x7a>
 8001682:	68ac      	ldr	r4, [r5, #8]
 8001684:	e7cf      	b.n	8001626 <__swbuf_r+0x1a>
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <__swbuf_r+0xa0>)
 8001688:	429c      	cmp	r4, r3
 800168a:	bf08      	it	eq
 800168c:	68ec      	ldreq	r4, [r5, #12]
 800168e:	e7ca      	b.n	8001626 <__swbuf_r+0x1a>
 8001690:	4621      	mov	r1, r4
 8001692:	4628      	mov	r0, r5
 8001694:	f000 f81e 	bl	80016d4 <__swsetup_r>
 8001698:	2800      	cmp	r0, #0
 800169a:	d0cb      	beq.n	8001634 <__swbuf_r+0x28>
 800169c:	f04f 37ff 	mov.w	r7, #4294967295
 80016a0:	e7ea      	b.n	8001678 <__swbuf_r+0x6c>
 80016a2:	bf00      	nop
 80016a4:	08001e20 	.word	0x08001e20
 80016a8:	08001e40 	.word	0x08001e40
 80016ac:	08001e00 	.word	0x08001e00

080016b0 <_write_r>:
 80016b0:	b538      	push	{r3, r4, r5, lr}
 80016b2:	4d07      	ldr	r5, [pc, #28]	; (80016d0 <_write_r+0x20>)
 80016b4:	4604      	mov	r4, r0
 80016b6:	4608      	mov	r0, r1
 80016b8:	4611      	mov	r1, r2
 80016ba:	2200      	movs	r2, #0
 80016bc:	602a      	str	r2, [r5, #0]
 80016be:	461a      	mov	r2, r3
 80016c0:	f7ff fa0e 	bl	8000ae0 <_write>
 80016c4:	1c43      	adds	r3, r0, #1
 80016c6:	d102      	bne.n	80016ce <_write_r+0x1e>
 80016c8:	682b      	ldr	r3, [r5, #0]
 80016ca:	b103      	cbz	r3, 80016ce <_write_r+0x1e>
 80016cc:	6023      	str	r3, [r4, #0]
 80016ce:	bd38      	pop	{r3, r4, r5, pc}
 80016d0:	200004d0 	.word	0x200004d0

080016d4 <__swsetup_r>:
 80016d4:	4b32      	ldr	r3, [pc, #200]	; (80017a0 <__swsetup_r+0xcc>)
 80016d6:	b570      	push	{r4, r5, r6, lr}
 80016d8:	681d      	ldr	r5, [r3, #0]
 80016da:	4606      	mov	r6, r0
 80016dc:	460c      	mov	r4, r1
 80016de:	b125      	cbz	r5, 80016ea <__swsetup_r+0x16>
 80016e0:	69ab      	ldr	r3, [r5, #24]
 80016e2:	b913      	cbnz	r3, 80016ea <__swsetup_r+0x16>
 80016e4:	4628      	mov	r0, r5
 80016e6:	f7ff fb55 	bl	8000d94 <__sinit>
 80016ea:	4b2e      	ldr	r3, [pc, #184]	; (80017a4 <__swsetup_r+0xd0>)
 80016ec:	429c      	cmp	r4, r3
 80016ee:	d10f      	bne.n	8001710 <__swsetup_r+0x3c>
 80016f0:	686c      	ldr	r4, [r5, #4]
 80016f2:	89a3      	ldrh	r3, [r4, #12]
 80016f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80016f8:	0719      	lsls	r1, r3, #28
 80016fa:	d42c      	bmi.n	8001756 <__swsetup_r+0x82>
 80016fc:	06dd      	lsls	r5, r3, #27
 80016fe:	d411      	bmi.n	8001724 <__swsetup_r+0x50>
 8001700:	2309      	movs	r3, #9
 8001702:	6033      	str	r3, [r6, #0]
 8001704:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001708:	81a3      	strh	r3, [r4, #12]
 800170a:	f04f 30ff 	mov.w	r0, #4294967295
 800170e:	e03e      	b.n	800178e <__swsetup_r+0xba>
 8001710:	4b25      	ldr	r3, [pc, #148]	; (80017a8 <__swsetup_r+0xd4>)
 8001712:	429c      	cmp	r4, r3
 8001714:	d101      	bne.n	800171a <__swsetup_r+0x46>
 8001716:	68ac      	ldr	r4, [r5, #8]
 8001718:	e7eb      	b.n	80016f2 <__swsetup_r+0x1e>
 800171a:	4b24      	ldr	r3, [pc, #144]	; (80017ac <__swsetup_r+0xd8>)
 800171c:	429c      	cmp	r4, r3
 800171e:	bf08      	it	eq
 8001720:	68ec      	ldreq	r4, [r5, #12]
 8001722:	e7e6      	b.n	80016f2 <__swsetup_r+0x1e>
 8001724:	0758      	lsls	r0, r3, #29
 8001726:	d512      	bpl.n	800174e <__swsetup_r+0x7a>
 8001728:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800172a:	b141      	cbz	r1, 800173e <__swsetup_r+0x6a>
 800172c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001730:	4299      	cmp	r1, r3
 8001732:	d002      	beq.n	800173a <__swsetup_r+0x66>
 8001734:	4630      	mov	r0, r6
 8001736:	f000 f98f 	bl	8001a58 <_free_r>
 800173a:	2300      	movs	r3, #0
 800173c:	6363      	str	r3, [r4, #52]	; 0x34
 800173e:	89a3      	ldrh	r3, [r4, #12]
 8001740:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001744:	81a3      	strh	r3, [r4, #12]
 8001746:	2300      	movs	r3, #0
 8001748:	6063      	str	r3, [r4, #4]
 800174a:	6923      	ldr	r3, [r4, #16]
 800174c:	6023      	str	r3, [r4, #0]
 800174e:	89a3      	ldrh	r3, [r4, #12]
 8001750:	f043 0308 	orr.w	r3, r3, #8
 8001754:	81a3      	strh	r3, [r4, #12]
 8001756:	6923      	ldr	r3, [r4, #16]
 8001758:	b94b      	cbnz	r3, 800176e <__swsetup_r+0x9a>
 800175a:	89a3      	ldrh	r3, [r4, #12]
 800175c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001764:	d003      	beq.n	800176e <__swsetup_r+0x9a>
 8001766:	4621      	mov	r1, r4
 8001768:	4630      	mov	r0, r6
 800176a:	f000 f929 	bl	80019c0 <__smakebuf_r>
 800176e:	89a0      	ldrh	r0, [r4, #12]
 8001770:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001774:	f010 0301 	ands.w	r3, r0, #1
 8001778:	d00a      	beq.n	8001790 <__swsetup_r+0xbc>
 800177a:	2300      	movs	r3, #0
 800177c:	60a3      	str	r3, [r4, #8]
 800177e:	6963      	ldr	r3, [r4, #20]
 8001780:	425b      	negs	r3, r3
 8001782:	61a3      	str	r3, [r4, #24]
 8001784:	6923      	ldr	r3, [r4, #16]
 8001786:	b943      	cbnz	r3, 800179a <__swsetup_r+0xc6>
 8001788:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800178c:	d1ba      	bne.n	8001704 <__swsetup_r+0x30>
 800178e:	bd70      	pop	{r4, r5, r6, pc}
 8001790:	0781      	lsls	r1, r0, #30
 8001792:	bf58      	it	pl
 8001794:	6963      	ldrpl	r3, [r4, #20]
 8001796:	60a3      	str	r3, [r4, #8]
 8001798:	e7f4      	b.n	8001784 <__swsetup_r+0xb0>
 800179a:	2000      	movs	r0, #0
 800179c:	e7f7      	b.n	800178e <__swsetup_r+0xba>
 800179e:	bf00      	nop
 80017a0:	20000000 	.word	0x20000000
 80017a4:	08001e20 	.word	0x08001e20
 80017a8:	08001e40 	.word	0x08001e40
 80017ac:	08001e00 	.word	0x08001e00

080017b0 <_close_r>:
 80017b0:	b538      	push	{r3, r4, r5, lr}
 80017b2:	4d06      	ldr	r5, [pc, #24]	; (80017cc <_close_r+0x1c>)
 80017b4:	2300      	movs	r3, #0
 80017b6:	4604      	mov	r4, r0
 80017b8:	4608      	mov	r0, r1
 80017ba:	602b      	str	r3, [r5, #0]
 80017bc:	f7ff f9ac 	bl	8000b18 <_close>
 80017c0:	1c43      	adds	r3, r0, #1
 80017c2:	d102      	bne.n	80017ca <_close_r+0x1a>
 80017c4:	682b      	ldr	r3, [r5, #0]
 80017c6:	b103      	cbz	r3, 80017ca <_close_r+0x1a>
 80017c8:	6023      	str	r3, [r4, #0]
 80017ca:	bd38      	pop	{r3, r4, r5, pc}
 80017cc:	200004d0 	.word	0x200004d0

080017d0 <__sflush_r>:
 80017d0:	898a      	ldrh	r2, [r1, #12]
 80017d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017d6:	4605      	mov	r5, r0
 80017d8:	0710      	lsls	r0, r2, #28
 80017da:	460c      	mov	r4, r1
 80017dc:	d458      	bmi.n	8001890 <__sflush_r+0xc0>
 80017de:	684b      	ldr	r3, [r1, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	dc05      	bgt.n	80017f0 <__sflush_r+0x20>
 80017e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	dc02      	bgt.n	80017f0 <__sflush_r+0x20>
 80017ea:	2000      	movs	r0, #0
 80017ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80017f2:	2e00      	cmp	r6, #0
 80017f4:	d0f9      	beq.n	80017ea <__sflush_r+0x1a>
 80017f6:	2300      	movs	r3, #0
 80017f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80017fc:	682f      	ldr	r7, [r5, #0]
 80017fe:	602b      	str	r3, [r5, #0]
 8001800:	d032      	beq.n	8001868 <__sflush_r+0x98>
 8001802:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001804:	89a3      	ldrh	r3, [r4, #12]
 8001806:	075a      	lsls	r2, r3, #29
 8001808:	d505      	bpl.n	8001816 <__sflush_r+0x46>
 800180a:	6863      	ldr	r3, [r4, #4]
 800180c:	1ac0      	subs	r0, r0, r3
 800180e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001810:	b10b      	cbz	r3, 8001816 <__sflush_r+0x46>
 8001812:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001814:	1ac0      	subs	r0, r0, r3
 8001816:	2300      	movs	r3, #0
 8001818:	4602      	mov	r2, r0
 800181a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800181c:	6a21      	ldr	r1, [r4, #32]
 800181e:	4628      	mov	r0, r5
 8001820:	47b0      	blx	r6
 8001822:	1c43      	adds	r3, r0, #1
 8001824:	89a3      	ldrh	r3, [r4, #12]
 8001826:	d106      	bne.n	8001836 <__sflush_r+0x66>
 8001828:	6829      	ldr	r1, [r5, #0]
 800182a:	291d      	cmp	r1, #29
 800182c:	d82c      	bhi.n	8001888 <__sflush_r+0xb8>
 800182e:	4a2a      	ldr	r2, [pc, #168]	; (80018d8 <__sflush_r+0x108>)
 8001830:	40ca      	lsrs	r2, r1
 8001832:	07d6      	lsls	r6, r2, #31
 8001834:	d528      	bpl.n	8001888 <__sflush_r+0xb8>
 8001836:	2200      	movs	r2, #0
 8001838:	6062      	str	r2, [r4, #4]
 800183a:	04d9      	lsls	r1, r3, #19
 800183c:	6922      	ldr	r2, [r4, #16]
 800183e:	6022      	str	r2, [r4, #0]
 8001840:	d504      	bpl.n	800184c <__sflush_r+0x7c>
 8001842:	1c42      	adds	r2, r0, #1
 8001844:	d101      	bne.n	800184a <__sflush_r+0x7a>
 8001846:	682b      	ldr	r3, [r5, #0]
 8001848:	b903      	cbnz	r3, 800184c <__sflush_r+0x7c>
 800184a:	6560      	str	r0, [r4, #84]	; 0x54
 800184c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800184e:	602f      	str	r7, [r5, #0]
 8001850:	2900      	cmp	r1, #0
 8001852:	d0ca      	beq.n	80017ea <__sflush_r+0x1a>
 8001854:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001858:	4299      	cmp	r1, r3
 800185a:	d002      	beq.n	8001862 <__sflush_r+0x92>
 800185c:	4628      	mov	r0, r5
 800185e:	f000 f8fb 	bl	8001a58 <_free_r>
 8001862:	2000      	movs	r0, #0
 8001864:	6360      	str	r0, [r4, #52]	; 0x34
 8001866:	e7c1      	b.n	80017ec <__sflush_r+0x1c>
 8001868:	6a21      	ldr	r1, [r4, #32]
 800186a:	2301      	movs	r3, #1
 800186c:	4628      	mov	r0, r5
 800186e:	47b0      	blx	r6
 8001870:	1c41      	adds	r1, r0, #1
 8001872:	d1c7      	bne.n	8001804 <__sflush_r+0x34>
 8001874:	682b      	ldr	r3, [r5, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d0c4      	beq.n	8001804 <__sflush_r+0x34>
 800187a:	2b1d      	cmp	r3, #29
 800187c:	d001      	beq.n	8001882 <__sflush_r+0xb2>
 800187e:	2b16      	cmp	r3, #22
 8001880:	d101      	bne.n	8001886 <__sflush_r+0xb6>
 8001882:	602f      	str	r7, [r5, #0]
 8001884:	e7b1      	b.n	80017ea <__sflush_r+0x1a>
 8001886:	89a3      	ldrh	r3, [r4, #12]
 8001888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800188c:	81a3      	strh	r3, [r4, #12]
 800188e:	e7ad      	b.n	80017ec <__sflush_r+0x1c>
 8001890:	690f      	ldr	r7, [r1, #16]
 8001892:	2f00      	cmp	r7, #0
 8001894:	d0a9      	beq.n	80017ea <__sflush_r+0x1a>
 8001896:	0793      	lsls	r3, r2, #30
 8001898:	680e      	ldr	r6, [r1, #0]
 800189a:	bf08      	it	eq
 800189c:	694b      	ldreq	r3, [r1, #20]
 800189e:	600f      	str	r7, [r1, #0]
 80018a0:	bf18      	it	ne
 80018a2:	2300      	movne	r3, #0
 80018a4:	eba6 0807 	sub.w	r8, r6, r7
 80018a8:	608b      	str	r3, [r1, #8]
 80018aa:	f1b8 0f00 	cmp.w	r8, #0
 80018ae:	dd9c      	ble.n	80017ea <__sflush_r+0x1a>
 80018b0:	6a21      	ldr	r1, [r4, #32]
 80018b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80018b4:	4643      	mov	r3, r8
 80018b6:	463a      	mov	r2, r7
 80018b8:	4628      	mov	r0, r5
 80018ba:	47b0      	blx	r6
 80018bc:	2800      	cmp	r0, #0
 80018be:	dc06      	bgt.n	80018ce <__sflush_r+0xfe>
 80018c0:	89a3      	ldrh	r3, [r4, #12]
 80018c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018c6:	81a3      	strh	r3, [r4, #12]
 80018c8:	f04f 30ff 	mov.w	r0, #4294967295
 80018cc:	e78e      	b.n	80017ec <__sflush_r+0x1c>
 80018ce:	4407      	add	r7, r0
 80018d0:	eba8 0800 	sub.w	r8, r8, r0
 80018d4:	e7e9      	b.n	80018aa <__sflush_r+0xda>
 80018d6:	bf00      	nop
 80018d8:	20400001 	.word	0x20400001

080018dc <_fflush_r>:
 80018dc:	b538      	push	{r3, r4, r5, lr}
 80018de:	690b      	ldr	r3, [r1, #16]
 80018e0:	4605      	mov	r5, r0
 80018e2:	460c      	mov	r4, r1
 80018e4:	b913      	cbnz	r3, 80018ec <_fflush_r+0x10>
 80018e6:	2500      	movs	r5, #0
 80018e8:	4628      	mov	r0, r5
 80018ea:	bd38      	pop	{r3, r4, r5, pc}
 80018ec:	b118      	cbz	r0, 80018f6 <_fflush_r+0x1a>
 80018ee:	6983      	ldr	r3, [r0, #24]
 80018f0:	b90b      	cbnz	r3, 80018f6 <_fflush_r+0x1a>
 80018f2:	f7ff fa4f 	bl	8000d94 <__sinit>
 80018f6:	4b14      	ldr	r3, [pc, #80]	; (8001948 <_fflush_r+0x6c>)
 80018f8:	429c      	cmp	r4, r3
 80018fa:	d11b      	bne.n	8001934 <_fflush_r+0x58>
 80018fc:	686c      	ldr	r4, [r5, #4]
 80018fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0ef      	beq.n	80018e6 <_fflush_r+0xa>
 8001906:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001908:	07d0      	lsls	r0, r2, #31
 800190a:	d404      	bmi.n	8001916 <_fflush_r+0x3a>
 800190c:	0599      	lsls	r1, r3, #22
 800190e:	d402      	bmi.n	8001916 <_fflush_r+0x3a>
 8001910:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001912:	f7ff fadd 	bl	8000ed0 <__retarget_lock_acquire_recursive>
 8001916:	4628      	mov	r0, r5
 8001918:	4621      	mov	r1, r4
 800191a:	f7ff ff59 	bl	80017d0 <__sflush_r>
 800191e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001920:	07da      	lsls	r2, r3, #31
 8001922:	4605      	mov	r5, r0
 8001924:	d4e0      	bmi.n	80018e8 <_fflush_r+0xc>
 8001926:	89a3      	ldrh	r3, [r4, #12]
 8001928:	059b      	lsls	r3, r3, #22
 800192a:	d4dd      	bmi.n	80018e8 <_fflush_r+0xc>
 800192c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800192e:	f7ff fad0 	bl	8000ed2 <__retarget_lock_release_recursive>
 8001932:	e7d9      	b.n	80018e8 <_fflush_r+0xc>
 8001934:	4b05      	ldr	r3, [pc, #20]	; (800194c <_fflush_r+0x70>)
 8001936:	429c      	cmp	r4, r3
 8001938:	d101      	bne.n	800193e <_fflush_r+0x62>
 800193a:	68ac      	ldr	r4, [r5, #8]
 800193c:	e7df      	b.n	80018fe <_fflush_r+0x22>
 800193e:	4b04      	ldr	r3, [pc, #16]	; (8001950 <_fflush_r+0x74>)
 8001940:	429c      	cmp	r4, r3
 8001942:	bf08      	it	eq
 8001944:	68ec      	ldreq	r4, [r5, #12]
 8001946:	e7da      	b.n	80018fe <_fflush_r+0x22>
 8001948:	08001e20 	.word	0x08001e20
 800194c:	08001e40 	.word	0x08001e40
 8001950:	08001e00 	.word	0x08001e00

08001954 <_lseek_r>:
 8001954:	b538      	push	{r3, r4, r5, lr}
 8001956:	4d07      	ldr	r5, [pc, #28]	; (8001974 <_lseek_r+0x20>)
 8001958:	4604      	mov	r4, r0
 800195a:	4608      	mov	r0, r1
 800195c:	4611      	mov	r1, r2
 800195e:	2200      	movs	r2, #0
 8001960:	602a      	str	r2, [r5, #0]
 8001962:	461a      	mov	r2, r3
 8001964:	f7ff f8ff 	bl	8000b66 <_lseek>
 8001968:	1c43      	adds	r3, r0, #1
 800196a:	d102      	bne.n	8001972 <_lseek_r+0x1e>
 800196c:	682b      	ldr	r3, [r5, #0]
 800196e:	b103      	cbz	r3, 8001972 <_lseek_r+0x1e>
 8001970:	6023      	str	r3, [r4, #0]
 8001972:	bd38      	pop	{r3, r4, r5, pc}
 8001974:	200004d0 	.word	0x200004d0

08001978 <__swhatbuf_r>:
 8001978:	b570      	push	{r4, r5, r6, lr}
 800197a:	460e      	mov	r6, r1
 800197c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001980:	2900      	cmp	r1, #0
 8001982:	b096      	sub	sp, #88	; 0x58
 8001984:	4614      	mov	r4, r2
 8001986:	461d      	mov	r5, r3
 8001988:	da07      	bge.n	800199a <__swhatbuf_r+0x22>
 800198a:	2300      	movs	r3, #0
 800198c:	602b      	str	r3, [r5, #0]
 800198e:	89b3      	ldrh	r3, [r6, #12]
 8001990:	061a      	lsls	r2, r3, #24
 8001992:	d410      	bmi.n	80019b6 <__swhatbuf_r+0x3e>
 8001994:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001998:	e00e      	b.n	80019b8 <__swhatbuf_r+0x40>
 800199a:	466a      	mov	r2, sp
 800199c:	f000 f8be 	bl	8001b1c <_fstat_r>
 80019a0:	2800      	cmp	r0, #0
 80019a2:	dbf2      	blt.n	800198a <__swhatbuf_r+0x12>
 80019a4:	9a01      	ldr	r2, [sp, #4]
 80019a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80019aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80019ae:	425a      	negs	r2, r3
 80019b0:	415a      	adcs	r2, r3
 80019b2:	602a      	str	r2, [r5, #0]
 80019b4:	e7ee      	b.n	8001994 <__swhatbuf_r+0x1c>
 80019b6:	2340      	movs	r3, #64	; 0x40
 80019b8:	2000      	movs	r0, #0
 80019ba:	6023      	str	r3, [r4, #0]
 80019bc:	b016      	add	sp, #88	; 0x58
 80019be:	bd70      	pop	{r4, r5, r6, pc}

080019c0 <__smakebuf_r>:
 80019c0:	898b      	ldrh	r3, [r1, #12]
 80019c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80019c4:	079d      	lsls	r5, r3, #30
 80019c6:	4606      	mov	r6, r0
 80019c8:	460c      	mov	r4, r1
 80019ca:	d507      	bpl.n	80019dc <__smakebuf_r+0x1c>
 80019cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80019d0:	6023      	str	r3, [r4, #0]
 80019d2:	6123      	str	r3, [r4, #16]
 80019d4:	2301      	movs	r3, #1
 80019d6:	6163      	str	r3, [r4, #20]
 80019d8:	b002      	add	sp, #8
 80019da:	bd70      	pop	{r4, r5, r6, pc}
 80019dc:	ab01      	add	r3, sp, #4
 80019de:	466a      	mov	r2, sp
 80019e0:	f7ff ffca 	bl	8001978 <__swhatbuf_r>
 80019e4:	9900      	ldr	r1, [sp, #0]
 80019e6:	4605      	mov	r5, r0
 80019e8:	4630      	mov	r0, r6
 80019ea:	f7ff fa73 	bl	8000ed4 <_malloc_r>
 80019ee:	b948      	cbnz	r0, 8001a04 <__smakebuf_r+0x44>
 80019f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019f4:	059a      	lsls	r2, r3, #22
 80019f6:	d4ef      	bmi.n	80019d8 <__smakebuf_r+0x18>
 80019f8:	f023 0303 	bic.w	r3, r3, #3
 80019fc:	f043 0302 	orr.w	r3, r3, #2
 8001a00:	81a3      	strh	r3, [r4, #12]
 8001a02:	e7e3      	b.n	80019cc <__smakebuf_r+0xc>
 8001a04:	4b0d      	ldr	r3, [pc, #52]	; (8001a3c <__smakebuf_r+0x7c>)
 8001a06:	62b3      	str	r3, [r6, #40]	; 0x28
 8001a08:	89a3      	ldrh	r3, [r4, #12]
 8001a0a:	6020      	str	r0, [r4, #0]
 8001a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a10:	81a3      	strh	r3, [r4, #12]
 8001a12:	9b00      	ldr	r3, [sp, #0]
 8001a14:	6163      	str	r3, [r4, #20]
 8001a16:	9b01      	ldr	r3, [sp, #4]
 8001a18:	6120      	str	r0, [r4, #16]
 8001a1a:	b15b      	cbz	r3, 8001a34 <__smakebuf_r+0x74>
 8001a1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001a20:	4630      	mov	r0, r6
 8001a22:	f000 f88d 	bl	8001b40 <_isatty_r>
 8001a26:	b128      	cbz	r0, 8001a34 <__smakebuf_r+0x74>
 8001a28:	89a3      	ldrh	r3, [r4, #12]
 8001a2a:	f023 0303 	bic.w	r3, r3, #3
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	81a3      	strh	r3, [r4, #12]
 8001a34:	89a0      	ldrh	r0, [r4, #12]
 8001a36:	4305      	orrs	r5, r0
 8001a38:	81a5      	strh	r5, [r4, #12]
 8001a3a:	e7cd      	b.n	80019d8 <__smakebuf_r+0x18>
 8001a3c:	08000d2d 	.word	0x08000d2d

08001a40 <__malloc_lock>:
 8001a40:	4801      	ldr	r0, [pc, #4]	; (8001a48 <__malloc_lock+0x8>)
 8001a42:	f7ff ba45 	b.w	8000ed0 <__retarget_lock_acquire_recursive>
 8001a46:	bf00      	nop
 8001a48:	200004c8 	.word	0x200004c8

08001a4c <__malloc_unlock>:
 8001a4c:	4801      	ldr	r0, [pc, #4]	; (8001a54 <__malloc_unlock+0x8>)
 8001a4e:	f7ff ba40 	b.w	8000ed2 <__retarget_lock_release_recursive>
 8001a52:	bf00      	nop
 8001a54:	200004c8 	.word	0x200004c8

08001a58 <_free_r>:
 8001a58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001a5a:	2900      	cmp	r1, #0
 8001a5c:	d048      	beq.n	8001af0 <_free_r+0x98>
 8001a5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a62:	9001      	str	r0, [sp, #4]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f1a1 0404 	sub.w	r4, r1, #4
 8001a6a:	bfb8      	it	lt
 8001a6c:	18e4      	addlt	r4, r4, r3
 8001a6e:	f7ff ffe7 	bl	8001a40 <__malloc_lock>
 8001a72:	4a20      	ldr	r2, [pc, #128]	; (8001af4 <_free_r+0x9c>)
 8001a74:	9801      	ldr	r0, [sp, #4]
 8001a76:	6813      	ldr	r3, [r2, #0]
 8001a78:	4615      	mov	r5, r2
 8001a7a:	b933      	cbnz	r3, 8001a8a <_free_r+0x32>
 8001a7c:	6063      	str	r3, [r4, #4]
 8001a7e:	6014      	str	r4, [r2, #0]
 8001a80:	b003      	add	sp, #12
 8001a82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001a86:	f7ff bfe1 	b.w	8001a4c <__malloc_unlock>
 8001a8a:	42a3      	cmp	r3, r4
 8001a8c:	d90b      	bls.n	8001aa6 <_free_r+0x4e>
 8001a8e:	6821      	ldr	r1, [r4, #0]
 8001a90:	1862      	adds	r2, r4, r1
 8001a92:	4293      	cmp	r3, r2
 8001a94:	bf04      	itt	eq
 8001a96:	681a      	ldreq	r2, [r3, #0]
 8001a98:	685b      	ldreq	r3, [r3, #4]
 8001a9a:	6063      	str	r3, [r4, #4]
 8001a9c:	bf04      	itt	eq
 8001a9e:	1852      	addeq	r2, r2, r1
 8001aa0:	6022      	streq	r2, [r4, #0]
 8001aa2:	602c      	str	r4, [r5, #0]
 8001aa4:	e7ec      	b.n	8001a80 <_free_r+0x28>
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	b10b      	cbz	r3, 8001ab0 <_free_r+0x58>
 8001aac:	42a3      	cmp	r3, r4
 8001aae:	d9fa      	bls.n	8001aa6 <_free_r+0x4e>
 8001ab0:	6811      	ldr	r1, [r2, #0]
 8001ab2:	1855      	adds	r5, r2, r1
 8001ab4:	42a5      	cmp	r5, r4
 8001ab6:	d10b      	bne.n	8001ad0 <_free_r+0x78>
 8001ab8:	6824      	ldr	r4, [r4, #0]
 8001aba:	4421      	add	r1, r4
 8001abc:	1854      	adds	r4, r2, r1
 8001abe:	42a3      	cmp	r3, r4
 8001ac0:	6011      	str	r1, [r2, #0]
 8001ac2:	d1dd      	bne.n	8001a80 <_free_r+0x28>
 8001ac4:	681c      	ldr	r4, [r3, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	6053      	str	r3, [r2, #4]
 8001aca:	4421      	add	r1, r4
 8001acc:	6011      	str	r1, [r2, #0]
 8001ace:	e7d7      	b.n	8001a80 <_free_r+0x28>
 8001ad0:	d902      	bls.n	8001ad8 <_free_r+0x80>
 8001ad2:	230c      	movs	r3, #12
 8001ad4:	6003      	str	r3, [r0, #0]
 8001ad6:	e7d3      	b.n	8001a80 <_free_r+0x28>
 8001ad8:	6825      	ldr	r5, [r4, #0]
 8001ada:	1961      	adds	r1, r4, r5
 8001adc:	428b      	cmp	r3, r1
 8001ade:	bf04      	itt	eq
 8001ae0:	6819      	ldreq	r1, [r3, #0]
 8001ae2:	685b      	ldreq	r3, [r3, #4]
 8001ae4:	6063      	str	r3, [r4, #4]
 8001ae6:	bf04      	itt	eq
 8001ae8:	1949      	addeq	r1, r1, r5
 8001aea:	6021      	streq	r1, [r4, #0]
 8001aec:	6054      	str	r4, [r2, #4]
 8001aee:	e7c7      	b.n	8001a80 <_free_r+0x28>
 8001af0:	b003      	add	sp, #12
 8001af2:	bd30      	pop	{r4, r5, pc}
 8001af4:	2000048c 	.word	0x2000048c

08001af8 <_read_r>:
 8001af8:	b538      	push	{r3, r4, r5, lr}
 8001afa:	4d07      	ldr	r5, [pc, #28]	; (8001b18 <_read_r+0x20>)
 8001afc:	4604      	mov	r4, r0
 8001afe:	4608      	mov	r0, r1
 8001b00:	4611      	mov	r1, r2
 8001b02:	2200      	movs	r2, #0
 8001b04:	602a      	str	r2, [r5, #0]
 8001b06:	461a      	mov	r2, r3
 8001b08:	f7fe ffcd 	bl	8000aa6 <_read>
 8001b0c:	1c43      	adds	r3, r0, #1
 8001b0e:	d102      	bne.n	8001b16 <_read_r+0x1e>
 8001b10:	682b      	ldr	r3, [r5, #0]
 8001b12:	b103      	cbz	r3, 8001b16 <_read_r+0x1e>
 8001b14:	6023      	str	r3, [r4, #0]
 8001b16:	bd38      	pop	{r3, r4, r5, pc}
 8001b18:	200004d0 	.word	0x200004d0

08001b1c <_fstat_r>:
 8001b1c:	b538      	push	{r3, r4, r5, lr}
 8001b1e:	4d07      	ldr	r5, [pc, #28]	; (8001b3c <_fstat_r+0x20>)
 8001b20:	2300      	movs	r3, #0
 8001b22:	4604      	mov	r4, r0
 8001b24:	4608      	mov	r0, r1
 8001b26:	4611      	mov	r1, r2
 8001b28:	602b      	str	r3, [r5, #0]
 8001b2a:	f7ff f801 	bl	8000b30 <_fstat>
 8001b2e:	1c43      	adds	r3, r0, #1
 8001b30:	d102      	bne.n	8001b38 <_fstat_r+0x1c>
 8001b32:	682b      	ldr	r3, [r5, #0]
 8001b34:	b103      	cbz	r3, 8001b38 <_fstat_r+0x1c>
 8001b36:	6023      	str	r3, [r4, #0]
 8001b38:	bd38      	pop	{r3, r4, r5, pc}
 8001b3a:	bf00      	nop
 8001b3c:	200004d0 	.word	0x200004d0

08001b40 <_isatty_r>:
 8001b40:	b538      	push	{r3, r4, r5, lr}
 8001b42:	4d06      	ldr	r5, [pc, #24]	; (8001b5c <_isatty_r+0x1c>)
 8001b44:	2300      	movs	r3, #0
 8001b46:	4604      	mov	r4, r0
 8001b48:	4608      	mov	r0, r1
 8001b4a:	602b      	str	r3, [r5, #0]
 8001b4c:	f7ff f800 	bl	8000b50 <_isatty>
 8001b50:	1c43      	adds	r3, r0, #1
 8001b52:	d102      	bne.n	8001b5a <_isatty_r+0x1a>
 8001b54:	682b      	ldr	r3, [r5, #0]
 8001b56:	b103      	cbz	r3, 8001b5a <_isatty_r+0x1a>
 8001b58:	6023      	str	r3, [r4, #0]
 8001b5a:	bd38      	pop	{r3, r4, r5, pc}
 8001b5c:	200004d0 	.word	0x200004d0

08001b60 <_init>:
 8001b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b62:	bf00      	nop
 8001b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b66:	bc08      	pop	{r3}
 8001b68:	469e      	mov	lr, r3
 8001b6a:	4770      	bx	lr

08001b6c <_fini>:
 8001b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b6e:	bf00      	nop
 8001b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b72:	bc08      	pop	{r3}
 8001b74:	469e      	mov	lr, r3
 8001b76:	4770      	bx	lr
