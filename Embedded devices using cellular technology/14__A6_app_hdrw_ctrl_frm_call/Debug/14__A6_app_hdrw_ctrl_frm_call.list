
14__A6_app_hdrw_ctrl_frm_call.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000231c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  080024bc  080024bc  000124bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028a0  080028a0  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  080028a0  080028a0  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028a0  080028a0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028a0  080028a0  000128a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028a4  080028a4  000128a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080028a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c0  20000090  08002938  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000750  08002938  00020750  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005db1  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001150  00000000  00000000  00025e71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003f8  00000000  00000000  00026fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000370  00000000  00000000  000273c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001035e  00000000  00000000  00027730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003f07  00000000  00000000  00037a8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000562fa  00000000  00000000  0003b995  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00091c8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001680  00000000  00000000  00091ce4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080024a4 	.word	0x080024a4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	080024a4 	.word	0x080024a4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__io_putchar>:

static uint16_t compute_uart_bd(uint32_t periph_clk,uint32_t baudrate);
static void debug_uart_write(int ch);

int __io_putchar(int ch)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	debug_uart_write(ch);
 8000288:	6878      	ldr	r0, [r7, #4]
 800028a:	f000 f913 	bl	80004b4 <debug_uart_write>
	return ch;
 800028e:	687b      	ldr	r3, [r7, #4]
}
 8000290:	4618      	mov	r0, r3
 8000292:	3708      	adds	r7, #8
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}

08000298 <debug_uart_init>:

void debug_uart_init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	/*1. Enable clock access to UART pins' GPIO port (GPIOA)*/
	RCC->AHB1ENR |= GPIOAEN;
 800029c:	4b36      	ldr	r3, [pc, #216]	; (8000378 <debug_uart_init+0xe0>)
 800029e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a0:	4a35      	ldr	r2, [pc, #212]	; (8000378 <debug_uart_init+0xe0>)
 80002a2:	f043 0301 	orr.w	r3, r3, #1
 80002a6:	6313      	str	r3, [r2, #48]	; 0x30

	/*2. Set PA2 mode to alternate function*/
	GPIOA->MODER &= ~(1U<<4);
 80002a8:	4b34      	ldr	r3, [pc, #208]	; (800037c <debug_uart_init+0xe4>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a33      	ldr	r2, [pc, #204]	; (800037c <debug_uart_init+0xe4>)
 80002ae:	f023 0310 	bic.w	r3, r3, #16
 80002b2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 80002b4:	4b31      	ldr	r3, [pc, #196]	; (800037c <debug_uart_init+0xe4>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a30      	ldr	r2, [pc, #192]	; (800037c <debug_uart_init+0xe4>)
 80002ba:	f043 0320 	orr.w	r3, r3, #32
 80002be:	6013      	str	r3, [r2, #0]

	/*3. Set PA3 mode to alternate function*/
	GPIOA->MODER &= ~(1U<<6);
 80002c0:	4b2e      	ldr	r3, [pc, #184]	; (800037c <debug_uart_init+0xe4>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a2d      	ldr	r2, [pc, #180]	; (800037c <debug_uart_init+0xe4>)
 80002c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80002ca:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 80002cc:	4b2b      	ldr	r3, [pc, #172]	; (800037c <debug_uart_init+0xe4>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a2a      	ldr	r2, [pc, #168]	; (800037c <debug_uart_init+0xe4>)
 80002d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002d6:	6013      	str	r3, [r2, #0]

	/*4.Set PA2 alternate function type to UART2_TX (AF07)*/
	GPIOA->AFR[0] |=(1U<<8);
 80002d8:	4b28      	ldr	r3, [pc, #160]	; (800037c <debug_uart_init+0xe4>)
 80002da:	6a1b      	ldr	r3, [r3, #32]
 80002dc:	4a27      	ldr	r2, [pc, #156]	; (800037c <debug_uart_init+0xe4>)
 80002de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002e2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 80002e4:	4b25      	ldr	r3, [pc, #148]	; (800037c <debug_uart_init+0xe4>)
 80002e6:	6a1b      	ldr	r3, [r3, #32]
 80002e8:	4a24      	ldr	r2, [pc, #144]	; (800037c <debug_uart_init+0xe4>)
 80002ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002ee:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 80002f0:	4b22      	ldr	r3, [pc, #136]	; (800037c <debug_uart_init+0xe4>)
 80002f2:	6a1b      	ldr	r3, [r3, #32]
 80002f4:	4a21      	ldr	r2, [pc, #132]	; (800037c <debug_uart_init+0xe4>)
 80002f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002fa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 80002fc:	4b1f      	ldr	r3, [pc, #124]	; (800037c <debug_uart_init+0xe4>)
 80002fe:	6a1b      	ldr	r3, [r3, #32]
 8000300:	4a1e      	ldr	r2, [pc, #120]	; (800037c <debug_uart_init+0xe4>)
 8000302:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000306:	6213      	str	r3, [r2, #32]

	/*4.Set PA3 alternate function type to UART2_RX (AF07)*/
	GPIOA->AFR[0] |=(1U<<12);
 8000308:	4b1c      	ldr	r3, [pc, #112]	; (800037c <debug_uart_init+0xe4>)
 800030a:	6a1b      	ldr	r3, [r3, #32]
 800030c:	4a1b      	ldr	r2, [pc, #108]	; (800037c <debug_uart_init+0xe4>)
 800030e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000312:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<13);
 8000314:	4b19      	ldr	r3, [pc, #100]	; (800037c <debug_uart_init+0xe4>)
 8000316:	6a1b      	ldr	r3, [r3, #32]
 8000318:	4a18      	ldr	r2, [pc, #96]	; (800037c <debug_uart_init+0xe4>)
 800031a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800031e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<14);
 8000320:	4b16      	ldr	r3, [pc, #88]	; (800037c <debug_uart_init+0xe4>)
 8000322:	6a1b      	ldr	r3, [r3, #32]
 8000324:	4a15      	ldr	r2, [pc, #84]	; (800037c <debug_uart_init+0xe4>)
 8000326:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800032a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<15);
 800032c:	4b13      	ldr	r3, [pc, #76]	; (800037c <debug_uart_init+0xe4>)
 800032e:	6a1b      	ldr	r3, [r3, #32]
 8000330:	4a12      	ldr	r2, [pc, #72]	; (800037c <debug_uart_init+0xe4>)
 8000332:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000336:	6213      	str	r3, [r2, #32]

	/*Configure UART module*/

	/*5. Enable clock access to the UART module*/
	RCC->APB1ENR |= UART2EN;
 8000338:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <debug_uart_init+0xe0>)
 800033a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800033c:	4a0e      	ldr	r2, [pc, #56]	; (8000378 <debug_uart_init+0xe0>)
 800033e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000342:	6413      	str	r3, [r2, #64]	; 0x40

	/*6. Disable UART module*/
	USART2->CR1 &=~CR1_UE;
 8000344:	4b0e      	ldr	r3, [pc, #56]	; (8000380 <debug_uart_init+0xe8>)
 8000346:	68db      	ldr	r3, [r3, #12]
 8000348:	4a0d      	ldr	r2, [pc, #52]	; (8000380 <debug_uart_init+0xe8>)
 800034a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800034e:	60d3      	str	r3, [r2, #12]

	/*7. Set UART baudrate*/
	USART2->BRR =  compute_uart_bd(SYS_FREQ,UART_BAUDRATE);
 8000350:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000354:	480b      	ldr	r0, [pc, #44]	; (8000384 <debug_uart_init+0xec>)
 8000356:	f000 f8c5 	bl	80004e4 <compute_uart_bd>
 800035a:	4603      	mov	r3, r0
 800035c:	461a      	mov	r2, r3
 800035e:	4b08      	ldr	r3, [pc, #32]	; (8000380 <debug_uart_init+0xe8>)
 8000360:	609a      	str	r2, [r3, #8]

    /*8. Set trnasfer direction*/
	USART2->CR1 = (CR1_TE | CR1_RE);
 8000362:	4b07      	ldr	r3, [pc, #28]	; (8000380 <debug_uart_init+0xe8>)
 8000364:	220c      	movs	r2, #12
 8000366:	60da      	str	r2, [r3, #12]

	/*9. Enable UART module*/
	USART2->CR1 |= CR1_UE;
 8000368:	4b05      	ldr	r3, [pc, #20]	; (8000380 <debug_uart_init+0xe8>)
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	4a04      	ldr	r2, [pc, #16]	; (8000380 <debug_uart_init+0xe8>)
 800036e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000372:	60d3      	str	r3, [r2, #12]


}
 8000374:	bf00      	nop
 8000376:	bd80      	pop	{r7, pc}
 8000378:	40023800 	.word	0x40023800
 800037c:	40020000 	.word	0x40020000
 8000380:	40004400 	.word	0x40004400
 8000384:	00f42400 	.word	0x00f42400

08000388 <a6_uart_init>:
 * A6 TX Pin   ==> PA10(RX)
 * A6 RX Pin   ==> PA9(TX)
 * */

void a6_uart_init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
	/*1. Enable clock access to UART pins' GPIO port (GPIOA)*/
	RCC->AHB1ENR |= GPIOAEN;
 800038c:	4b39      	ldr	r3, [pc, #228]	; (8000474 <a6_uart_init+0xec>)
 800038e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000390:	4a38      	ldr	r2, [pc, #224]	; (8000474 <a6_uart_init+0xec>)
 8000392:	f043 0301 	orr.w	r3, r3, #1
 8000396:	6313      	str	r3, [r2, #48]	; 0x30

	/*2. Set PA9 mode to alternate function*/
	GPIOA->MODER &= ~(1U<<18);
 8000398:	4b37      	ldr	r3, [pc, #220]	; (8000478 <a6_uart_init+0xf0>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a36      	ldr	r2, [pc, #216]	; (8000478 <a6_uart_init+0xf0>)
 800039e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80003a2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<19);
 80003a4:	4b34      	ldr	r3, [pc, #208]	; (8000478 <a6_uart_init+0xf0>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a33      	ldr	r2, [pc, #204]	; (8000478 <a6_uart_init+0xf0>)
 80003aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003ae:	6013      	str	r3, [r2, #0]

	/*3. Set PA10 mode to alternate function*/
	GPIOA->MODER &= ~(1U<<20);
 80003b0:	4b31      	ldr	r3, [pc, #196]	; (8000478 <a6_uart_init+0xf0>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a30      	ldr	r2, [pc, #192]	; (8000478 <a6_uart_init+0xf0>)
 80003b6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80003ba:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<21);
 80003bc:	4b2e      	ldr	r3, [pc, #184]	; (8000478 <a6_uart_init+0xf0>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a2d      	ldr	r2, [pc, #180]	; (8000478 <a6_uart_init+0xf0>)
 80003c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003c6:	6013      	str	r3, [r2, #0]

	/*4.Set PA9 alternate function type to UART1_TX (AF07)*/
	GPIOA->AFR[1] |=(1U<<4);
 80003c8:	4b2b      	ldr	r3, [pc, #172]	; (8000478 <a6_uart_init+0xf0>)
 80003ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003cc:	4a2a      	ldr	r2, [pc, #168]	; (8000478 <a6_uart_init+0xf0>)
 80003ce:	f043 0310 	orr.w	r3, r3, #16
 80003d2:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |=(1U<<5);
 80003d4:	4b28      	ldr	r3, [pc, #160]	; (8000478 <a6_uart_init+0xf0>)
 80003d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003d8:	4a27      	ldr	r2, [pc, #156]	; (8000478 <a6_uart_init+0xf0>)
 80003da:	f043 0320 	orr.w	r3, r3, #32
 80003de:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |=(1U<<6);
 80003e0:	4b25      	ldr	r3, [pc, #148]	; (8000478 <a6_uart_init+0xf0>)
 80003e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003e4:	4a24      	ldr	r2, [pc, #144]	; (8000478 <a6_uart_init+0xf0>)
 80003e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003ea:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] &= ~(1U<<7);
 80003ec:	4b22      	ldr	r3, [pc, #136]	; (8000478 <a6_uart_init+0xf0>)
 80003ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003f0:	4a21      	ldr	r2, [pc, #132]	; (8000478 <a6_uart_init+0xf0>)
 80003f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80003f6:	6253      	str	r3, [r2, #36]	; 0x24

	/*4.Set PA10 alternate function type to UART1_RX (AF07)*/
	GPIOA->AFR[1] |=(1U<<8);
 80003f8:	4b1f      	ldr	r3, [pc, #124]	; (8000478 <a6_uart_init+0xf0>)
 80003fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003fc:	4a1e      	ldr	r2, [pc, #120]	; (8000478 <a6_uart_init+0xf0>)
 80003fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000402:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |=(1U<<9);
 8000404:	4b1c      	ldr	r3, [pc, #112]	; (8000478 <a6_uart_init+0xf0>)
 8000406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000408:	4a1b      	ldr	r2, [pc, #108]	; (8000478 <a6_uart_init+0xf0>)
 800040a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800040e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |=(1U<<10);
 8000410:	4b19      	ldr	r3, [pc, #100]	; (8000478 <a6_uart_init+0xf0>)
 8000412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000414:	4a18      	ldr	r2, [pc, #96]	; (8000478 <a6_uart_init+0xf0>)
 8000416:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800041a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] &= ~(1U<<11);
 800041c:	4b16      	ldr	r3, [pc, #88]	; (8000478 <a6_uart_init+0xf0>)
 800041e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000420:	4a15      	ldr	r2, [pc, #84]	; (8000478 <a6_uart_init+0xf0>)
 8000422:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000426:	6253      	str	r3, [r2, #36]	; 0x24

	/*Configure UART module*/

    /*5. Enable clock access to the UART module*/
     RCC->APB2ENR |= UART1EN;
 8000428:	4b12      	ldr	r3, [pc, #72]	; (8000474 <a6_uart_init+0xec>)
 800042a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800042c:	4a11      	ldr	r2, [pc, #68]	; (8000474 <a6_uart_init+0xec>)
 800042e:	f043 0310 	orr.w	r3, r3, #16
 8000432:	6453      	str	r3, [r2, #68]	; 0x44

 	/*6. Disable UART module*/
 	 USART1->CR1 &=~CR1_UE;
 8000434:	4b11      	ldr	r3, [pc, #68]	; (800047c <a6_uart_init+0xf4>)
 8000436:	68db      	ldr	r3, [r3, #12]
 8000438:	4a10      	ldr	r2, [pc, #64]	; (800047c <a6_uart_init+0xf4>)
 800043a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800043e:	60d3      	str	r3, [r2, #12]

 	/*7. Set UART baudrate*/
 	USART1->BRR =  compute_uart_bd(SYS_FREQ,UART_BAUDRATE);
 8000440:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000444:	480e      	ldr	r0, [pc, #56]	; (8000480 <a6_uart_init+0xf8>)
 8000446:	f000 f84d 	bl	80004e4 <compute_uart_bd>
 800044a:	4603      	mov	r3, r0
 800044c:	461a      	mov	r2, r3
 800044e:	4b0b      	ldr	r3, [pc, #44]	; (800047c <a6_uart_init+0xf4>)
 8000450:	609a      	str	r2, [r3, #8]

    /*8. Set trnasfer direction*/
	USART1->CR1 = (CR1_TE | CR1_RE);
 8000452:	4b0a      	ldr	r3, [pc, #40]	; (800047c <a6_uart_init+0xf4>)
 8000454:	220c      	movs	r2, #12
 8000456:	60da      	str	r2, [r3, #12]

	/*9. Enable RXNEIE/*/

	USART1->CR1 |= CR1_RXNEIE;
 8000458:	4b08      	ldr	r3, [pc, #32]	; (800047c <a6_uart_init+0xf4>)
 800045a:	68db      	ldr	r3, [r3, #12]
 800045c:	4a07      	ldr	r2, [pc, #28]	; (800047c <a6_uart_init+0xf4>)
 800045e:	f043 0320 	orr.w	r3, r3, #32
 8000462:	60d3      	str	r3, [r2, #12]


 	/*6. Disable UART module*/
 	USART1->CR1 |= CR1_UE;
 8000464:	4b05      	ldr	r3, [pc, #20]	; (800047c <a6_uart_init+0xf4>)
 8000466:	68db      	ldr	r3, [r3, #12]
 8000468:	4a04      	ldr	r2, [pc, #16]	; (800047c <a6_uart_init+0xf4>)
 800046a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800046e:	60d3      	str	r3, [r2, #12]


}
 8000470:	bf00      	nop
 8000472:	bd80      	pop	{r7, pc}
 8000474:	40023800 	.word	0x40023800
 8000478:	40020000 	.word	0x40020000
 800047c:	40011000 	.word	0x40011000
 8000480:	00f42400 	.word	0x00f42400

08000484 <a6_uart_write_char>:

void a6_uart_write_char(char ch)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	71fb      	strb	r3, [r7, #7]
	/*Make sure the transmit data register is empty*/
	while(!(USART1->SR & SR_TXE)){}
 800048e:	bf00      	nop
 8000490:	4b07      	ldr	r3, [pc, #28]	; (80004b0 <a6_uart_write_char+0x2c>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000498:	2b00      	cmp	r3, #0
 800049a:	d0f9      	beq.n	8000490 <a6_uart_write_char+0xc>

	/*Write to transmit data register*/
	USART1->DR = (ch & 0xFF);
 800049c:	4a04      	ldr	r2, [pc, #16]	; (80004b0 <a6_uart_write_char+0x2c>)
 800049e:	79fb      	ldrb	r3, [r7, #7]
 80004a0:	6053      	str	r3, [r2, #4]

}
 80004a2:	bf00      	nop
 80004a4:	370c      	adds	r7, #12
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	40011000 	.word	0x40011000

080004b4 <debug_uart_write>:

static void debug_uart_write(int ch)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}
 80004bc:	bf00      	nop
 80004be:	4b08      	ldr	r3, [pc, #32]	; (80004e0 <debug_uart_write+0x2c>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d0f9      	beq.n	80004be <debug_uart_write+0xa>

	/*Write to transmit data register*/
	USART2->DR = (ch & 0xFF);
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4a04      	ldr	r2, [pc, #16]	; (80004e0 <debug_uart_write+0x2c>)
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	6053      	str	r3, [r2, #4]
}
 80004d2:	bf00      	nop
 80004d4:	370c      	adds	r7, #12
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	40004400 	.word	0x40004400

080004e4 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t periph_clk,uint32_t baudrate)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	085a      	lsrs	r2, r3, #1
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	441a      	add	r2, r3
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80004fc:	b29b      	uxth	r3, r3
}
 80004fe:	4618      	mov	r0, r3
 8000500:	370c      	adds	r7, #12
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
	...

0800050c <systick_delay_ms>:


void systick_delay_ms(uint32_t delay)
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
	/*1.Reload with number of clocks per millisecond*/
	SysTick->LOAD = SYSTICK_LOAD_VAL;
 8000514:	4b11      	ldr	r3, [pc, #68]	; (800055c <systick_delay_ms+0x50>)
 8000516:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800051a:	605a      	str	r2, [r3, #4]

	/*2. Clear systick current value register*/
	SysTick->VAL = 0;
 800051c:	4b0f      	ldr	r3, [pc, #60]	; (800055c <systick_delay_ms+0x50>)
 800051e:	2200      	movs	r2, #0
 8000520:	609a      	str	r2, [r3, #8]

	/*3. Enable systick and select internal clk src*/
	SysTick->CTRL = (CTRL_CLKSRC | CTRL_ENABLE);
 8000522:	4b0e      	ldr	r3, [pc, #56]	; (800055c <systick_delay_ms+0x50>)
 8000524:	2205      	movs	r2, #5
 8000526:	601a      	str	r2, [r3, #0]

	for(int i = 0 ; i < delay ; i++  )
 8000528:	2300      	movs	r3, #0
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	e009      	b.n	8000542 <systick_delay_ms+0x36>
	{
		while((SysTick->CTRL & CTRL_COUNTFLAG) == 0){}
 800052e:	bf00      	nop
 8000530:	4b0a      	ldr	r3, [pc, #40]	; (800055c <systick_delay_ms+0x50>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000538:	2b00      	cmp	r3, #0
 800053a:	d0f9      	beq.n	8000530 <systick_delay_ms+0x24>
	for(int i = 0 ; i < delay ; i++  )
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	3301      	adds	r3, #1
 8000540:	60fb      	str	r3, [r7, #12]
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	429a      	cmp	r2, r3
 8000548:	d8f1      	bhi.n	800052e <systick_delay_ms+0x22>
	}

	SysTick->CTRL = 0;
 800054a:	4b04      	ldr	r3, [pc, #16]	; (800055c <systick_delay_ms+0x50>)
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
}
 8000550:	bf00      	nop
 8000552:	3714      	adds	r7, #20
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr
 800055c:	e000e010 	.word	0xe000e010

08000560 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800056a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800056e:	2b00      	cmp	r3, #0
 8000570:	db0b      	blt.n	800058a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	f003 021f 	and.w	r2, r3, #31
 8000578:	4907      	ldr	r1, [pc, #28]	; (8000598 <__NVIC_EnableIRQ+0x38>)
 800057a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800057e:	095b      	lsrs	r3, r3, #5
 8000580:	2001      	movs	r0, #1
 8000582:	fa00 f202 	lsl.w	r2, r0, r2
 8000586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	e000e100 	.word	0xe000e100

0800059c <a6_module_init>:

uint8_t SMS_NOTIF = 0;
uint8_t CALL_NOTIF = 0;

void a6_module_init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	/*Enable fifos*/
	tx_fifo_init();
 80005a0:	f000 fb92 	bl	8000cc8 <tx_fifo_init>
	rx_fifo_init();
 80005a4:	f000 fc04 	bl	8000db0 <rx_fifo_init>

	/*Enable a6 uart*/
	a6_uart_init();
 80005a8:	f7ff feee 	bl	8000388 <a6_uart_init>

	/*Enable debug uart*/
	debug_uart_init();
 80005ac:	f7ff fe74 	bl	8000298 <debug_uart_init>

	/*Initialize flags*/
	searching   = false;
 80005b0:	4b0a      	ldr	r3, [pc, #40]	; (80005dc <a6_module_init+0x40>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	701a      	strb	r2, [r3, #0]
	is_response	= false;
 80005b6:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <a6_module_init+0x44>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	701a      	strb	r2, [r3, #0]

	printf("A6 Initialization...\n\r");
 80005bc:	4809      	ldr	r0, [pc, #36]	; (80005e4 <a6_module_init+0x48>)
 80005be:	f000 ffed 	bl	800159c <iprintf>

	/*Enable interrupt*/
	NVIC_EnableIRQ(USART1_IRQn);
 80005c2:	2025      	movs	r0, #37	; 0x25
 80005c4:	f7ff ffcc 	bl	8000560 <__NVIC_EnableIRQ>

	/*Run test command*/
	a6_startup_test();
 80005c8:	f000 f8f6 	bl	80007b8 <a6_startup_test>

	/*Check signal quality*/
	a6_signal_quality();
 80005cc:	f000 f928 	bl	8000820 <a6_signal_quality>

	/*Check network registration status*/
	a6_network_reg();
 80005d0:	f000 fa08 	bl	80009e4 <a6_network_reg>

	/*Get module name*/
	a6_module_name();
 80005d4:	f000 fa3a 	bl	8000a4c <a6_module_name>
}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	200000ac 	.word	0x200000ac
 80005e0:	200000ad 	.word	0x200000ad
 80005e4:	080024bc 	.word	0x080024bc

080005e8 <a6_set_sms_format_to_text>:
	return 0;
}


uint8_t a6_set_sms_format_to_text(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
	uint8_t num_of_try  = MAX_NUM_OF_TRY;
 80005ee:	230a      	movs	r3, #10
 80005f0:	71fb      	strb	r3, [r7, #7]
	wait_resp("ok\r\n");
 80005f2:	4812      	ldr	r0, [pc, #72]	; (800063c <a6_set_sms_format_to_text+0x54>)
 80005f4:	f000 faa4 	bl	8000b40 <wait_resp>

	while(num_of_try)
 80005f8:	e015      	b.n	8000626 <a6_set_sms_format_to_text+0x3e>
	{
		a6_send_cmd("AT+CMGF=1\r\n");
 80005fa:	4811      	ldr	r0, [pc, #68]	; (8000640 <a6_set_sms_format_to_text+0x58>)
 80005fc:	f000 fb42 	bl	8000c84 <a6_send_cmd>
		systick_delay_ms(3000);
 8000600:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000604:	f7ff ff82 	bl	800050c <systick_delay_ms>

		if(is_response)
 8000608:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <a6_set_sms_format_to_text+0x5c>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	2b00      	cmp	r3, #0
 8000610:	d006      	beq.n	8000620 <a6_set_sms_format_to_text+0x38>
		{
			/*Success*/
			printf("Format set successfully.....\n\r");
 8000612:	480d      	ldr	r0, [pc, #52]	; (8000648 <a6_set_sms_format_to_text+0x60>)
 8000614:	f000 ffc2 	bl	800159c <iprintf>
			flush_buffer();
 8000618:	f000 fae6 	bl	8000be8 <flush_buffer>

			return 1;
 800061c:	2301      	movs	r3, #1
 800061e:	e009      	b.n	8000634 <a6_set_sms_format_to_text+0x4c>
		}
		num_of_try--;
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	3b01      	subs	r3, #1
 8000624:	71fb      	strb	r3, [r7, #7]
	while(num_of_try)
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d1e6      	bne.n	80005fa <a6_set_sms_format_to_text+0x12>
	}

	printf("ERR : Format set  failure....\n\r");
 800062c:	4807      	ldr	r0, [pc, #28]	; (800064c <a6_set_sms_format_to_text+0x64>)
 800062e:	f000 ffb5 	bl	800159c <iprintf>
	return 0;
 8000632:	2300      	movs	r3, #0

}
 8000634:	4618      	mov	r0, r3
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	080024d4 	.word	0x080024d4
 8000640:	08002554 	.word	0x08002554
 8000644:	200000ad 	.word	0x200000ad
 8000648:	08002560 	.word	0x08002560
 800064c:	08002580 	.word	0x08002580

08000650 <a6_send_sms>:


uint8_t a6_send_sms(char* message, char* phone_number)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08e      	sub	sp, #56	; 0x38
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	6039      	str	r1, [r7, #0]
	uint8_t num_of_try  = MAX_NUM_OF_TRY;
 800065a:	230a      	movs	r3, #10
 800065c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	wait_resp("ok\r\n");
 8000660:	4834      	ldr	r0, [pc, #208]	; (8000734 <a6_send_sms+0xe4>)
 8000662:	f000 fa6d 	bl	8000b40 <wait_resp>

	while(num_of_try)
 8000666:	e059      	b.n	800071c <a6_send_sms+0xcc>
	{
		char SMS_AT_CMD1[] = "AT+CMGF=1\r\n";
 8000668:	4a33      	ldr	r2, [pc, #204]	; (8000738 <a6_send_sms+0xe8>)
 800066a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800066e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000670:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		char SMS_AT_CMD2[21]= "AT+CMGS=+44"; /*+44  is UK code*/
 8000674:	4a31      	ldr	r2, [pc, #196]	; (800073c <a6_send_sms+0xec>)
 8000676:	f107 0310 	add.w	r3, r7, #16
 800067a:	ca07      	ldmia	r2, {r0, r1, r2}
 800067c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000680:	f107 031c 	add.w	r3, r7, #28
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	721a      	strb	r2, [r3, #8]
		char CR[] = "\r\n";
 800068c:	4a2c      	ldr	r2, [pc, #176]	; (8000740 <a6_send_sms+0xf0>)
 800068e:	f107 030c 	add.w	r3, r7, #12
 8000692:	6812      	ldr	r2, [r2, #0]
 8000694:	4611      	mov	r1, r2
 8000696:	8019      	strh	r1, [r3, #0]
 8000698:	3302      	adds	r3, #2
 800069a:	0c12      	lsrs	r2, r2, #16
 800069c:	701a      	strb	r2, [r3, #0]


		uint8_t MSG_END[] = {26};
 800069e:	231a      	movs	r3, #26
 80006a0:	723b      	strb	r3, [r7, #8]

		strcat(SMS_AT_CMD2,phone_number);
 80006a2:	f107 0310 	add.w	r3, r7, #16
 80006a6:	6839      	ldr	r1, [r7, #0]
 80006a8:	4618      	mov	r0, r3
 80006aa:	f000 ff8f 	bl	80015cc <strcat>
		strcat(SMS_AT_CMD2,CR);
 80006ae:	f107 020c 	add.w	r2, r7, #12
 80006b2:	f107 0310 	add.w	r3, r7, #16
 80006b6:	4611      	mov	r1, r2
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 ff87 	bl	80015cc <strcat>

		/*Set message format to text*/
		a6_send_cmd(SMS_AT_CMD1);
 80006be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 fade 	bl	8000c84 <a6_send_cmd>
		systick_delay_ms(750);
 80006c8:	f240 20ee 	movw	r0, #750	; 0x2ee
 80006cc:	f7ff ff1e 	bl	800050c <systick_delay_ms>

		/*Send phone number*/
		a6_send_cmd(SMS_AT_CMD2);
 80006d0:	f107 0310 	add.w	r3, r7, #16
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 fad5 	bl	8000c84 <a6_send_cmd>
		systick_delay_ms(750);
 80006da:	f240 20ee 	movw	r0, #750	; 0x2ee
 80006de:	f7ff ff15 	bl	800050c <systick_delay_ms>

		/*Send the sms message*/
		a6_send_cmd(message);
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f000 face 	bl	8000c84 <a6_send_cmd>
		systick_delay_ms(750);
 80006e8:	f240 20ee 	movw	r0, #750	; 0x2ee
 80006ec:	f7ff ff0e 	bl	800050c <systick_delay_ms>

		/*Send message end*/
		a6_send_cmd((char *)MSG_END);
 80006f0:	f107 0308 	add.w	r3, r7, #8
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 fac5 	bl	8000c84 <a6_send_cmd>

		if(is_response)
 80006fa:	4b12      	ldr	r3, [pc, #72]	; (8000744 <a6_send_sms+0xf4>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	2b00      	cmp	r3, #0
 8000702:	d006      	beq.n	8000712 <a6_send_sms+0xc2>
		{
		   printf("SMS sent...\n\r");
 8000704:	4810      	ldr	r0, [pc, #64]	; (8000748 <a6_send_sms+0xf8>)
 8000706:	f000 ff49 	bl	800159c <iprintf>
		   flush_buffer();
 800070a:	f000 fa6d 	bl	8000be8 <flush_buffer>
		   return 1;
 800070e:	2301      	movs	r3, #1
 8000710:	e00c      	b.n	800072c <a6_send_sms+0xdc>
		}

		num_of_try--;
 8000712:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000716:	3b01      	subs	r3, #1
 8000718:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	while(num_of_try)
 800071c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000720:	2b00      	cmp	r3, #0
 8000722:	d1a1      	bne.n	8000668 <a6_send_sms+0x18>


	}

	printf("Unable to send SMS...\n\r");
 8000724:	4809      	ldr	r0, [pc, #36]	; (800074c <a6_send_sms+0xfc>)
 8000726:	f000 ff39 	bl	800159c <iprintf>

	return 0;
 800072a:	2300      	movs	r3, #0


}
 800072c:	4618      	mov	r0, r3
 800072e:	3738      	adds	r7, #56	; 0x38
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	080024d4 	.word	0x080024d4
 8000738:	08002554 	.word	0x08002554
 800073c:	080025c8 	.word	0x080025c8
 8000740:	08002550 	.word	0x08002550
 8000744:	200000ad 	.word	0x200000ad
 8000748:	080025a0 	.word	0x080025a0
 800074c:	080025b0 	.word	0x080025b0

08000750 <a6_delete_all_sms>:


 uint8_t a6_delete_all_sms(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
	uint8_t num_of_try  = MAX_NUM_OF_TRY;
 8000756:	230a      	movs	r3, #10
 8000758:	71fb      	strb	r3, [r7, #7]
	wait_resp("ok\r\n");
 800075a:	4812      	ldr	r0, [pc, #72]	; (80007a4 <a6_delete_all_sms+0x54>)
 800075c:	f000 f9f0 	bl	8000b40 <wait_resp>

	while(num_of_try)
 8000760:	e015      	b.n	800078e <a6_delete_all_sms+0x3e>
	{
		a6_send_cmd("AT+CMGD=1,4\r\n");
 8000762:	4811      	ldr	r0, [pc, #68]	; (80007a8 <a6_delete_all_sms+0x58>)
 8000764:	f000 fa8e 	bl	8000c84 <a6_send_cmd>
		systick_delay_ms(3000);
 8000768:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800076c:	f7ff fece 	bl	800050c <systick_delay_ms>

		if(is_response)
 8000770:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <a6_delete_all_sms+0x5c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	b2db      	uxtb	r3, r3
 8000776:	2b00      	cmp	r3, #0
 8000778:	d006      	beq.n	8000788 <a6_delete_all_sms+0x38>
		{
			/*Success*/
			printf("All messages deleted successfully.....\n\r");
 800077a:	480d      	ldr	r0, [pc, #52]	; (80007b0 <a6_delete_all_sms+0x60>)
 800077c:	f000 ff0e 	bl	800159c <iprintf>
			flush_buffer();
 8000780:	f000 fa32 	bl	8000be8 <flush_buffer>
			return 1;
 8000784:	2301      	movs	r3, #1
 8000786:	e009      	b.n	800079c <a6_delete_all_sms+0x4c>
		}
		num_of_try--;
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	3b01      	subs	r3, #1
 800078c:	71fb      	strb	r3, [r7, #7]
	while(num_of_try)
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d1e6      	bne.n	8000762 <a6_delete_all_sms+0x12>
	}

	printf("ERR : Message deletion failed....\n\r");
 8000794:	4807      	ldr	r0, [pc, #28]	; (80007b4 <a6_delete_all_sms+0x64>)
 8000796:	f000 ff01 	bl	800159c <iprintf>
	return 0;
 800079a:	2300      	movs	r3, #0

}
 800079c:	4618      	mov	r0, r3
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	080024d4 	.word	0x080024d4
 80007a8:	080025e0 	.word	0x080025e0
 80007ac:	200000ad 	.word	0x200000ad
 80007b0:	080025f0 	.word	0x080025f0
 80007b4:	0800261c 	.word	0x0800261c

080007b8 <a6_startup_test>:


static uint8_t a6_startup_test(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
	uint8_t num_of_try  = MAX_NUM_OF_TRY;
 80007be:	230a      	movs	r3, #10
 80007c0:	71fb      	strb	r3, [r7, #7]
	wait_resp("ok\r\n");
 80007c2:	4812      	ldr	r0, [pc, #72]	; (800080c <a6_startup_test+0x54>)
 80007c4:	f000 f9bc 	bl	8000b40 <wait_resp>

	while(num_of_try)
 80007c8:	e015      	b.n	80007f6 <a6_startup_test+0x3e>
	{
		a6_send_cmd("AT+COPN=?\r\n");
 80007ca:	4811      	ldr	r0, [pc, #68]	; (8000810 <a6_startup_test+0x58>)
 80007cc:	f000 fa5a 	bl	8000c84 <a6_send_cmd>
		systick_delay_ms(3000);
 80007d0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80007d4:	f7ff fe9a 	bl	800050c <systick_delay_ms>

		if(is_response)
 80007d8:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <a6_startup_test+0x5c>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d006      	beq.n	80007f0 <a6_startup_test+0x38>
		{
			/*Success*/
			printf("Test was successful.....\n\r");
 80007e2:	480d      	ldr	r0, [pc, #52]	; (8000818 <a6_startup_test+0x60>)
 80007e4:	f000 feda 	bl	800159c <iprintf>
			flush_buffer();
 80007e8:	f000 f9fe 	bl	8000be8 <flush_buffer>
			return 1;
 80007ec:	2301      	movs	r3, #1
 80007ee:	e009      	b.n	8000804 <a6_startup_test+0x4c>
		}
		num_of_try--;
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	3b01      	subs	r3, #1
 80007f4:	71fb      	strb	r3, [r7, #7]
	while(num_of_try)
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d1e6      	bne.n	80007ca <a6_startup_test+0x12>
	}

	printf("ERR : Test failure....\n\r");
 80007fc:	4807      	ldr	r0, [pc, #28]	; (800081c <a6_startup_test+0x64>)
 80007fe:	f000 fecd 	bl	800159c <iprintf>
	return 0;
 8000802:	2300      	movs	r3, #0

}
 8000804:	4618      	mov	r0, r3
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	080024d4 	.word	0x080024d4
 8000810:	08002640 	.word	0x08002640
 8000814:	200000ad 	.word	0x200000ad
 8000818:	0800264c 	.word	0x0800264c
 800081c:	08002668 	.word	0x08002668

08000820 <a6_signal_quality>:

static uint8_t a6_signal_quality(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
	uint8_t num_of_try  = MAX_NUM_OF_TRY;
 8000826:	230a      	movs	r3, #10
 8000828:	71fb      	strb	r3, [r7, #7]
	wait_resp("ok\r\n");
 800082a:	4812      	ldr	r0, [pc, #72]	; (8000874 <a6_signal_quality+0x54>)
 800082c:	f000 f988 	bl	8000b40 <wait_resp>

	while(num_of_try)
 8000830:	e015      	b.n	800085e <a6_signal_quality+0x3e>
	{
		a6_send_cmd("AT+CSQ=?\r\n");
 8000832:	4811      	ldr	r0, [pc, #68]	; (8000878 <a6_signal_quality+0x58>)
 8000834:	f000 fa26 	bl	8000c84 <a6_send_cmd>
		systick_delay_ms(3000);
 8000838:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800083c:	f7ff fe66 	bl	800050c <systick_delay_ms>

		if(is_response)
 8000840:	4b0e      	ldr	r3, [pc, #56]	; (800087c <a6_signal_quality+0x5c>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	b2db      	uxtb	r3, r3
 8000846:	2b00      	cmp	r3, #0
 8000848:	d006      	beq.n	8000858 <a6_signal_quality+0x38>
		{
			/*Success*/
			printf("Signal check successful.....\n\r");
 800084a:	480d      	ldr	r0, [pc, #52]	; (8000880 <a6_signal_quality+0x60>)
 800084c:	f000 fea6 	bl	800159c <iprintf>
			flush_buffer();
 8000850:	f000 f9ca 	bl	8000be8 <flush_buffer>
			return 1;
 8000854:	2301      	movs	r3, #1
 8000856:	e009      	b.n	800086c <a6_signal_quality+0x4c>
		}
		num_of_try--;
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	3b01      	subs	r3, #1
 800085c:	71fb      	strb	r3, [r7, #7]
	while(num_of_try)
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d1e6      	bne.n	8000832 <a6_signal_quality+0x12>
	}

	printf("ERR : Signal check failure....\n\r");
 8000864:	4807      	ldr	r0, [pc, #28]	; (8000884 <a6_signal_quality+0x64>)
 8000866:	f000 fe99 	bl	800159c <iprintf>
	return 0;
 800086a:	2300      	movs	r3, #0

}
 800086c:	4618      	mov	r0, r3
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	080024d4 	.word	0x080024d4
 8000878:	08002684 	.word	0x08002684
 800087c:	200000ad 	.word	0x200000ad
 8000880:	08002690 	.word	0x08002690
 8000884:	080026b0 	.word	0x080026b0

08000888 <a6_is_call>:


uint8_t a6_is_call(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
	char* ptr = NULL;
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]

	ptr =  strstr(temp_buffer,"RING");
 8000892:	4907      	ldr	r1, [pc, #28]	; (80008b0 <a6_is_call+0x28>)
 8000894:	4807      	ldr	r0, [pc, #28]	; (80008b4 <a6_is_call+0x2c>)
 8000896:	f000 feb0 	bl	80015fa <strstr>
 800089a:	6078      	str	r0, [r7, #4]

	if(ptr == NULL)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d101      	bne.n	80008a6 <a6_is_call+0x1e>
	{
		/*No call*/
		return 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	e000      	b.n	80008a8 <a6_is_call+0x20>
	}
	else
	{
		return 1;
 80008a6:	2301      	movs	r3, #1
	}

}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	080026d4 	.word	0x080026d4
 80008b4:	20000604 	.word	0x20000604

080008b8 <a6_is_sms>:


uint8_t a6_is_sms(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
	char* ptr = NULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	607b      	str	r3, [r7, #4]

	ptr =  strstr(temp_buffer,"MESSAGE");
 80008c2:	4907      	ldr	r1, [pc, #28]	; (80008e0 <a6_is_sms+0x28>)
 80008c4:	4807      	ldr	r0, [pc, #28]	; (80008e4 <a6_is_sms+0x2c>)
 80008c6:	f000 fe98 	bl	80015fa <strstr>
 80008ca:	6078      	str	r0, [r7, #4]

	if(ptr == NULL)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d101      	bne.n	80008d6 <a6_is_sms+0x1e>
	{
		/*No message*/
		return 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	e000      	b.n	80008d8 <a6_is_sms+0x20>
	}
	else
	{
		return 1;
 80008d6:	2301      	movs	r3, #1
	}

}
 80008d8:	4618      	mov	r0, r3
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	080026dc 	.word	0x080026dc
 80008e4:	20000604 	.word	0x20000604

080008e8 <get_raw_sms>:


void get_raw_sms(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0

	char* ptr = NULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	603b      	str	r3, [r7, #0]

	ptr =  strstr(temp_buffer,"+CMT");
 80008f2:	490f      	ldr	r1, [pc, #60]	; (8000930 <get_raw_sms+0x48>)
 80008f4:	480f      	ldr	r0, [pc, #60]	; (8000934 <get_raw_sms+0x4c>)
 80008f6:	f000 fe80 	bl	80015fa <strstr>
 80008fa:	6038      	str	r0, [r7, #0]

	if(NULL != ptr)
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d011      	beq.n	8000926 <get_raw_sms+0x3e>
	{
	   for( int j = 0 ; j < RAW_SMS_LEN ; j++)
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	e00b      	b.n	8000920 <get_raw_sms+0x38>
	   {
		   raw_msg[j] = ptr[j];
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	683a      	ldr	r2, [r7, #0]
 800090c:	4413      	add	r3, r2
 800090e:	7819      	ldrb	r1, [r3, #0]
 8000910:	4a09      	ldr	r2, [pc, #36]	; (8000938 <get_raw_sms+0x50>)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4413      	add	r3, r2
 8000916:	460a      	mov	r2, r1
 8000918:	701a      	strb	r2, [r3, #0]
	   for( int j = 0 ; j < RAW_SMS_LEN ; j++)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	3301      	adds	r3, #1
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2bc7      	cmp	r3, #199	; 0xc7
 8000924:	ddf0      	ble.n	8000908 <get_raw_sms+0x20>
	   }
	}
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	080026e4 	.word	0x080026e4
 8000934:	20000604 	.word	0x20000604
 8000938:	200000c8 	.word	0x200000c8

0800093c <get_sms_msg>:

void get_sms_msg(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
	char* ptr = NULL;
 8000942:	2300      	movs	r3, #0
 8000944:	603b      	str	r3, [r7, #0]

	ptr =  strstr(raw_msg,"\"20");
 8000946:	490f      	ldr	r1, [pc, #60]	; (8000984 <get_sms_msg+0x48>)
 8000948:	480f      	ldr	r0, [pc, #60]	; (8000988 <get_sms_msg+0x4c>)
 800094a:	f000 fe56 	bl	80015fa <strstr>
 800094e:	6038      	str	r0, [r7, #0]

	if( ptr !=NULL )
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d011      	beq.n	800097a <get_sms_msg+0x3e>
	{
		   for( int j = 0 ; j < SMS_MSG_LEN ; j++)
 8000956:	2300      	movs	r3, #0
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	e00b      	b.n	8000974 <get_sms_msg+0x38>
		   {
			   sms_msg[j] = ptr[j];
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	683a      	ldr	r2, [r7, #0]
 8000960:	4413      	add	r3, r2
 8000962:	7819      	ldrb	r1, [r3, #0]
 8000964:	4a09      	ldr	r2, [pc, #36]	; (800098c <get_sms_msg+0x50>)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4413      	add	r3, r2
 800096a:	460a      	mov	r2, r1
 800096c:	701a      	strb	r2, [r3, #0]
		   for( int j = 0 ; j < SMS_MSG_LEN ; j++)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	3301      	adds	r3, #1
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2b45      	cmp	r3, #69	; 0x45
 8000978:	ddf0      	ble.n	800095c <get_sms_msg+0x20>
		   }
	}

}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	080026ec 	.word	0x080026ec
 8000988:	200000c8 	.word	0x200000c8
 800098c:	20000190 	.word	0x20000190

08000990 <get_sender_number>:



void get_sender_number(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
	char* ptr = NULL;
 8000996:	2300      	movs	r3, #0
 8000998:	603b      	str	r3, [r7, #0]

	ptr =  strstr(raw_msg,"+44");
 800099a:	490f      	ldr	r1, [pc, #60]	; (80009d8 <get_sender_number+0x48>)
 800099c:	480f      	ldr	r0, [pc, #60]	; (80009dc <get_sender_number+0x4c>)
 800099e:	f000 fe2c 	bl	80015fa <strstr>
 80009a2:	6038      	str	r0, [r7, #0]

	if( ptr !=NULL )
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d011      	beq.n	80009ce <get_sender_number+0x3e>
	{
		   for( int j = 0 ; j < PHONE_NUM_LEN ; j++)
 80009aa:	2300      	movs	r3, #0
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	e00b      	b.n	80009c8 <get_sender_number+0x38>
		   {
			   sender_number[j] = ptr[j];
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	683a      	ldr	r2, [r7, #0]
 80009b4:	4413      	add	r3, r2
 80009b6:	7819      	ldrb	r1, [r3, #0]
 80009b8:	4a09      	ldr	r2, [pc, #36]	; (80009e0 <get_sender_number+0x50>)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4413      	add	r3, r2
 80009be:	460a      	mov	r2, r1
 80009c0:	701a      	strb	r2, [r3, #0]
		   for( int j = 0 ; j < PHONE_NUM_LEN ; j++)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	3301      	adds	r3, #1
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2b0c      	cmp	r3, #12
 80009cc:	ddf0      	ble.n	80009b0 <get_sender_number+0x20>
		   }
	}

}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	080026f0 	.word	0x080026f0
 80009dc:	200000c8 	.word	0x200000c8
 80009e0:	200000b8 	.word	0x200000b8

080009e4 <a6_network_reg>:

static uint8_t a6_network_reg(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
	uint8_t num_of_try  = MAX_NUM_OF_TRY;
 80009ea:	230a      	movs	r3, #10
 80009ec:	71fb      	strb	r3, [r7, #7]
	wait_resp("ok\r\n");
 80009ee:	4812      	ldr	r0, [pc, #72]	; (8000a38 <a6_network_reg+0x54>)
 80009f0:	f000 f8a6 	bl	8000b40 <wait_resp>

	while(num_of_try)
 80009f4:	e015      	b.n	8000a22 <a6_network_reg+0x3e>
	{
		a6_send_cmd("AT+CREG=?\r\n");
 80009f6:	4811      	ldr	r0, [pc, #68]	; (8000a3c <a6_network_reg+0x58>)
 80009f8:	f000 f944 	bl	8000c84 <a6_send_cmd>
		systick_delay_ms(3000);
 80009fc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000a00:	f7ff fd84 	bl	800050c <systick_delay_ms>

		if(is_response)
 8000a04:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <a6_network_reg+0x5c>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d006      	beq.n	8000a1c <a6_network_reg+0x38>
		{
			/*Success*/
			printf("Network registration status retrieved.....\n\r");
 8000a0e:	480d      	ldr	r0, [pc, #52]	; (8000a44 <a6_network_reg+0x60>)
 8000a10:	f000 fdc4 	bl	800159c <iprintf>
			flush_buffer();
 8000a14:	f000 f8e8 	bl	8000be8 <flush_buffer>
			return 1;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	e009      	b.n	8000a30 <a6_network_reg+0x4c>
		}
		num_of_try--;
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	71fb      	strb	r3, [r7, #7]
	while(num_of_try)
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d1e6      	bne.n	80009f6 <a6_network_reg+0x12>
	}

	printf("ERR : Registration status retrieval error....\n\r");
 8000a28:	4807      	ldr	r0, [pc, #28]	; (8000a48 <a6_network_reg+0x64>)
 8000a2a:	f000 fdb7 	bl	800159c <iprintf>
	return 0;
 8000a2e:	2300      	movs	r3, #0

}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	080024d4 	.word	0x080024d4
 8000a3c:	080026f4 	.word	0x080026f4
 8000a40:	200000ad 	.word	0x200000ad
 8000a44:	08002700 	.word	0x08002700
 8000a48:	08002730 	.word	0x08002730

08000a4c <a6_module_name>:

static uint8_t a6_module_name(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
	uint8_t num_of_try  = MAX_NUM_OF_TRY;
 8000a52:	230a      	movs	r3, #10
 8000a54:	71fb      	strb	r3, [r7, #7]
	wait_resp("ok\r\n");
 8000a56:	4812      	ldr	r0, [pc, #72]	; (8000aa0 <a6_module_name+0x54>)
 8000a58:	f000 f872 	bl	8000b40 <wait_resp>

	while(num_of_try)
 8000a5c:	e015      	b.n	8000a8a <a6_module_name+0x3e>
	{
		a6_send_cmd("ATI\r\n");
 8000a5e:	4811      	ldr	r0, [pc, #68]	; (8000aa4 <a6_module_name+0x58>)
 8000a60:	f000 f910 	bl	8000c84 <a6_send_cmd>
		systick_delay_ms(3000);
 8000a64:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000a68:	f7ff fd50 	bl	800050c <systick_delay_ms>

		if(is_response)
 8000a6c:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <a6_module_name+0x5c>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d006      	beq.n	8000a84 <a6_module_name+0x38>
		{
			/*Success*/
			printf("Module name retrieved successfully.....\n\r");
 8000a76:	480d      	ldr	r0, [pc, #52]	; (8000aac <a6_module_name+0x60>)
 8000a78:	f000 fd90 	bl	800159c <iprintf>
			flush_buffer();
 8000a7c:	f000 f8b4 	bl	8000be8 <flush_buffer>
			return 1;
 8000a80:	2301      	movs	r3, #1
 8000a82:	e009      	b.n	8000a98 <a6_module_name+0x4c>
		}
		num_of_try--;
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	3b01      	subs	r3, #1
 8000a88:	71fb      	strb	r3, [r7, #7]
	while(num_of_try)
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d1e6      	bne.n	8000a5e <a6_module_name+0x12>
	}

	printf("ERR : Module name  retrieval error....\n\r");
 8000a90:	4807      	ldr	r0, [pc, #28]	; (8000ab0 <a6_module_name+0x64>)
 8000a92:	f000 fd83 	bl	800159c <iprintf>
	return 0;
 8000a96:	2300      	movs	r3, #0

}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	080024d4 	.word	0x080024d4
 8000aa4:	08002760 	.word	0x08002760
 8000aa8:	200000ad 	.word	0x200000ad
 8000aac:	08002768 	.word	0x08002768
 8000ab0:	08002794 	.word	0x08002794

08000ab4 <cpy_to_uart>:


/*Copy content of tx_fifo into debug uart*/
static void cpy_to_uart(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
	char letter;

	/*Make sure transmit data register is empty and
	 * fifo has content*/
	while((USART2->SR  & SR_TXE) && tx_fifo_size() >0)
 8000aba:	e006      	b.n	8000aca <cpy_to_uart+0x16>
	{
		/*Get char from fifo*/
		tx_fifo_get(&letter);
 8000abc:	1dfb      	adds	r3, r7, #7
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f000 f940 	bl	8000d44 <tx_fifo_get>

		/*Put into uart data register*/
		USART2->DR = letter;
 8000ac4:	79fa      	ldrb	r2, [r7, #7]
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <cpy_to_uart+0x34>)
 8000ac8:	605a      	str	r2, [r3, #4]
	while((USART2->SR  & SR_TXE) && tx_fifo_size() >0)
 8000aca:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <cpy_to_uart+0x34>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d004      	beq.n	8000ae0 <cpy_to_uart+0x2c>
 8000ad6:	f000 f95b 	bl	8000d90 <tx_fifo_size>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d1ed      	bne.n	8000abc <cpy_to_uart+0x8>
	}

}
 8000ae0:	bf00      	nop
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40004400 	.word	0x40004400

08000aec <uart_output_char>:

/*Output uart character*/
static void uart_output_char(char data)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	71fb      	strb	r3, [r7, #7]
     if(tx_fifo_put(data) == FIFOFAIL)
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f000 f8f7 	bl	8000cec <tx_fifo_put>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d002      	beq.n	8000b0a <uart_output_char+0x1e>
     {
    	 return;
     }

     cpy_to_uart();
 8000b04:	f7ff ffd6 	bl	8000ab4 <cpy_to_uart>
 8000b08:	e000      	b.n	8000b0c <uart_output_char+0x20>
    	 return;
 8000b0a:	bf00      	nop
}
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <to_lower>:



static char to_lower(char letter)

{
 8000b12:	b480      	push	{r7}
 8000b14:	b083      	sub	sp, #12
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	4603      	mov	r3, r0
 8000b1a:	71fb      	strb	r3, [r7, #7]
	if((letter >= 'A') && (letter <= 'Z'))
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	2b40      	cmp	r3, #64	; 0x40
 8000b20:	d906      	bls.n	8000b30 <to_lower+0x1e>
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	2b5a      	cmp	r3, #90	; 0x5a
 8000b26:	d803      	bhi.n	8000b30 <to_lower+0x1e>
	{
		letter |=0x20;
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	f043 0320 	orr.w	r3, r3, #32
 8000b2e:	71fb      	strb	r3, [r7, #7]
	}

	return letter;
 8000b30:	79fb      	ldrb	r3, [r7, #7]
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
	...

08000b40 <wait_resp>:


/*Initialize the string search in the rx data stream*/

static void wait_resp(char *pt)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	strcpy(sub_str,pt);
 8000b48:	6879      	ldr	r1, [r7, #4]
 8000b4a:	4808      	ldr	r0, [pc, #32]	; (8000b6c <wait_resp+0x2c>)
 8000b4c:	f000 fd4d 	bl	80015ea <strcpy>
	search_idx 	= 0;
 8000b50:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <wait_resp+0x30>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
	is_response = false;
 8000b56:	4b07      	ldr	r3, [pc, #28]	; (8000b74 <wait_resp+0x34>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	701a      	strb	r2, [r3, #0]
	searching 	= true;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <wait_resp+0x38>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	701a      	strb	r2, [r3, #0]
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	200005e4 	.word	0x200005e4
 8000b70:	200000b0 	.word	0x200000b0
 8000b74:	200000ad 	.word	0x200000ad
 8000b78:	200000ac 	.word	0x200000ac

08000b7c <search_check>:



/*Search for string in rx data stream*/
static void search_check(char letter)
{
 8000b7c:	b590      	push	{r4, r7, lr}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]
	if(searching)
 8000b86:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <search_check+0x5c>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d01f      	beq.n	8000bd0 <search_check+0x54>
	{
		/*Check if characters match*/
		if(sub_str[search_idx] == to_lower(letter))
 8000b90:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <search_check+0x60>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <search_check+0x64>)
 8000b96:	5cd4      	ldrb	r4, [r2, r3]
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff ffb9 	bl	8000b12 <to_lower>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	429c      	cmp	r4, r3
 8000ba4:	d111      	bne.n	8000bca <search_check+0x4e>
		{
			search_idx++;
 8000ba6:	4b0d      	ldr	r3, [pc, #52]	; (8000bdc <search_check+0x60>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	3301      	adds	r3, #1
 8000bac:	4a0b      	ldr	r2, [pc, #44]	; (8000bdc <search_check+0x60>)
 8000bae:	6013      	str	r3, [r2, #0]

			/* Check if end of string */
			if(sub_str[search_idx] == 0)
 8000bb0:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <search_check+0x60>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <search_check+0x64>)
 8000bb6:	5cd3      	ldrb	r3, [r2, r3]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d109      	bne.n	8000bd0 <search_check+0x54>
			{
				is_response =  true;
 8000bbc:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <search_check+0x68>)
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	701a      	strb	r2, [r3, #0]
				searching   =  false;
 8000bc2:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <search_check+0x5c>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]
		{
			/*Start over*/
			search_idx = 0;
		}
	}
}
 8000bc8:	e002      	b.n	8000bd0 <search_check+0x54>
			search_idx = 0;
 8000bca:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <search_check+0x60>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
}
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd90      	pop	{r4, r7, pc}
 8000bd8:	200000ac 	.word	0x200000ac
 8000bdc:	200000b0 	.word	0x200000b0
 8000be0:	200005e4 	.word	0x200005e4
 8000be4:	200000ad 	.word	0x200000ad

08000be8 <flush_buffer>:

 void flush_buffer(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
	itr = 0;
 8000bee:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <flush_buffer+0x38>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]

	for(int i =0 ;i <TEMP_BUFF_SIZE; i++)
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	e007      	b.n	8000c0a <flush_buffer+0x22>
	{
		temp_buffer[i] = '\0';
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	; (8000c24 <flush_buffer+0x3c>)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4413      	add	r3, r2
 8000c00:	2200      	movs	r2, #0
 8000c02:	701a      	strb	r2, [r3, #0]
	for(int i =0 ;i <TEMP_BUFF_SIZE; i++)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3301      	adds	r3, #1
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000c10:	dbf3      	blt.n	8000bfa <flush_buffer+0x12>
	}

}
 8000c12:	bf00      	nop
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	200000b4 	.word	0x200000b4
 8000c24:	20000604 	.word	0x20000604

08000c28 <a6_process_data>:

static void a6_process_data(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
	char letter;

	/*Check if there is new data in data register*/
	if(USART1->SR & SR_RXNE)
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <a6_process_data+0x4c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f003 0320 	and.w	r3, r3, #32
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d018      	beq.n	8000c6c <a6_process_data+0x44>
	{
		/*Store data from a6 uart data register to local variable*/
       letter  =  USART1->DR;
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <a6_process_data+0x4c>)
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	71fb      	strb	r3, [r7, #7]
       temp_buffer[itr++] = letter;
 8000c40:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <a6_process_data+0x50>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	1c5a      	adds	r2, r3, #1
 8000c46:	490c      	ldr	r1, [pc, #48]	; (8000c78 <a6_process_data+0x50>)
 8000c48:	600a      	str	r2, [r1, #0]
 8000c4a:	490c      	ldr	r1, [pc, #48]	; (8000c7c <a6_process_data+0x54>)
 8000c4c:	79fa      	ldrb	r2, [r7, #7]
 8000c4e:	54ca      	strb	r2, [r1, r3]

       /*Print data from a6 uart data register to debug uart, meaning, your computer */
       uart_output_char(letter);
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff ff4a 	bl	8000aec <uart_output_char>


       /*Check for response*/
       search_check(letter);
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff ff8e 	bl	8000b7c <search_check>

       /*Check if SMS*/
       SMS_NOTIF = a6_is_sms();
 8000c60:	f7ff fe2a 	bl	80008b8 <a6_is_sms>
 8000c64:	4603      	mov	r3, r0
 8000c66:	461a      	mov	r2, r3
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <a6_process_data+0x58>)
 8000c6a:	701a      	strb	r2, [r3, #0]


	}

}
 8000c6c:	bf00      	nop
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40011000 	.word	0x40011000
 8000c78:	200000b4 	.word	0x200000b4
 8000c7c:	20000604 	.word	0x20000604
 8000c80:	200001d6 	.word	0x200001d6

08000c84 <a6_send_cmd>:


/*Send command to a6*/
static void a6_send_cmd(const char * cmd)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	int index = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	60fb      	str	r3, [r7, #12]

	while(cmd[index] != 0)
 8000c90:	e009      	b.n	8000ca6 <a6_send_cmd+0x22>
	{
		a6_uart_write_char(cmd[index++]);
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	1c5a      	adds	r2, r3, #1
 8000c96:	60fa      	str	r2, [r7, #12]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff fbef 	bl	8000484 <a6_uart_write_char>
	while(cmd[index] != 0)
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	4413      	add	r3, r2
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d1ef      	bne.n	8000c92 <a6_send_cmd+0xe>
	}
}
 8000cb2:	bf00      	nop
 8000cb4:	bf00      	nop
 8000cb6:	3710      	adds	r7, #16
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0

	a6_process_data();
 8000cc0:	f7ff ffb2 	bl	8000c28 <a6_process_data>
}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <tx_fifo_init>:


/*Initialize tx fifo*/

void tx_fifo_init(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
	tx_put_itr = 0;
 8000ccc:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <tx_fifo_init+0x1c>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
	tx_get_itr = 0;
 8000cd2:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <tx_fifo_init+0x20>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	2000073c 	.word	0x2000073c
 8000ce8:	20000738 	.word	0x20000738

08000cec <tx_fifo_put>:

/*Put data into tx fifo*/

uint8_t tx_fifo_put(tx_dataType data)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]

	/*Check if fifo is full*/
	if((tx_put_itr - tx_get_itr) & ~(TXFIFOSIZE -1))
 8000cf6:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <tx_fifo_put+0x4c>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <tx_fifo_put+0x50>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	1ad3      	subs	r3, r2, r3
 8000d00:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000d04:	f023 0303 	bic.w	r3, r3, #3
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <tx_fifo_put+0x24>
	{
		/*fifo is full*/
		return (TXFAIL);
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	e00c      	b.n	8000d2a <tx_fifo_put+0x3e>
	}
	/*Put data into fifo*/
	TX_FIFO[tx_put_itr & (TXFIFOSIZE-1)] =  data;
 8000d10:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <tx_fifo_put+0x4c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d18:	4909      	ldr	r1, [pc, #36]	; (8000d40 <tx_fifo_put+0x54>)
 8000d1a:	79fa      	ldrb	r2, [r7, #7]
 8000d1c:	54ca      	strb	r2, [r1, r3]

	/*Increment itr*/
	tx_put_itr++;
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <tx_fifo_put+0x4c>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	3301      	adds	r3, #1
 8000d24:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <tx_fifo_put+0x4c>)
 8000d26:	6013      	str	r3, [r2, #0]

	return(TXSUCCESS);
 8000d28:	2301      	movs	r3, #1
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	2000073c 	.word	0x2000073c
 8000d3c:	20000738 	.word	0x20000738
 8000d40:	200001d8 	.word	0x200001d8

08000d44 <tx_fifo_get>:

uint8_t tx_fifo_get(tx_dataType *pdata)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
   /*Check if fifo is empty*/
	if(tx_put_itr == tx_get_itr)
 8000d4c:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <tx_fifo_get+0x40>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	4b0d      	ldr	r3, [pc, #52]	; (8000d88 <tx_fifo_get+0x44>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d101      	bne.n	8000d5c <tx_fifo_get+0x18>
	{
		/*fifo empty*/
		return (TXFAIL);
 8000d58:	2300      	movs	r3, #0
 8000d5a:	e00d      	b.n	8000d78 <tx_fifo_get+0x34>
	}

	/*Get the data*/
	*pdata =  TX_FIFO[tx_get_itr & (TXFIFOSIZE - 1)];
 8000d5c:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <tx_fifo_get+0x44>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d64:	4a09      	ldr	r2, [pc, #36]	; (8000d8c <tx_fifo_get+0x48>)
 8000d66:	5cd2      	ldrb	r2, [r2, r3]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	701a      	strb	r2, [r3, #0]

	/*Increment the itr*/
	tx_get_itr++;
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <tx_fifo_get+0x44>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	3301      	adds	r3, #1
 8000d72:	4a05      	ldr	r2, [pc, #20]	; (8000d88 <tx_fifo_get+0x44>)
 8000d74:	6013      	str	r3, [r2, #0]

	return (TXSUCCESS);
 8000d76:	2301      	movs	r3, #1
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	2000073c 	.word	0x2000073c
 8000d88:	20000738 	.word	0x20000738
 8000d8c:	200001d8 	.word	0x200001d8

08000d90 <tx_fifo_size>:


uint32_t tx_fifo_size(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
	return (uint32_t)(tx_put_itr -  tx_get_itr);
 8000d94:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <tx_fifo_size+0x18>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	4b04      	ldr	r3, [pc, #16]	; (8000dac <tx_fifo_size+0x1c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	1ad3      	subs	r3, r2, r3
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	2000073c 	.word	0x2000073c
 8000dac:	20000738 	.word	0x20000738

08000db0 <rx_fifo_init>:


/*Initialize rx fifo*/

void rx_fifo_init(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
	rx_put_itr = 0;
 8000db4:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <rx_fifo_init+0x1c>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
	rx_get_itr = 0;
 8000dba:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <rx_fifo_init+0x20>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	20000730 	.word	0x20000730
 8000dd0:	20000734 	.word	0x20000734

08000dd4 <light_init>:
#define CR2_SWSTART (1U<<30)
#define SR_EOC		(1U<<1)


void light_init(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |=GPIOAEN;
 8000dd8:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <light_init+0x34>)
 8000dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ddc:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <light_init+0x34>)
 8000dde:	f043 0301 	orr.w	r3, r3, #1
 8000de2:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA5 as output*/
	GPIOA->MODER |=(1U<<10);
 8000de4:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <light_init+0x38>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a08      	ldr	r2, [pc, #32]	; (8000e0c <light_init+0x38>)
 8000dea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dee:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<11);
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <light_init+0x38>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a05      	ldr	r2, [pc, #20]	; (8000e0c <light_init+0x38>)
 8000df6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000dfa:	6013      	str	r3, [r2, #0]
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40020000 	.word	0x40020000

08000e10 <light_on>:



void light_on(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
	/*Set PA5 output to high*/
	GPIOA->ODR |=(1U<<5);
 8000e14:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <light_on+0x1c>)
 8000e16:	695b      	ldr	r3, [r3, #20]
 8000e18:	4a04      	ldr	r2, [pc, #16]	; (8000e2c <light_on+0x1c>)
 8000e1a:	f043 0320 	orr.w	r3, r3, #32
 8000e1e:	6153      	str	r3, [r2, #20]
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	40020000 	.word	0x40020000

08000e30 <light_off>:


void light_off(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
	/*Set PA5 output to low*/
	GPIOA->ODR &=~(1U<<5);
 8000e34:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <light_off+0x1c>)
 8000e36:	695b      	ldr	r3, [r3, #20]
 8000e38:	4a04      	ldr	r2, [pc, #16]	; (8000e4c <light_off+0x1c>)
 8000e3a:	f023 0320 	bic.w	r3, r3, #32
 8000e3e:	6153      	str	r3, [r2, #20]
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	40020000 	.word	0x40020000

08000e50 <main>:

extern uint8_t SMS_NOTIF;
extern uint8_t CALL_NOTIF;

int main()
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0

	debug_uart_init();
 8000e54:	f7ff fa20 	bl	8000298 <debug_uart_init>
	a6_uart_init();
 8000e58:	f7ff fa96 	bl	8000388 <a6_uart_init>
	light_init();
 8000e5c:	f7ff ffba 	bl	8000dd4 <light_init>
	rtc_init();
 8000e60:	f000 f8c0 	bl	8000fe4 <rtc_init>
	rtc_alarm_init();
 8000e64:	f000 f918 	bl	8001098 <rtc_alarm_init>
	a6_module_init();
 8000e68:	f7ff fb98 	bl	800059c <a6_module_init>

	a6_set_sms_format_to_text();
 8000e6c:	f7ff fbbc 	bl	80005e8 <a6_set_sms_format_to_text>

	/*Delete all received messages*/
	a6_delete_all_sms();
 8000e70:	f7ff fc6e 	bl	8000750 <a6_delete_all_sms>

	a6_send_sms(sms_message,receiver_number);
 8000e74:	490f      	ldr	r1, [pc, #60]	; (8000eb4 <main+0x64>)
 8000e76:	4810      	ldr	r0, [pc, #64]	; (8000eb8 <main+0x68>)
 8000e78:	f7ff fbea 	bl	8000650 <a6_send_sms>

	while(1)
	{

		/*Get notifications*/
		poll_for_notifs();
 8000e7c:	f000 f848 	bl	8000f10 <poll_for_notifs>

		if(CALL_NOTIF)
 8000e80:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <main+0x6c>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d004      	beq.n	8000e92 <main+0x42>
		 {
			light_on();
 8000e88:	f7ff ffc2 	bl	8000e10 <light_on>
			CALL_NOTIF = 0;
 8000e8c:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <main+0x6c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	701a      	strb	r2, [r3, #0]

		 }

		if(SMS_NOTIF)
 8000e92:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <main+0x70>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d0f0      	beq.n	8000e7c <main+0x2c>
         {
        	 get_raw_sms();
 8000e9a:	f7ff fd25 	bl	80008e8 <get_raw_sms>
        	 get_sms_msg();
 8000e9e:	f7ff fd4d 	bl	800093c <get_sms_msg>
        	 get_sender_number();
 8000ea2:	f7ff fd75 	bl	8000990 <get_sender_number>

        	 /*Process command*/
        	 process_cmd();
 8000ea6:	f000 f80d 	bl	8000ec4 <process_cmd>

        	 SMS_NOTIF = 0;
 8000eaa:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <main+0x70>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	701a      	strb	r2, [r3, #0]
		poll_for_notifs();
 8000eb0:	e7e4      	b.n	8000e7c <main+0x2c>
 8000eb2:	bf00      	nop
 8000eb4:	20000000 	.word	0x20000000
 8000eb8:	2000000c 	.word	0x2000000c
 8000ebc:	200001d7 	.word	0x200001d7
 8000ec0:	200001d6 	.word	0x200001d6

08000ec4 <process_cmd>:

}


static void process_cmd(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
	char * ptr1 =  strstr(sms_msg,"LEDON");
 8000eca:	490e      	ldr	r1, [pc, #56]	; (8000f04 <process_cmd+0x40>)
 8000ecc:	480e      	ldr	r0, [pc, #56]	; (8000f08 <process_cmd+0x44>)
 8000ece:	f000 fb94 	bl	80015fa <strstr>
 8000ed2:	6078      	str	r0, [r7, #4]
	if(ptr1 != NULL)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d003      	beq.n	8000ee2 <process_cmd+0x1e>
	{
		light_on();
 8000eda:	f7ff ff99 	bl	8000e10 <light_on>
		flush_buffer();
 8000ede:	f7ff fe83 	bl	8000be8 <flush_buffer>
	}

	char * ptr2 =  strstr(sms_msg,"LEDOFF");
 8000ee2:	490a      	ldr	r1, [pc, #40]	; (8000f0c <process_cmd+0x48>)
 8000ee4:	4808      	ldr	r0, [pc, #32]	; (8000f08 <process_cmd+0x44>)
 8000ee6:	f000 fb88 	bl	80015fa <strstr>
 8000eea:	6038      	str	r0, [r7, #0]
	if(ptr2 != NULL)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d003      	beq.n	8000efa <process_cmd+0x36>
	{
		light_off();
 8000ef2:	f7ff ff9d 	bl	8000e30 <light_off>
		flush_buffer();
 8000ef6:	f7ff fe77 	bl	8000be8 <flush_buffer>
	}


}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	080027c0 	.word	0x080027c0
 8000f08:	20000190 	.word	0x20000190
 8000f0c:	080027c8 	.word	0x080027c8

08000f10 <poll_for_notifs>:

static void poll_for_notifs(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
	for(int i = 0 ; i<10; i++)
 8000f16:	2300      	movs	r3, #0
 8000f18:	607b      	str	r3, [r7, #4]
 8000f1a:	e011      	b.n	8000f40 <poll_for_notifs+0x30>
	{
		SMS_NOTIF  = a6_is_sms();
 8000f1c:	f7ff fccc 	bl	80008b8 <a6_is_sms>
 8000f20:	4603      	mov	r3, r0
 8000f22:	461a      	mov	r2, r3
 8000f24:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <poll_for_notifs+0x40>)
 8000f26:	701a      	strb	r2, [r3, #0]
		CALL_NOTIF = a6_is_call();
 8000f28:	f7ff fcae 	bl	8000888 <a6_is_call>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	461a      	mov	r2, r3
 8000f30:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <poll_for_notifs+0x44>)
 8000f32:	701a      	strb	r2, [r3, #0]
		systick_delay_ms(1);
 8000f34:	2001      	movs	r0, #1
 8000f36:	f7ff fae9 	bl	800050c <systick_delay_ms>
	for(int i = 0 ; i<10; i++)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2b09      	cmp	r3, #9
 8000f44:	ddea      	ble.n	8000f1c <poll_for_notifs+0xc>
	}

}
 8000f46:	bf00      	nop
 8000f48:	bf00      	nop
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	200001d6 	.word	0x200001d6
 8000f54:	200001d7 	.word	0x200001d7

08000f58 <alarm_callback>:

}


void alarm_callback(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0

}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
	...

08000f68 <RTC_Alarm_IRQHandler>:

void RTC_Alarm_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	/*Get the alarm interrupt source enable status*/
	if((RTC->CR & CR_ALRAIE) != 0)
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <RTC_Alarm_IRQHandler+0x38>)
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d00d      	beq.n	8000f94 <RTC_Alarm_IRQHandler+0x2c>
	{
		/*Get the pending status of the Alarm interrupt*/
		if((RTC->ISR & ISR_ALRAF) != 0)
 8000f78:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <RTC_Alarm_IRQHandler+0x38>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d007      	beq.n	8000f94 <RTC_Alarm_IRQHandler+0x2c>
		{
			/*Do something...*/
			alarm_callback();
 8000f84:	f7ff ffe8 	bl	8000f58 <alarm_callback>

			/*Clear the alarm interrupt pending bit*/
			RTC->ISR &=~(ISR_INIT);
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <RTC_Alarm_IRQHandler+0x38>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	4a04      	ldr	r2, [pc, #16]	; (8000fa0 <RTC_Alarm_IRQHandler+0x38>)
 8000f8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000f92:	60d3      	str	r3, [r2, #12]
		}
	}

	/*Clear the EXTI's flag for RTC alarm*/
	EXTI->PR = (1U<<17);
 8000f94:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <RTC_Alarm_IRQHandler+0x3c>)
 8000f96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f9a:	615a      	str	r2, [r3, #20]
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40002800 	.word	0x40002800
 8000fa4:	40013c00 	.word	0x40013c00

08000fa8 <__NVIC_EnableIRQ>:
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	db0b      	blt.n	8000fd2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	f003 021f 	and.w	r2, r3, #31
 8000fc0:	4907      	ldr	r1, [pc, #28]	; (8000fe0 <__NVIC_EnableIRQ+0x38>)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	095b      	lsrs	r3, r3, #5
 8000fc8:	2001      	movs	r0, #1
 8000fca:	fa00 f202 	lsl.w	r2, r0, r2
 8000fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	e000e100 	.word	0xe000e100

08000fe4 <rtc_init>:
static void rtc_time_config(uint32_t Format12_24, uint32_t Hours, uint32_t Minutes, uint32_t Seconds);
static void rtc_alma_config_time(uint32_t Format12_24, uint32_t Hours, uint32_t Minutes, uint32_t Seconds);
static void rtc_alma_set_mask(uint32_t Mask);

void rtc_init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	/*Enable clock access to PWR*/
	RCC->APB1ENR |= PWREN;
 8000fe8:	4b28      	ldr	r3, [pc, #160]	; (800108c <rtc_init+0xa8>)
 8000fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fec:	4a27      	ldr	r2, [pc, #156]	; (800108c <rtc_init+0xa8>)
 8000fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff2:	6413      	str	r3, [r2, #64]	; 0x40

	/*Enable Backup access to config rtc*/
	PWR->CR |= CR_DBP;
 8000ff4:	4b26      	ldr	r3, [pc, #152]	; (8001090 <rtc_init+0xac>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a25      	ldr	r2, [pc, #148]	; (8001090 <rtc_init+0xac>)
 8000ffa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ffe:	6013      	str	r3, [r2, #0]

	/*Enable Low Speed Internal (LSI) clock*/
	RCC->CSR |=CSR_LSION;
 8001000:	4b22      	ldr	r3, [pc, #136]	; (800108c <rtc_init+0xa8>)
 8001002:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001004:	4a21      	ldr	r2, [pc, #132]	; (800108c <rtc_init+0xa8>)
 8001006:	f043 0301 	orr.w	r3, r3, #1
 800100a:	6753      	str	r3, [r2, #116]	; 0x74

	/*Wait for LSI to be enabled*/
	while((RCC->CSR & CSR_LSIRDY) != CSR_LSIRDY){}
 800100c:	bf00      	nop
 800100e:	4b1f      	ldr	r3, [pc, #124]	; (800108c <rtc_init+0xa8>)
 8001010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	2b02      	cmp	r3, #2
 8001018:	d1f9      	bne.n	800100e <rtc_init+0x2a>

	/*Force backup domain to reset*/
	RCC->BDCR |=BDCR_BDRST;
 800101a:	4b1c      	ldr	r3, [pc, #112]	; (800108c <rtc_init+0xa8>)
 800101c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800101e:	4a1b      	ldr	r2, [pc, #108]	; (800108c <rtc_init+0xa8>)
 8001020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001024:	6713      	str	r3, [r2, #112]	; 0x70

	/*Release backup domain reset*/
	RCC->BDCR &=~BDCR_BDRST;
 8001026:	4b19      	ldr	r3, [pc, #100]	; (800108c <rtc_init+0xa8>)
 8001028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800102a:	4a18      	ldr	r2, [pc, #96]	; (800108c <rtc_init+0xa8>)
 800102c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001030:	6713      	str	r3, [r2, #112]	; 0x70

	/*Set RTC clock source to LSI*/
	RCC->BDCR &=~(1U<<8);
 8001032:	4b16      	ldr	r3, [pc, #88]	; (800108c <rtc_init+0xa8>)
 8001034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001036:	4a15      	ldr	r2, [pc, #84]	; (800108c <rtc_init+0xa8>)
 8001038:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800103c:	6713      	str	r3, [r2, #112]	; 0x70
	RCC->BDCR |=(1U<<9);
 800103e:	4b13      	ldr	r3, [pc, #76]	; (800108c <rtc_init+0xa8>)
 8001040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001042:	4a12      	ldr	r2, [pc, #72]	; (800108c <rtc_init+0xa8>)
 8001044:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001048:	6713      	str	r3, [r2, #112]	; 0x70

	/*Enable RTC*/
	RCC->BDCR |= RTCEN;
 800104a:	4b10      	ldr	r3, [pc, #64]	; (800108c <rtc_init+0xa8>)
 800104c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800104e:	4a0f      	ldr	r2, [pc, #60]	; (800108c <rtc_init+0xa8>)
 8001050:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001054:	6713      	str	r3, [r2, #112]	; 0x70

	/*Disable RTC registers write protection*/
	RTC->WPR = RTC_WRITE_PROTECTION_ENABLE_1;
 8001056:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <rtc_init+0xb0>)
 8001058:	22ca      	movs	r2, #202	; 0xca
 800105a:	625a      	str	r2, [r3, #36]	; 0x24
	RTC->WPR = RTC_WRITE_PROTECTION_ENABLE_2;
 800105c:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <rtc_init+0xb0>)
 800105e:	2253      	movs	r2, #83	; 0x53
 8001060:	625a      	str	r2, [r3, #36]	; 0x24


	/*Enter initialization*/
	if(rtc_init_seq() != 1)
 8001062:	f000 f947 	bl	80012f4 <rtc_init_seq>
	{
		/*Initialization error*/
	}

	/*Set hour format to AM/PM*/
	RTC->CR |= CR_FMT;
 8001066:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <rtc_init+0xb0>)
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <rtc_init+0xb0>)
 800106c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001070:	6093      	str	r3, [r2, #8]

	/*Set Asynch prescaler*/
	rtc_set_async_prescaler(RTC_ASYNCH_PREDIV);
 8001072:	207f      	movs	r0, #127	; 0x7f
 8001074:	f000 f8f2 	bl	800125c <rtc_set_async_prescaler>

	/*Set Synch prescaler*/
	rtc_set_synch_prescaler(RTC_SYNCH_PREDIV);
 8001078:	20f9      	movs	r0, #249	; 0xf9
 800107a:	f000 f905 	bl	8001288 <rtc_set_synch_prescaler>

	/*Exit intialization mode*/
	exit_init_seq();
 800107e:	f000 f984 	bl	800138a <exit_init_seq>

	/*Enable RTC registers write protection*/
	RTC->WPR = 0xFF;
 8001082:	4b04      	ldr	r3, [pc, #16]	; (8001094 <rtc_init+0xb0>)
 8001084:	22ff      	movs	r2, #255	; 0xff
 8001086:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40023800 	.word	0x40023800
 8001090:	40007000 	.word	0x40007000
 8001094:	40002800 	.word	0x40002800

08001098 <rtc_alarm_init>:

void rtc_alarm_init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	/*Disable RTC registers write protection*/
	RTC->WPR = RTC_WRITE_PROTECTION_ENABLE_1;
 800109c:	4b29      	ldr	r3, [pc, #164]	; (8001144 <rtc_alarm_init+0xac>)
 800109e:	22ca      	movs	r2, #202	; 0xca
 80010a0:	625a      	str	r2, [r3, #36]	; 0x24
	RTC->WPR = RTC_WRITE_PROTECTION_ENABLE_2;
 80010a2:	4b28      	ldr	r3, [pc, #160]	; (8001144 <rtc_alarm_init+0xac>)
 80010a4:	2253      	movs	r2, #83	; 0x53
 80010a6:	625a      	str	r2, [r3, #36]	; 0x24

	/*Enter initialization*/
	if(rtc_init_seq() != 1)
 80010a8:	f000 f924 	bl	80012f4 <rtc_init_seq>
	{
		/*Initialization error*/
	}

    /*Set date : Friday 14th, January 2022*/
	rtc_date_config(WEEKDAY_FRIDAY,0x14,MONTH_JANUARY,0x22);
 80010ac:	2322      	movs	r3, #34	; 0x22
 80010ae:	2201      	movs	r2, #1
 80010b0:	2114      	movs	r1, #20
 80010b2:	2005      	movs	r0, #5
 80010b4:	f000 f85e 	bl	8001174 <rtc_date_config>

	/*Set time : 07:04: 00 PM*/
	rtc_time_config(TIME_FORMAT_PM,0x07,0x04,0x00);
 80010b8:	2300      	movs	r3, #0
 80010ba:	2204      	movs	r2, #4
 80010bc:	2107      	movs	r1, #7
 80010be:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80010c2:	f000 f87f 	bl	80011c4 <rtc_time_config>

	/*Set alarm :  07:04:10*/

	/*RTC Alarm Generation: Alarm on Hours, Minutes and Seconds*/
	rtc_alma_config_time(TIME_FORMAT_PM,0x07,0x04,0x10);
 80010c6:	2310      	movs	r3, #16
 80010c8:	2204      	movs	r2, #4
 80010ca:	2107      	movs	r1, #7
 80010cc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80010d0:	f000 f89e 	bl	8001210 <rtc_alma_config_time>

    /*Ignore weekday*/
	rtc_alma_set_mask(ALMA_MASK_DATEWEEKDAY);
 80010d4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80010d8:	f000 f838 	bl	800114c <rtc_alma_set_mask>

	/*Enable alarm*/
	RTC->CR |=CR_ALRAE;
 80010dc:	4b19      	ldr	r3, [pc, #100]	; (8001144 <rtc_alarm_init+0xac>)
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	4a18      	ldr	r2, [pc, #96]	; (8001144 <rtc_alarm_init+0xac>)
 80010e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e6:	6093      	str	r3, [r2, #8]

	/*Enable IT Alarm*/
	RTC->CR |= CR_ALRAIE;
 80010e8:	4b16      	ldr	r3, [pc, #88]	; (8001144 <rtc_alarm_init+0xac>)
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	4a15      	ldr	r2, [pc, #84]	; (8001144 <rtc_alarm_init+0xac>)
 80010ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010f2:	6093      	str	r3, [r2, #8]

	/*Clear the alarm interrupt pending bit*/
	RTC->ISR &=~ISR_ALRAF;
 80010f4:	4b13      	ldr	r3, [pc, #76]	; (8001144 <rtc_alarm_init+0xac>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	4a12      	ldr	r2, [pc, #72]	; (8001144 <rtc_alarm_init+0xac>)
 80010fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010fe:	60d3      	str	r3, [r2, #12]


	/*Enable IT alarm*/
	EXTI->IMR |=(1U<<17);
 8001100:	4b11      	ldr	r3, [pc, #68]	; (8001148 <rtc_alarm_init+0xb0>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a10      	ldr	r2, [pc, #64]	; (8001148 <rtc_alarm_init+0xb0>)
 8001106:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800110a:	6013      	str	r3, [r2, #0]
	EXTI->RTSR |=(1U<<17);
 800110c:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <rtc_alarm_init+0xb0>)
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	4a0d      	ldr	r2, [pc, #52]	; (8001148 <rtc_alarm_init+0xb0>)
 8001112:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001116:	6093      	str	r3, [r2, #8]

	/*Configure RTC alarm interrupt*/

	/*Enable rtc alarm interrupt in NVIC*/
	NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001118:	2029      	movs	r0, #41	; 0x29
 800111a:	f7ff ff45 	bl	8000fa8 <__NVIC_EnableIRQ>


	/*Exit intialization mode*/
	RTC->ISR &=~ISR_INIT;
 800111e:	4b09      	ldr	r3, [pc, #36]	; (8001144 <rtc_alarm_init+0xac>)
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	4a08      	ldr	r2, [pc, #32]	; (8001144 <rtc_alarm_init+0xac>)
 8001124:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001128:	60d3      	str	r3, [r2, #12]

	/*Clear RSF flag*/
	RTC->ISR &=~ISR_RSF;
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <rtc_alarm_init+0xac>)
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	4a05      	ldr	r2, [pc, #20]	; (8001144 <rtc_alarm_init+0xac>)
 8001130:	f023 0320 	bic.w	r3, r3, #32
 8001134:	60d3      	str	r3, [r2, #12]

	if(	exit_init_seq() != 1)
 8001136:	f000 f928 	bl	800138a <exit_init_seq>
	{
		//process error
	}
	/*Enable RTC registers write protection*/
	RTC->WPR = 0xFF;
 800113a:	4b02      	ldr	r3, [pc, #8]	; (8001144 <rtc_alarm_init+0xac>)
 800113c:	22ff      	movs	r2, #255	; 0xff
 800113e:	625a      	str	r2, [r3, #36]	; 0x24


}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40002800 	.word	0x40002800
 8001148:	40013c00 	.word	0x40013c00

0800114c <rtc_alma_set_mask>:


static void rtc_alma_set_mask(uint32_t Mask)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RTC->ALRMAR, RTC_ALRMAR_MSK4 | RTC_ALRMAR_MSK3 | RTC_ALRMAR_MSK2 | RTC_ALRMAR_MSK1, Mask);
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <rtc_alma_set_mask+0x24>)
 8001156:	69db      	ldr	r3, [r3, #28]
 8001158:	f003 327f 	and.w	r2, r3, #2139062143	; 0x7f7f7f7f
 800115c:	4904      	ldr	r1, [pc, #16]	; (8001170 <rtc_alma_set_mask+0x24>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4313      	orrs	r3, r2
 8001162:	61cb      	str	r3, [r1, #28]
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	40002800 	.word	0x40002800

08001174 <rtc_date_config>:


static void rtc_date_config(uint32_t WeekDay, uint32_t Day, uint32_t Month, uint32_t Year)
{
 8001174:	b490      	push	{r4, r7}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
 8001180:	603b      	str	r3, [r7, #0]
  register uint32_t temp = 0U;
 8001182:	2400      	movs	r4, #0

  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	035a      	lsls	r2, r3, #13
         (((Year & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | ((Year & 0x0FU) << RTC_DR_YU_Pos))   | \
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	041b      	lsls	r3, r3, #16
 800118c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 8001190:	431a      	orrs	r2, r3
         (((Month & 0xF0U) << (RTC_DR_MT_Pos - 4U)) | ((Month & 0x0FU) << RTC_DR_MU_Pos)) | \
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	021b      	lsls	r3, r3, #8
 8001196:	b29b      	uxth	r3, r3
         (((Year & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | ((Year & 0x0FU) << RTC_DR_YU_Pos))   | \
 8001198:	431a      	orrs	r2, r3
         (((Day & 0xF0U) << (RTC_DR_DT_Pos - 4U)) | ((Day & 0x0FU) << RTC_DR_DU_Pos));
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	b2db      	uxtb	r3, r3
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 800119e:	ea42 0403 	orr.w	r4, r2, r3

  MODIFY_REG(RTC->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 80011a2:	4b06      	ldr	r3, [pc, #24]	; (80011bc <rtc_date_config+0x48>)
 80011a4:	685a      	ldr	r2, [r3, #4]
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <rtc_date_config+0x4c>)
 80011a8:	4013      	ands	r3, r2
 80011aa:	4a04      	ldr	r2, [pc, #16]	; (80011bc <rtc_date_config+0x48>)
 80011ac:	4323      	orrs	r3, r4
 80011ae:	6053      	str	r3, [r2, #4]
}
 80011b0:	bf00      	nop
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc90      	pop	{r4, r7}
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	40002800 	.word	0x40002800
 80011c0:	ff0000c0 	.word	0xff0000c0

080011c4 <rtc_time_config>:



static void rtc_time_config(uint32_t Format12_24, uint32_t Hours, uint32_t Minutes, uint32_t Seconds)
{
 80011c4:	b490      	push	{r4, r7}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
 80011d0:	603b      	str	r3, [r7, #0]
  register uint32_t temp = 0U;
 80011d2:	2400      	movs	r4, #0

  temp = Format12_24                                                                                    | \
         (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	041b      	lsls	r3, r3, #16
 80011d8:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
  temp = Format12_24                                                                                    | \
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	431a      	orrs	r2, r3
         (((Minutes & 0xF0U) << (RTC_TR_MNT_Pos - 4U)) | ((Minutes & 0x0FU) << RTC_TR_MNU_Pos)) | \
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	021b      	lsls	r3, r3, #8
 80011e4:	b29b      	uxth	r3, r3
         (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
 80011e6:	431a      	orrs	r2, r3
         (((Seconds & 0xF0U) << (RTC_TR_ST_Pos - 4U)) | ((Seconds & 0x0FU) << RTC_TR_SU_Pos));
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	b2db      	uxtb	r3, r3
  temp = Format12_24                                                                                    | \
 80011ec:	ea42 0403 	orr.w	r4, r2, r3
  MODIFY_REG(RTC->TR, (
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <rtc_time_config+0x48>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
 80011f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80011fc:	4a03      	ldr	r2, [pc, #12]	; (800120c <rtc_time_config+0x48>)
 80011fe:	4323      	orrs	r3, r4
 8001200:	6013      	str	r3, [r2, #0]
		  RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
}
 8001202:	bf00      	nop
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bc90      	pop	{r4, r7}
 800120a:	4770      	bx	lr
 800120c:	40002800 	.word	0x40002800

08001210 <rtc_alma_config_time>:



static void rtc_alma_config_time(uint32_t Format12_24, uint32_t Hours, uint32_t Minutes, uint32_t Seconds)
{
 8001210:	b490      	push	{r4, r7}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
 800121c:	603b      	str	r3, [r7, #0]
  register uint32_t temp = 0U;
 800121e:	2400      	movs	r4, #0

  temp = Format12_24 | (((Hours & 0xF0U) << (RTC_ALRMAR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_ALRMAR_HU_Pos))    | \
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	041b      	lsls	r3, r3, #16
 8001224:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	431a      	orrs	r2, r3
         (((Minutes & 0xF0U) << (RTC_ALRMAR_MNT_Pos - 4U)) | ((Minutes & 0x0FU) << RTC_ALRMAR_MNU_Pos)) | \
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	021b      	lsls	r3, r3, #8
 8001230:	b29b      	uxth	r3, r3
  temp = Format12_24 | (((Hours & 0xF0U) << (RTC_ALRMAR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_ALRMAR_HU_Pos))    | \
 8001232:	431a      	orrs	r2, r3
         (((Seconds & 0xF0U) << (RTC_ALRMAR_ST_Pos - 4U)) | ((Seconds & 0x0FU) << RTC_ALRMAR_SU_Pos));
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	b2db      	uxtb	r3, r3
  temp = Format12_24 | (((Hours & 0xF0U) << (RTC_ALRMAR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_ALRMAR_HU_Pos))    | \
 8001238:	ea42 0403 	orr.w	r4, r2, r3

  MODIFY_REG(RTC->ALRMAR, RTC_ALRMAR_PM | RTC_ALRMAR_HT | RTC_ALRMAR_HU | RTC_ALRMAR_MNT | RTC_ALRMAR_MNU | RTC_ALRMAR_ST | RTC_ALRMAR_SU, temp);
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <rtc_alma_config_time+0x48>)
 800123e:	69db      	ldr	r3, [r3, #28]
 8001240:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
 8001244:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001248:	4a03      	ldr	r2, [pc, #12]	; (8001258 <rtc_alma_config_time+0x48>)
 800124a:	4323      	orrs	r3, r4
 800124c:	61d3      	str	r3, [r2, #28]
}
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bc90      	pop	{r4, r7}
 8001256:	4770      	bx	lr
 8001258:	40002800 	.word	0x40002800

0800125c <rtc_set_async_prescaler>:

static void rtc_set_async_prescaler(uint32_t AsynchPrescaler)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]

	MODIFY_REG(RTC->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 8001264:	4b07      	ldr	r3, [pc, #28]	; (8001284 <rtc_set_async_prescaler+0x28>)
 8001266:	691b      	ldr	r3, [r3, #16]
 8001268:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	041b      	lsls	r3, r3, #16
 8001270:	4904      	ldr	r1, [pc, #16]	; (8001284 <rtc_set_async_prescaler+0x28>)
 8001272:	4313      	orrs	r3, r2
 8001274:	610b      	str	r3, [r1, #16]

}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	40002800 	.word	0x40002800

08001288 <rtc_set_synch_prescaler>:

static void rtc_set_synch_prescaler(uint32_t SynchPrescaler)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RTC->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 8001290:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <rtc_set_synch_prescaler+0x28>)
 8001292:	691b      	ldr	r3, [r3, #16]
 8001294:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001298:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800129c:	4904      	ldr	r1, [pc, #16]	; (80012b0 <rtc_set_synch_prescaler+0x28>)
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	610b      	str	r3, [r1, #16]
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	40002800 	.word	0x40002800

080012b4 <rtc_enable_init_mode>:

static void rtc_enable_init_mode(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
	RTC->ISR = RTC_INIT_MASK;
 80012b8:	4b04      	ldr	r3, [pc, #16]	; (80012cc <rtc_enable_init_mode+0x18>)
 80012ba:	f04f 32ff 	mov.w	r2, #4294967295
 80012be:	60da      	str	r2, [r3, #12]
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	40002800 	.word	0x40002800

080012d0 <rtc_isActiveflag_init>:

static uint32_t rtc_isActiveflag_init(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
	return (READ_BIT(RTC->ISR,RTC_ISR_INITF) ==  (RTC_ISR_INITF));
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <rtc_isActiveflag_init+0x20>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012dc:	2b40      	cmp	r3, #64	; 0x40
 80012de:	bf0c      	ite	eq
 80012e0:	2301      	moveq	r3, #1
 80012e2:	2300      	movne	r3, #0
 80012e4:	b2db      	uxtb	r3, r3
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	40002800 	.word	0x40002800

080012f4 <rtc_init_seq>:

static uint32_t rtc_init_seq(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
	/*Set initialization mode*/
	rtc_enable_init_mode();
 80012f8:	f7ff ffdc 	bl	80012b4 <rtc_enable_init_mode>

	/*Check if initialization mode is set*/
	while(rtc_isActiveflag_init() != 1){}
 80012fc:	bf00      	nop
 80012fe:	f7ff ffe7 	bl	80012d0 <rtc_isActiveflag_init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b01      	cmp	r3, #1
 8001306:	d1fa      	bne.n	80012fe <rtc_init_seq+0xa>

	return 1;
 8001308:	2301      	movs	r3, #1
}
 800130a:	4618      	mov	r0, r3
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <rtc_exit_init_mode>:



static void rtc_exit_init_mode(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
	RTC->ISR = 0;
 8001314:	4b03      	ldr	r3, [pc, #12]	; (8001324 <rtc_exit_init_mode+0x14>)
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]

}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	40002800 	.word	0x40002800

08001328 <rtc_clearflag_rs>:


void rtc_clearflag_rs(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
    WRITE_REG(RTC->ISR, (~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTC->ISR & RTC_ISR_INIT)));
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <rtc_clearflag_rs+0x20>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001334:	4a04      	ldr	r2, [pc, #16]	; (8001348 <rtc_clearflag_rs+0x20>)
 8001336:	f063 03a0 	orn	r3, r3, #160	; 0xa0
 800133a:	60d3      	str	r3, [r2, #12]

}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40002800 	.word	0x40002800

0800134c <rtc_isActiveflag_rs>:

static uint32_t  rtc_isActiveflag_rs(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
    return (READ_BIT(RTC->ISR, RTC_ISR_RSF) == (RTC_ISR_RSF));
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <rtc_isActiveflag_rs+0x20>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	f003 0320 	and.w	r3, r3, #32
 8001358:	2b20      	cmp	r3, #32
 800135a:	bf0c      	ite	eq
 800135c:	2301      	moveq	r3, #1
 800135e:	2300      	movne	r3, #0
 8001360:	b2db      	uxtb	r3, r3

}
 8001362:	4618      	mov	r0, r3
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	40002800 	.word	0x40002800

08001370 <wait_for_synchro>:
static uint32_t wait_for_synchro(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
	/*Clear RSF flag*/
	rtc_clearflag_rs();
 8001374:	f7ff ffd8 	bl	8001328 <rtc_clearflag_rs>

	/*Wait for registers to be synched*/
	while(rtc_isActiveflag_rs() != 1)
 8001378:	bf00      	nop
 800137a:	f7ff ffe7 	bl	800134c <rtc_isActiveflag_rs>
 800137e:	4603      	mov	r3, r0
 8001380:	2b01      	cmp	r3, #1
 8001382:	d1fa      	bne.n	800137a <wait_for_synchro+0xa>
	{

	}

	return 0;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	bd80      	pop	{r7, pc}

0800138a <exit_init_seq>:

static uint32_t exit_init_seq(void)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	af00      	add	r7, sp, #0
	/*Disable rtc init mode*/
	rtc_exit_init_mode();
 800138e:	f7ff ffbf 	bl	8001310 <rtc_exit_init_mode>

	/*Wait for registers to be synchronised*/
	return (wait_for_synchro());
 8001392:	f7ff ffed 	bl	8001370 <wait_for_synchro>
 8001396:	4603      	mov	r3, r0

}
 8001398:	4618      	mov	r0, r3
 800139a:	bd80      	pop	{r7, pc}

0800139c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
 80013ac:	e00a      	b.n	80013c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013ae:	f3af 8000 	nop.w
 80013b2:	4601      	mov	r1, r0
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	1c5a      	adds	r2, r3, #1
 80013b8:	60ba      	str	r2, [r7, #8]
 80013ba:	b2ca      	uxtb	r2, r1
 80013bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	3301      	adds	r3, #1
 80013c2:	617b      	str	r3, [r7, #20]
 80013c4:	697a      	ldr	r2, [r7, #20]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	dbf0      	blt.n	80013ae <_read+0x12>
	}

return len;
 80013cc:	687b      	ldr	r3, [r7, #4]
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3718      	adds	r7, #24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b086      	sub	sp, #24
 80013da:	af00      	add	r7, sp, #0
 80013dc:	60f8      	str	r0, [r7, #12]
 80013de:	60b9      	str	r1, [r7, #8]
 80013e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]
 80013e6:	e009      	b.n	80013fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	1c5a      	adds	r2, r3, #1
 80013ec:	60ba      	str	r2, [r7, #8]
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7fe ff45 	bl	8000280 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	3301      	adds	r3, #1
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	697a      	ldr	r2, [r7, #20]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	429a      	cmp	r2, r3
 8001402:	dbf1      	blt.n	80013e8 <_write+0x12>
	}
	return len;
 8001404:	687b      	ldr	r3, [r7, #4]
}
 8001406:	4618      	mov	r0, r3
 8001408:	3718      	adds	r7, #24
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <_close>:

int _close(int file)
{
 800140e:	b480      	push	{r7}
 8001410:	b083      	sub	sp, #12
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
	return -1;
 8001416:	f04f 33ff 	mov.w	r3, #4294967295
}
 800141a:	4618      	mov	r0, r3
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001426:	b480      	push	{r7}
 8001428:	b083      	sub	sp, #12
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
 800142e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001436:	605a      	str	r2, [r3, #4]
	return 0;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <_isatty>:

int _isatty(int file)
{
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
	return 1;
 800144e:	2301      	movs	r3, #1
}
 8001450:	4618      	mov	r0, r3
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
	return 0;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3714      	adds	r7, #20
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
	...

08001478 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001480:	4a14      	ldr	r2, [pc, #80]	; (80014d4 <_sbrk+0x5c>)
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <_sbrk+0x60>)
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800148c:	4b13      	ldr	r3, [pc, #76]	; (80014dc <_sbrk+0x64>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d102      	bne.n	800149a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001494:	4b11      	ldr	r3, [pc, #68]	; (80014dc <_sbrk+0x64>)
 8001496:	4a12      	ldr	r2, [pc, #72]	; (80014e0 <_sbrk+0x68>)
 8001498:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800149a:	4b10      	ldr	r3, [pc, #64]	; (80014dc <_sbrk+0x64>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4413      	add	r3, r2
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d207      	bcs.n	80014b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014a8:	f000 f846 	bl	8001538 <__errno>
 80014ac:	4603      	mov	r3, r0
 80014ae:	220c      	movs	r2, #12
 80014b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014b2:	f04f 33ff 	mov.w	r3, #4294967295
 80014b6:	e009      	b.n	80014cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014b8:	4b08      	ldr	r3, [pc, #32]	; (80014dc <_sbrk+0x64>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014be:	4b07      	ldr	r3, [pc, #28]	; (80014dc <_sbrk+0x64>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	4a05      	ldr	r2, [pc, #20]	; (80014dc <_sbrk+0x64>)
 80014c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ca:	68fb      	ldr	r3, [r7, #12]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3718      	adds	r7, #24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20020000 	.word	0x20020000
 80014d8:	00000400 	.word	0x00000400
 80014dc:	200005d8 	.word	0x200005d8
 80014e0:	20000750 	.word	0x20000750

080014e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014e4:	480d      	ldr	r0, [pc, #52]	; (800151c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014e6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80014e8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014ec:	480c      	ldr	r0, [pc, #48]	; (8001520 <LoopForever+0x6>)
  ldr r1, =_edata
 80014ee:	490d      	ldr	r1, [pc, #52]	; (8001524 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014f0:	4a0d      	ldr	r2, [pc, #52]	; (8001528 <LoopForever+0xe>)
  movs r3, #0
 80014f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f4:	e002      	b.n	80014fc <LoopCopyDataInit>

080014f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014fa:	3304      	adds	r3, #4

080014fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001500:	d3f9      	bcc.n	80014f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001502:	4a0a      	ldr	r2, [pc, #40]	; (800152c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001504:	4c0a      	ldr	r4, [pc, #40]	; (8001530 <LoopForever+0x16>)
  movs r3, #0
 8001506:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001508:	e001      	b.n	800150e <LoopFillZerobss>

0800150a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800150a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800150c:	3204      	adds	r2, #4

0800150e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800150e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001510:	d3fb      	bcc.n	800150a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001512:	f000 f817 	bl	8001544 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001516:	f7ff fc9b 	bl	8000e50 <main>

0800151a <LoopForever>:

LoopForever:
    b LoopForever
 800151a:	e7fe      	b.n	800151a <LoopForever>
  ldr   r0, =_estack
 800151c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001520:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001524:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001528:	080028a8 	.word	0x080028a8
  ldr r2, =_sbss
 800152c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001530:	20000750 	.word	0x20000750

08001534 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001534:	e7fe      	b.n	8001534 <ADC_IRQHandler>
	...

08001538 <__errno>:
 8001538:	4b01      	ldr	r3, [pc, #4]	; (8001540 <__errno+0x8>)
 800153a:	6818      	ldr	r0, [r3, #0]
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	2000002c 	.word	0x2000002c

08001544 <__libc_init_array>:
 8001544:	b570      	push	{r4, r5, r6, lr}
 8001546:	4d0d      	ldr	r5, [pc, #52]	; (800157c <__libc_init_array+0x38>)
 8001548:	4c0d      	ldr	r4, [pc, #52]	; (8001580 <__libc_init_array+0x3c>)
 800154a:	1b64      	subs	r4, r4, r5
 800154c:	10a4      	asrs	r4, r4, #2
 800154e:	2600      	movs	r6, #0
 8001550:	42a6      	cmp	r6, r4
 8001552:	d109      	bne.n	8001568 <__libc_init_array+0x24>
 8001554:	4d0b      	ldr	r5, [pc, #44]	; (8001584 <__libc_init_array+0x40>)
 8001556:	4c0c      	ldr	r4, [pc, #48]	; (8001588 <__libc_init_array+0x44>)
 8001558:	f000 ffa4 	bl	80024a4 <_init>
 800155c:	1b64      	subs	r4, r4, r5
 800155e:	10a4      	asrs	r4, r4, #2
 8001560:	2600      	movs	r6, #0
 8001562:	42a6      	cmp	r6, r4
 8001564:	d105      	bne.n	8001572 <__libc_init_array+0x2e>
 8001566:	bd70      	pop	{r4, r5, r6, pc}
 8001568:	f855 3b04 	ldr.w	r3, [r5], #4
 800156c:	4798      	blx	r3
 800156e:	3601      	adds	r6, #1
 8001570:	e7ee      	b.n	8001550 <__libc_init_array+0xc>
 8001572:	f855 3b04 	ldr.w	r3, [r5], #4
 8001576:	4798      	blx	r3
 8001578:	3601      	adds	r6, #1
 800157a:	e7f2      	b.n	8001562 <__libc_init_array+0x1e>
 800157c:	080028a0 	.word	0x080028a0
 8001580:	080028a0 	.word	0x080028a0
 8001584:	080028a0 	.word	0x080028a0
 8001588:	080028a4 	.word	0x080028a4

0800158c <memset>:
 800158c:	4402      	add	r2, r0
 800158e:	4603      	mov	r3, r0
 8001590:	4293      	cmp	r3, r2
 8001592:	d100      	bne.n	8001596 <memset+0xa>
 8001594:	4770      	bx	lr
 8001596:	f803 1b01 	strb.w	r1, [r3], #1
 800159a:	e7f9      	b.n	8001590 <memset+0x4>

0800159c <iprintf>:
 800159c:	b40f      	push	{r0, r1, r2, r3}
 800159e:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <iprintf+0x2c>)
 80015a0:	b513      	push	{r0, r1, r4, lr}
 80015a2:	681c      	ldr	r4, [r3, #0]
 80015a4:	b124      	cbz	r4, 80015b0 <iprintf+0x14>
 80015a6:	69a3      	ldr	r3, [r4, #24]
 80015a8:	b913      	cbnz	r3, 80015b0 <iprintf+0x14>
 80015aa:	4620      	mov	r0, r4
 80015ac:	f000 f894 	bl	80016d8 <__sinit>
 80015b0:	ab05      	add	r3, sp, #20
 80015b2:	9a04      	ldr	r2, [sp, #16]
 80015b4:	68a1      	ldr	r1, [r4, #8]
 80015b6:	9301      	str	r3, [sp, #4]
 80015b8:	4620      	mov	r0, r4
 80015ba:	f000 f9b1 	bl	8001920 <_vfiprintf_r>
 80015be:	b002      	add	sp, #8
 80015c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80015c4:	b004      	add	sp, #16
 80015c6:	4770      	bx	lr
 80015c8:	2000002c 	.word	0x2000002c

080015cc <strcat>:
 80015cc:	b510      	push	{r4, lr}
 80015ce:	4602      	mov	r2, r0
 80015d0:	7814      	ldrb	r4, [r2, #0]
 80015d2:	4613      	mov	r3, r2
 80015d4:	3201      	adds	r2, #1
 80015d6:	2c00      	cmp	r4, #0
 80015d8:	d1fa      	bne.n	80015d0 <strcat+0x4>
 80015da:	3b01      	subs	r3, #1
 80015dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80015e0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80015e4:	2a00      	cmp	r2, #0
 80015e6:	d1f9      	bne.n	80015dc <strcat+0x10>
 80015e8:	bd10      	pop	{r4, pc}

080015ea <strcpy>:
 80015ea:	4603      	mov	r3, r0
 80015ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 80015f0:	f803 2b01 	strb.w	r2, [r3], #1
 80015f4:	2a00      	cmp	r2, #0
 80015f6:	d1f9      	bne.n	80015ec <strcpy+0x2>
 80015f8:	4770      	bx	lr

080015fa <strstr>:
 80015fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015fc:	780c      	ldrb	r4, [r1, #0]
 80015fe:	b164      	cbz	r4, 800161a <strstr+0x20>
 8001600:	4603      	mov	r3, r0
 8001602:	781a      	ldrb	r2, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	1c5e      	adds	r6, r3, #1
 8001608:	b90a      	cbnz	r2, 800160e <strstr+0x14>
 800160a:	4610      	mov	r0, r2
 800160c:	e005      	b.n	800161a <strstr+0x20>
 800160e:	4294      	cmp	r4, r2
 8001610:	d108      	bne.n	8001624 <strstr+0x2a>
 8001612:	460d      	mov	r5, r1
 8001614:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8001618:	b902      	cbnz	r2, 800161c <strstr+0x22>
 800161a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800161c:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8001620:	4297      	cmp	r7, r2
 8001622:	d0f7      	beq.n	8001614 <strstr+0x1a>
 8001624:	4633      	mov	r3, r6
 8001626:	e7ec      	b.n	8001602 <strstr+0x8>

08001628 <std>:
 8001628:	2300      	movs	r3, #0
 800162a:	b510      	push	{r4, lr}
 800162c:	4604      	mov	r4, r0
 800162e:	e9c0 3300 	strd	r3, r3, [r0]
 8001632:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001636:	6083      	str	r3, [r0, #8]
 8001638:	8181      	strh	r1, [r0, #12]
 800163a:	6643      	str	r3, [r0, #100]	; 0x64
 800163c:	81c2      	strh	r2, [r0, #14]
 800163e:	6183      	str	r3, [r0, #24]
 8001640:	4619      	mov	r1, r3
 8001642:	2208      	movs	r2, #8
 8001644:	305c      	adds	r0, #92	; 0x5c
 8001646:	f7ff ffa1 	bl	800158c <memset>
 800164a:	4b05      	ldr	r3, [pc, #20]	; (8001660 <std+0x38>)
 800164c:	6263      	str	r3, [r4, #36]	; 0x24
 800164e:	4b05      	ldr	r3, [pc, #20]	; (8001664 <std+0x3c>)
 8001650:	62a3      	str	r3, [r4, #40]	; 0x28
 8001652:	4b05      	ldr	r3, [pc, #20]	; (8001668 <std+0x40>)
 8001654:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001656:	4b05      	ldr	r3, [pc, #20]	; (800166c <std+0x44>)
 8001658:	6224      	str	r4, [r4, #32]
 800165a:	6323      	str	r3, [r4, #48]	; 0x30
 800165c:	bd10      	pop	{r4, pc}
 800165e:	bf00      	nop
 8001660:	08001ec9 	.word	0x08001ec9
 8001664:	08001eeb 	.word	0x08001eeb
 8001668:	08001f23 	.word	0x08001f23
 800166c:	08001f47 	.word	0x08001f47

08001670 <_cleanup_r>:
 8001670:	4901      	ldr	r1, [pc, #4]	; (8001678 <_cleanup_r+0x8>)
 8001672:	f000 b8af 	b.w	80017d4 <_fwalk_reent>
 8001676:	bf00      	nop
 8001678:	08002221 	.word	0x08002221

0800167c <__sfmoreglue>:
 800167c:	b570      	push	{r4, r5, r6, lr}
 800167e:	1e4a      	subs	r2, r1, #1
 8001680:	2568      	movs	r5, #104	; 0x68
 8001682:	4355      	muls	r5, r2
 8001684:	460e      	mov	r6, r1
 8001686:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800168a:	f000 f8c5 	bl	8001818 <_malloc_r>
 800168e:	4604      	mov	r4, r0
 8001690:	b140      	cbz	r0, 80016a4 <__sfmoreglue+0x28>
 8001692:	2100      	movs	r1, #0
 8001694:	e9c0 1600 	strd	r1, r6, [r0]
 8001698:	300c      	adds	r0, #12
 800169a:	60a0      	str	r0, [r4, #8]
 800169c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80016a0:	f7ff ff74 	bl	800158c <memset>
 80016a4:	4620      	mov	r0, r4
 80016a6:	bd70      	pop	{r4, r5, r6, pc}

080016a8 <__sfp_lock_acquire>:
 80016a8:	4801      	ldr	r0, [pc, #4]	; (80016b0 <__sfp_lock_acquire+0x8>)
 80016aa:	f000 b8b3 	b.w	8001814 <__retarget_lock_acquire_recursive>
 80016ae:	bf00      	nop
 80016b0:	20000748 	.word	0x20000748

080016b4 <__sfp_lock_release>:
 80016b4:	4801      	ldr	r0, [pc, #4]	; (80016bc <__sfp_lock_release+0x8>)
 80016b6:	f000 b8ae 	b.w	8001816 <__retarget_lock_release_recursive>
 80016ba:	bf00      	nop
 80016bc:	20000748 	.word	0x20000748

080016c0 <__sinit_lock_acquire>:
 80016c0:	4801      	ldr	r0, [pc, #4]	; (80016c8 <__sinit_lock_acquire+0x8>)
 80016c2:	f000 b8a7 	b.w	8001814 <__retarget_lock_acquire_recursive>
 80016c6:	bf00      	nop
 80016c8:	20000743 	.word	0x20000743

080016cc <__sinit_lock_release>:
 80016cc:	4801      	ldr	r0, [pc, #4]	; (80016d4 <__sinit_lock_release+0x8>)
 80016ce:	f000 b8a2 	b.w	8001816 <__retarget_lock_release_recursive>
 80016d2:	bf00      	nop
 80016d4:	20000743 	.word	0x20000743

080016d8 <__sinit>:
 80016d8:	b510      	push	{r4, lr}
 80016da:	4604      	mov	r4, r0
 80016dc:	f7ff fff0 	bl	80016c0 <__sinit_lock_acquire>
 80016e0:	69a3      	ldr	r3, [r4, #24]
 80016e2:	b11b      	cbz	r3, 80016ec <__sinit+0x14>
 80016e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016e8:	f7ff bff0 	b.w	80016cc <__sinit_lock_release>
 80016ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80016f0:	6523      	str	r3, [r4, #80]	; 0x50
 80016f2:	4b13      	ldr	r3, [pc, #76]	; (8001740 <__sinit+0x68>)
 80016f4:	4a13      	ldr	r2, [pc, #76]	; (8001744 <__sinit+0x6c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80016fa:	42a3      	cmp	r3, r4
 80016fc:	bf04      	itt	eq
 80016fe:	2301      	moveq	r3, #1
 8001700:	61a3      	streq	r3, [r4, #24]
 8001702:	4620      	mov	r0, r4
 8001704:	f000 f820 	bl	8001748 <__sfp>
 8001708:	6060      	str	r0, [r4, #4]
 800170a:	4620      	mov	r0, r4
 800170c:	f000 f81c 	bl	8001748 <__sfp>
 8001710:	60a0      	str	r0, [r4, #8]
 8001712:	4620      	mov	r0, r4
 8001714:	f000 f818 	bl	8001748 <__sfp>
 8001718:	2200      	movs	r2, #0
 800171a:	60e0      	str	r0, [r4, #12]
 800171c:	2104      	movs	r1, #4
 800171e:	6860      	ldr	r0, [r4, #4]
 8001720:	f7ff ff82 	bl	8001628 <std>
 8001724:	68a0      	ldr	r0, [r4, #8]
 8001726:	2201      	movs	r2, #1
 8001728:	2109      	movs	r1, #9
 800172a:	f7ff ff7d 	bl	8001628 <std>
 800172e:	68e0      	ldr	r0, [r4, #12]
 8001730:	2202      	movs	r2, #2
 8001732:	2112      	movs	r1, #18
 8001734:	f7ff ff78 	bl	8001628 <std>
 8001738:	2301      	movs	r3, #1
 800173a:	61a3      	str	r3, [r4, #24]
 800173c:	e7d2      	b.n	80016e4 <__sinit+0xc>
 800173e:	bf00      	nop
 8001740:	08002808 	.word	0x08002808
 8001744:	08001671 	.word	0x08001671

08001748 <__sfp>:
 8001748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800174a:	4607      	mov	r7, r0
 800174c:	f7ff ffac 	bl	80016a8 <__sfp_lock_acquire>
 8001750:	4b1e      	ldr	r3, [pc, #120]	; (80017cc <__sfp+0x84>)
 8001752:	681e      	ldr	r6, [r3, #0]
 8001754:	69b3      	ldr	r3, [r6, #24]
 8001756:	b913      	cbnz	r3, 800175e <__sfp+0x16>
 8001758:	4630      	mov	r0, r6
 800175a:	f7ff ffbd 	bl	80016d8 <__sinit>
 800175e:	3648      	adds	r6, #72	; 0x48
 8001760:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001764:	3b01      	subs	r3, #1
 8001766:	d503      	bpl.n	8001770 <__sfp+0x28>
 8001768:	6833      	ldr	r3, [r6, #0]
 800176a:	b30b      	cbz	r3, 80017b0 <__sfp+0x68>
 800176c:	6836      	ldr	r6, [r6, #0]
 800176e:	e7f7      	b.n	8001760 <__sfp+0x18>
 8001770:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001774:	b9d5      	cbnz	r5, 80017ac <__sfp+0x64>
 8001776:	4b16      	ldr	r3, [pc, #88]	; (80017d0 <__sfp+0x88>)
 8001778:	60e3      	str	r3, [r4, #12]
 800177a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800177e:	6665      	str	r5, [r4, #100]	; 0x64
 8001780:	f000 f847 	bl	8001812 <__retarget_lock_init_recursive>
 8001784:	f7ff ff96 	bl	80016b4 <__sfp_lock_release>
 8001788:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800178c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001790:	6025      	str	r5, [r4, #0]
 8001792:	61a5      	str	r5, [r4, #24]
 8001794:	2208      	movs	r2, #8
 8001796:	4629      	mov	r1, r5
 8001798:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800179c:	f7ff fef6 	bl	800158c <memset>
 80017a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80017a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80017a8:	4620      	mov	r0, r4
 80017aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017ac:	3468      	adds	r4, #104	; 0x68
 80017ae:	e7d9      	b.n	8001764 <__sfp+0x1c>
 80017b0:	2104      	movs	r1, #4
 80017b2:	4638      	mov	r0, r7
 80017b4:	f7ff ff62 	bl	800167c <__sfmoreglue>
 80017b8:	4604      	mov	r4, r0
 80017ba:	6030      	str	r0, [r6, #0]
 80017bc:	2800      	cmp	r0, #0
 80017be:	d1d5      	bne.n	800176c <__sfp+0x24>
 80017c0:	f7ff ff78 	bl	80016b4 <__sfp_lock_release>
 80017c4:	230c      	movs	r3, #12
 80017c6:	603b      	str	r3, [r7, #0]
 80017c8:	e7ee      	b.n	80017a8 <__sfp+0x60>
 80017ca:	bf00      	nop
 80017cc:	08002808 	.word	0x08002808
 80017d0:	ffff0001 	.word	0xffff0001

080017d4 <_fwalk_reent>:
 80017d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80017d8:	4606      	mov	r6, r0
 80017da:	4688      	mov	r8, r1
 80017dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80017e0:	2700      	movs	r7, #0
 80017e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80017e6:	f1b9 0901 	subs.w	r9, r9, #1
 80017ea:	d505      	bpl.n	80017f8 <_fwalk_reent+0x24>
 80017ec:	6824      	ldr	r4, [r4, #0]
 80017ee:	2c00      	cmp	r4, #0
 80017f0:	d1f7      	bne.n	80017e2 <_fwalk_reent+0xe>
 80017f2:	4638      	mov	r0, r7
 80017f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80017f8:	89ab      	ldrh	r3, [r5, #12]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d907      	bls.n	800180e <_fwalk_reent+0x3a>
 80017fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001802:	3301      	adds	r3, #1
 8001804:	d003      	beq.n	800180e <_fwalk_reent+0x3a>
 8001806:	4629      	mov	r1, r5
 8001808:	4630      	mov	r0, r6
 800180a:	47c0      	blx	r8
 800180c:	4307      	orrs	r7, r0
 800180e:	3568      	adds	r5, #104	; 0x68
 8001810:	e7e9      	b.n	80017e6 <_fwalk_reent+0x12>

08001812 <__retarget_lock_init_recursive>:
 8001812:	4770      	bx	lr

08001814 <__retarget_lock_acquire_recursive>:
 8001814:	4770      	bx	lr

08001816 <__retarget_lock_release_recursive>:
 8001816:	4770      	bx	lr

08001818 <_malloc_r>:
 8001818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800181a:	1ccd      	adds	r5, r1, #3
 800181c:	f025 0503 	bic.w	r5, r5, #3
 8001820:	3508      	adds	r5, #8
 8001822:	2d0c      	cmp	r5, #12
 8001824:	bf38      	it	cc
 8001826:	250c      	movcc	r5, #12
 8001828:	2d00      	cmp	r5, #0
 800182a:	4606      	mov	r6, r0
 800182c:	db01      	blt.n	8001832 <_malloc_r+0x1a>
 800182e:	42a9      	cmp	r1, r5
 8001830:	d903      	bls.n	800183a <_malloc_r+0x22>
 8001832:	230c      	movs	r3, #12
 8001834:	6033      	str	r3, [r6, #0]
 8001836:	2000      	movs	r0, #0
 8001838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800183a:	f000 fda3 	bl	8002384 <__malloc_lock>
 800183e:	4921      	ldr	r1, [pc, #132]	; (80018c4 <_malloc_r+0xac>)
 8001840:	680a      	ldr	r2, [r1, #0]
 8001842:	4614      	mov	r4, r2
 8001844:	b99c      	cbnz	r4, 800186e <_malloc_r+0x56>
 8001846:	4f20      	ldr	r7, [pc, #128]	; (80018c8 <_malloc_r+0xb0>)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	b923      	cbnz	r3, 8001856 <_malloc_r+0x3e>
 800184c:	4621      	mov	r1, r4
 800184e:	4630      	mov	r0, r6
 8001850:	f000 fb2a 	bl	8001ea8 <_sbrk_r>
 8001854:	6038      	str	r0, [r7, #0]
 8001856:	4629      	mov	r1, r5
 8001858:	4630      	mov	r0, r6
 800185a:	f000 fb25 	bl	8001ea8 <_sbrk_r>
 800185e:	1c43      	adds	r3, r0, #1
 8001860:	d123      	bne.n	80018aa <_malloc_r+0x92>
 8001862:	230c      	movs	r3, #12
 8001864:	6033      	str	r3, [r6, #0]
 8001866:	4630      	mov	r0, r6
 8001868:	f000 fd92 	bl	8002390 <__malloc_unlock>
 800186c:	e7e3      	b.n	8001836 <_malloc_r+0x1e>
 800186e:	6823      	ldr	r3, [r4, #0]
 8001870:	1b5b      	subs	r3, r3, r5
 8001872:	d417      	bmi.n	80018a4 <_malloc_r+0x8c>
 8001874:	2b0b      	cmp	r3, #11
 8001876:	d903      	bls.n	8001880 <_malloc_r+0x68>
 8001878:	6023      	str	r3, [r4, #0]
 800187a:	441c      	add	r4, r3
 800187c:	6025      	str	r5, [r4, #0]
 800187e:	e004      	b.n	800188a <_malloc_r+0x72>
 8001880:	6863      	ldr	r3, [r4, #4]
 8001882:	42a2      	cmp	r2, r4
 8001884:	bf0c      	ite	eq
 8001886:	600b      	streq	r3, [r1, #0]
 8001888:	6053      	strne	r3, [r2, #4]
 800188a:	4630      	mov	r0, r6
 800188c:	f000 fd80 	bl	8002390 <__malloc_unlock>
 8001890:	f104 000b 	add.w	r0, r4, #11
 8001894:	1d23      	adds	r3, r4, #4
 8001896:	f020 0007 	bic.w	r0, r0, #7
 800189a:	1ac2      	subs	r2, r0, r3
 800189c:	d0cc      	beq.n	8001838 <_malloc_r+0x20>
 800189e:	1a1b      	subs	r3, r3, r0
 80018a0:	50a3      	str	r3, [r4, r2]
 80018a2:	e7c9      	b.n	8001838 <_malloc_r+0x20>
 80018a4:	4622      	mov	r2, r4
 80018a6:	6864      	ldr	r4, [r4, #4]
 80018a8:	e7cc      	b.n	8001844 <_malloc_r+0x2c>
 80018aa:	1cc4      	adds	r4, r0, #3
 80018ac:	f024 0403 	bic.w	r4, r4, #3
 80018b0:	42a0      	cmp	r0, r4
 80018b2:	d0e3      	beq.n	800187c <_malloc_r+0x64>
 80018b4:	1a21      	subs	r1, r4, r0
 80018b6:	4630      	mov	r0, r6
 80018b8:	f000 faf6 	bl	8001ea8 <_sbrk_r>
 80018bc:	3001      	adds	r0, #1
 80018be:	d1dd      	bne.n	800187c <_malloc_r+0x64>
 80018c0:	e7cf      	b.n	8001862 <_malloc_r+0x4a>
 80018c2:	bf00      	nop
 80018c4:	200005dc 	.word	0x200005dc
 80018c8:	200005e0 	.word	0x200005e0

080018cc <__sfputc_r>:
 80018cc:	6893      	ldr	r3, [r2, #8]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	b410      	push	{r4}
 80018d4:	6093      	str	r3, [r2, #8]
 80018d6:	da08      	bge.n	80018ea <__sfputc_r+0x1e>
 80018d8:	6994      	ldr	r4, [r2, #24]
 80018da:	42a3      	cmp	r3, r4
 80018dc:	db01      	blt.n	80018e2 <__sfputc_r+0x16>
 80018de:	290a      	cmp	r1, #10
 80018e0:	d103      	bne.n	80018ea <__sfputc_r+0x1e>
 80018e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80018e6:	f000 bb33 	b.w	8001f50 <__swbuf_r>
 80018ea:	6813      	ldr	r3, [r2, #0]
 80018ec:	1c58      	adds	r0, r3, #1
 80018ee:	6010      	str	r0, [r2, #0]
 80018f0:	7019      	strb	r1, [r3, #0]
 80018f2:	4608      	mov	r0, r1
 80018f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <__sfputs_r>:
 80018fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018fc:	4606      	mov	r6, r0
 80018fe:	460f      	mov	r7, r1
 8001900:	4614      	mov	r4, r2
 8001902:	18d5      	adds	r5, r2, r3
 8001904:	42ac      	cmp	r4, r5
 8001906:	d101      	bne.n	800190c <__sfputs_r+0x12>
 8001908:	2000      	movs	r0, #0
 800190a:	e007      	b.n	800191c <__sfputs_r+0x22>
 800190c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001910:	463a      	mov	r2, r7
 8001912:	4630      	mov	r0, r6
 8001914:	f7ff ffda 	bl	80018cc <__sfputc_r>
 8001918:	1c43      	adds	r3, r0, #1
 800191a:	d1f3      	bne.n	8001904 <__sfputs_r+0xa>
 800191c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001920 <_vfiprintf_r>:
 8001920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001924:	460d      	mov	r5, r1
 8001926:	b09d      	sub	sp, #116	; 0x74
 8001928:	4614      	mov	r4, r2
 800192a:	4698      	mov	r8, r3
 800192c:	4606      	mov	r6, r0
 800192e:	b118      	cbz	r0, 8001938 <_vfiprintf_r+0x18>
 8001930:	6983      	ldr	r3, [r0, #24]
 8001932:	b90b      	cbnz	r3, 8001938 <_vfiprintf_r+0x18>
 8001934:	f7ff fed0 	bl	80016d8 <__sinit>
 8001938:	4b89      	ldr	r3, [pc, #548]	; (8001b60 <_vfiprintf_r+0x240>)
 800193a:	429d      	cmp	r5, r3
 800193c:	d11b      	bne.n	8001976 <_vfiprintf_r+0x56>
 800193e:	6875      	ldr	r5, [r6, #4]
 8001940:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001942:	07d9      	lsls	r1, r3, #31
 8001944:	d405      	bmi.n	8001952 <_vfiprintf_r+0x32>
 8001946:	89ab      	ldrh	r3, [r5, #12]
 8001948:	059a      	lsls	r2, r3, #22
 800194a:	d402      	bmi.n	8001952 <_vfiprintf_r+0x32>
 800194c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800194e:	f7ff ff61 	bl	8001814 <__retarget_lock_acquire_recursive>
 8001952:	89ab      	ldrh	r3, [r5, #12]
 8001954:	071b      	lsls	r3, r3, #28
 8001956:	d501      	bpl.n	800195c <_vfiprintf_r+0x3c>
 8001958:	692b      	ldr	r3, [r5, #16]
 800195a:	b9eb      	cbnz	r3, 8001998 <_vfiprintf_r+0x78>
 800195c:	4629      	mov	r1, r5
 800195e:	4630      	mov	r0, r6
 8001960:	f000 fb5a 	bl	8002018 <__swsetup_r>
 8001964:	b1c0      	cbz	r0, 8001998 <_vfiprintf_r+0x78>
 8001966:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001968:	07dc      	lsls	r4, r3, #31
 800196a:	d50e      	bpl.n	800198a <_vfiprintf_r+0x6a>
 800196c:	f04f 30ff 	mov.w	r0, #4294967295
 8001970:	b01d      	add	sp, #116	; 0x74
 8001972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001976:	4b7b      	ldr	r3, [pc, #492]	; (8001b64 <_vfiprintf_r+0x244>)
 8001978:	429d      	cmp	r5, r3
 800197a:	d101      	bne.n	8001980 <_vfiprintf_r+0x60>
 800197c:	68b5      	ldr	r5, [r6, #8]
 800197e:	e7df      	b.n	8001940 <_vfiprintf_r+0x20>
 8001980:	4b79      	ldr	r3, [pc, #484]	; (8001b68 <_vfiprintf_r+0x248>)
 8001982:	429d      	cmp	r5, r3
 8001984:	bf08      	it	eq
 8001986:	68f5      	ldreq	r5, [r6, #12]
 8001988:	e7da      	b.n	8001940 <_vfiprintf_r+0x20>
 800198a:	89ab      	ldrh	r3, [r5, #12]
 800198c:	0598      	lsls	r0, r3, #22
 800198e:	d4ed      	bmi.n	800196c <_vfiprintf_r+0x4c>
 8001990:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001992:	f7ff ff40 	bl	8001816 <__retarget_lock_release_recursive>
 8001996:	e7e9      	b.n	800196c <_vfiprintf_r+0x4c>
 8001998:	2300      	movs	r3, #0
 800199a:	9309      	str	r3, [sp, #36]	; 0x24
 800199c:	2320      	movs	r3, #32
 800199e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80019a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80019a6:	2330      	movs	r3, #48	; 0x30
 80019a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001b6c <_vfiprintf_r+0x24c>
 80019ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80019b0:	f04f 0901 	mov.w	r9, #1
 80019b4:	4623      	mov	r3, r4
 80019b6:	469a      	mov	sl, r3
 80019b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80019bc:	b10a      	cbz	r2, 80019c2 <_vfiprintf_r+0xa2>
 80019be:	2a25      	cmp	r2, #37	; 0x25
 80019c0:	d1f9      	bne.n	80019b6 <_vfiprintf_r+0x96>
 80019c2:	ebba 0b04 	subs.w	fp, sl, r4
 80019c6:	d00b      	beq.n	80019e0 <_vfiprintf_r+0xc0>
 80019c8:	465b      	mov	r3, fp
 80019ca:	4622      	mov	r2, r4
 80019cc:	4629      	mov	r1, r5
 80019ce:	4630      	mov	r0, r6
 80019d0:	f7ff ff93 	bl	80018fa <__sfputs_r>
 80019d4:	3001      	adds	r0, #1
 80019d6:	f000 80aa 	beq.w	8001b2e <_vfiprintf_r+0x20e>
 80019da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80019dc:	445a      	add	r2, fp
 80019de:	9209      	str	r2, [sp, #36]	; 0x24
 80019e0:	f89a 3000 	ldrb.w	r3, [sl]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f000 80a2 	beq.w	8001b2e <_vfiprintf_r+0x20e>
 80019ea:	2300      	movs	r3, #0
 80019ec:	f04f 32ff 	mov.w	r2, #4294967295
 80019f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80019f4:	f10a 0a01 	add.w	sl, sl, #1
 80019f8:	9304      	str	r3, [sp, #16]
 80019fa:	9307      	str	r3, [sp, #28]
 80019fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001a00:	931a      	str	r3, [sp, #104]	; 0x68
 8001a02:	4654      	mov	r4, sl
 8001a04:	2205      	movs	r2, #5
 8001a06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a0a:	4858      	ldr	r0, [pc, #352]	; (8001b6c <_vfiprintf_r+0x24c>)
 8001a0c:	f7fe fbe8 	bl	80001e0 <memchr>
 8001a10:	9a04      	ldr	r2, [sp, #16]
 8001a12:	b9d8      	cbnz	r0, 8001a4c <_vfiprintf_r+0x12c>
 8001a14:	06d1      	lsls	r1, r2, #27
 8001a16:	bf44      	itt	mi
 8001a18:	2320      	movmi	r3, #32
 8001a1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001a1e:	0713      	lsls	r3, r2, #28
 8001a20:	bf44      	itt	mi
 8001a22:	232b      	movmi	r3, #43	; 0x2b
 8001a24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001a28:	f89a 3000 	ldrb.w	r3, [sl]
 8001a2c:	2b2a      	cmp	r3, #42	; 0x2a
 8001a2e:	d015      	beq.n	8001a5c <_vfiprintf_r+0x13c>
 8001a30:	9a07      	ldr	r2, [sp, #28]
 8001a32:	4654      	mov	r4, sl
 8001a34:	2000      	movs	r0, #0
 8001a36:	f04f 0c0a 	mov.w	ip, #10
 8001a3a:	4621      	mov	r1, r4
 8001a3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001a40:	3b30      	subs	r3, #48	; 0x30
 8001a42:	2b09      	cmp	r3, #9
 8001a44:	d94e      	bls.n	8001ae4 <_vfiprintf_r+0x1c4>
 8001a46:	b1b0      	cbz	r0, 8001a76 <_vfiprintf_r+0x156>
 8001a48:	9207      	str	r2, [sp, #28]
 8001a4a:	e014      	b.n	8001a76 <_vfiprintf_r+0x156>
 8001a4c:	eba0 0308 	sub.w	r3, r0, r8
 8001a50:	fa09 f303 	lsl.w	r3, r9, r3
 8001a54:	4313      	orrs	r3, r2
 8001a56:	9304      	str	r3, [sp, #16]
 8001a58:	46a2      	mov	sl, r4
 8001a5a:	e7d2      	b.n	8001a02 <_vfiprintf_r+0xe2>
 8001a5c:	9b03      	ldr	r3, [sp, #12]
 8001a5e:	1d19      	adds	r1, r3, #4
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	9103      	str	r1, [sp, #12]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	bfbb      	ittet	lt
 8001a68:	425b      	neglt	r3, r3
 8001a6a:	f042 0202 	orrlt.w	r2, r2, #2
 8001a6e:	9307      	strge	r3, [sp, #28]
 8001a70:	9307      	strlt	r3, [sp, #28]
 8001a72:	bfb8      	it	lt
 8001a74:	9204      	strlt	r2, [sp, #16]
 8001a76:	7823      	ldrb	r3, [r4, #0]
 8001a78:	2b2e      	cmp	r3, #46	; 0x2e
 8001a7a:	d10c      	bne.n	8001a96 <_vfiprintf_r+0x176>
 8001a7c:	7863      	ldrb	r3, [r4, #1]
 8001a7e:	2b2a      	cmp	r3, #42	; 0x2a
 8001a80:	d135      	bne.n	8001aee <_vfiprintf_r+0x1ce>
 8001a82:	9b03      	ldr	r3, [sp, #12]
 8001a84:	1d1a      	adds	r2, r3, #4
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	9203      	str	r2, [sp, #12]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	bfb8      	it	lt
 8001a8e:	f04f 33ff 	movlt.w	r3, #4294967295
 8001a92:	3402      	adds	r4, #2
 8001a94:	9305      	str	r3, [sp, #20]
 8001a96:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001b7c <_vfiprintf_r+0x25c>
 8001a9a:	7821      	ldrb	r1, [r4, #0]
 8001a9c:	2203      	movs	r2, #3
 8001a9e:	4650      	mov	r0, sl
 8001aa0:	f7fe fb9e 	bl	80001e0 <memchr>
 8001aa4:	b140      	cbz	r0, 8001ab8 <_vfiprintf_r+0x198>
 8001aa6:	2340      	movs	r3, #64	; 0x40
 8001aa8:	eba0 000a 	sub.w	r0, r0, sl
 8001aac:	fa03 f000 	lsl.w	r0, r3, r0
 8001ab0:	9b04      	ldr	r3, [sp, #16]
 8001ab2:	4303      	orrs	r3, r0
 8001ab4:	3401      	adds	r4, #1
 8001ab6:	9304      	str	r3, [sp, #16]
 8001ab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001abc:	482c      	ldr	r0, [pc, #176]	; (8001b70 <_vfiprintf_r+0x250>)
 8001abe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001ac2:	2206      	movs	r2, #6
 8001ac4:	f7fe fb8c 	bl	80001e0 <memchr>
 8001ac8:	2800      	cmp	r0, #0
 8001aca:	d03f      	beq.n	8001b4c <_vfiprintf_r+0x22c>
 8001acc:	4b29      	ldr	r3, [pc, #164]	; (8001b74 <_vfiprintf_r+0x254>)
 8001ace:	bb1b      	cbnz	r3, 8001b18 <_vfiprintf_r+0x1f8>
 8001ad0:	9b03      	ldr	r3, [sp, #12]
 8001ad2:	3307      	adds	r3, #7
 8001ad4:	f023 0307 	bic.w	r3, r3, #7
 8001ad8:	3308      	adds	r3, #8
 8001ada:	9303      	str	r3, [sp, #12]
 8001adc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001ade:	443b      	add	r3, r7
 8001ae0:	9309      	str	r3, [sp, #36]	; 0x24
 8001ae2:	e767      	b.n	80019b4 <_vfiprintf_r+0x94>
 8001ae4:	fb0c 3202 	mla	r2, ip, r2, r3
 8001ae8:	460c      	mov	r4, r1
 8001aea:	2001      	movs	r0, #1
 8001aec:	e7a5      	b.n	8001a3a <_vfiprintf_r+0x11a>
 8001aee:	2300      	movs	r3, #0
 8001af0:	3401      	adds	r4, #1
 8001af2:	9305      	str	r3, [sp, #20]
 8001af4:	4619      	mov	r1, r3
 8001af6:	f04f 0c0a 	mov.w	ip, #10
 8001afa:	4620      	mov	r0, r4
 8001afc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001b00:	3a30      	subs	r2, #48	; 0x30
 8001b02:	2a09      	cmp	r2, #9
 8001b04:	d903      	bls.n	8001b0e <_vfiprintf_r+0x1ee>
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d0c5      	beq.n	8001a96 <_vfiprintf_r+0x176>
 8001b0a:	9105      	str	r1, [sp, #20]
 8001b0c:	e7c3      	b.n	8001a96 <_vfiprintf_r+0x176>
 8001b0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8001b12:	4604      	mov	r4, r0
 8001b14:	2301      	movs	r3, #1
 8001b16:	e7f0      	b.n	8001afa <_vfiprintf_r+0x1da>
 8001b18:	ab03      	add	r3, sp, #12
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	462a      	mov	r2, r5
 8001b1e:	4b16      	ldr	r3, [pc, #88]	; (8001b78 <_vfiprintf_r+0x258>)
 8001b20:	a904      	add	r1, sp, #16
 8001b22:	4630      	mov	r0, r6
 8001b24:	f3af 8000 	nop.w
 8001b28:	4607      	mov	r7, r0
 8001b2a:	1c78      	adds	r0, r7, #1
 8001b2c:	d1d6      	bne.n	8001adc <_vfiprintf_r+0x1bc>
 8001b2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001b30:	07d9      	lsls	r1, r3, #31
 8001b32:	d405      	bmi.n	8001b40 <_vfiprintf_r+0x220>
 8001b34:	89ab      	ldrh	r3, [r5, #12]
 8001b36:	059a      	lsls	r2, r3, #22
 8001b38:	d402      	bmi.n	8001b40 <_vfiprintf_r+0x220>
 8001b3a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001b3c:	f7ff fe6b 	bl	8001816 <__retarget_lock_release_recursive>
 8001b40:	89ab      	ldrh	r3, [r5, #12]
 8001b42:	065b      	lsls	r3, r3, #25
 8001b44:	f53f af12 	bmi.w	800196c <_vfiprintf_r+0x4c>
 8001b48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001b4a:	e711      	b.n	8001970 <_vfiprintf_r+0x50>
 8001b4c:	ab03      	add	r3, sp, #12
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	462a      	mov	r2, r5
 8001b52:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <_vfiprintf_r+0x258>)
 8001b54:	a904      	add	r1, sp, #16
 8001b56:	4630      	mov	r0, r6
 8001b58:	f000 f880 	bl	8001c5c <_printf_i>
 8001b5c:	e7e4      	b.n	8001b28 <_vfiprintf_r+0x208>
 8001b5e:	bf00      	nop
 8001b60:	0800282c 	.word	0x0800282c
 8001b64:	0800284c 	.word	0x0800284c
 8001b68:	0800280c 	.word	0x0800280c
 8001b6c:	0800286c 	.word	0x0800286c
 8001b70:	08002876 	.word	0x08002876
 8001b74:	00000000 	.word	0x00000000
 8001b78:	080018fb 	.word	0x080018fb
 8001b7c:	08002872 	.word	0x08002872

08001b80 <_printf_common>:
 8001b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b84:	4616      	mov	r6, r2
 8001b86:	4699      	mov	r9, r3
 8001b88:	688a      	ldr	r2, [r1, #8]
 8001b8a:	690b      	ldr	r3, [r1, #16]
 8001b8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001b90:	4293      	cmp	r3, r2
 8001b92:	bfb8      	it	lt
 8001b94:	4613      	movlt	r3, r2
 8001b96:	6033      	str	r3, [r6, #0]
 8001b98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001b9c:	4607      	mov	r7, r0
 8001b9e:	460c      	mov	r4, r1
 8001ba0:	b10a      	cbz	r2, 8001ba6 <_printf_common+0x26>
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	6033      	str	r3, [r6, #0]
 8001ba6:	6823      	ldr	r3, [r4, #0]
 8001ba8:	0699      	lsls	r1, r3, #26
 8001baa:	bf42      	ittt	mi
 8001bac:	6833      	ldrmi	r3, [r6, #0]
 8001bae:	3302      	addmi	r3, #2
 8001bb0:	6033      	strmi	r3, [r6, #0]
 8001bb2:	6825      	ldr	r5, [r4, #0]
 8001bb4:	f015 0506 	ands.w	r5, r5, #6
 8001bb8:	d106      	bne.n	8001bc8 <_printf_common+0x48>
 8001bba:	f104 0a19 	add.w	sl, r4, #25
 8001bbe:	68e3      	ldr	r3, [r4, #12]
 8001bc0:	6832      	ldr	r2, [r6, #0]
 8001bc2:	1a9b      	subs	r3, r3, r2
 8001bc4:	42ab      	cmp	r3, r5
 8001bc6:	dc26      	bgt.n	8001c16 <_printf_common+0x96>
 8001bc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001bcc:	1e13      	subs	r3, r2, #0
 8001bce:	6822      	ldr	r2, [r4, #0]
 8001bd0:	bf18      	it	ne
 8001bd2:	2301      	movne	r3, #1
 8001bd4:	0692      	lsls	r2, r2, #26
 8001bd6:	d42b      	bmi.n	8001c30 <_printf_common+0xb0>
 8001bd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001bdc:	4649      	mov	r1, r9
 8001bde:	4638      	mov	r0, r7
 8001be0:	47c0      	blx	r8
 8001be2:	3001      	adds	r0, #1
 8001be4:	d01e      	beq.n	8001c24 <_printf_common+0xa4>
 8001be6:	6823      	ldr	r3, [r4, #0]
 8001be8:	68e5      	ldr	r5, [r4, #12]
 8001bea:	6832      	ldr	r2, [r6, #0]
 8001bec:	f003 0306 	and.w	r3, r3, #6
 8001bf0:	2b04      	cmp	r3, #4
 8001bf2:	bf08      	it	eq
 8001bf4:	1aad      	subeq	r5, r5, r2
 8001bf6:	68a3      	ldr	r3, [r4, #8]
 8001bf8:	6922      	ldr	r2, [r4, #16]
 8001bfa:	bf0c      	ite	eq
 8001bfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001c00:	2500      	movne	r5, #0
 8001c02:	4293      	cmp	r3, r2
 8001c04:	bfc4      	itt	gt
 8001c06:	1a9b      	subgt	r3, r3, r2
 8001c08:	18ed      	addgt	r5, r5, r3
 8001c0a:	2600      	movs	r6, #0
 8001c0c:	341a      	adds	r4, #26
 8001c0e:	42b5      	cmp	r5, r6
 8001c10:	d11a      	bne.n	8001c48 <_printf_common+0xc8>
 8001c12:	2000      	movs	r0, #0
 8001c14:	e008      	b.n	8001c28 <_printf_common+0xa8>
 8001c16:	2301      	movs	r3, #1
 8001c18:	4652      	mov	r2, sl
 8001c1a:	4649      	mov	r1, r9
 8001c1c:	4638      	mov	r0, r7
 8001c1e:	47c0      	blx	r8
 8001c20:	3001      	adds	r0, #1
 8001c22:	d103      	bne.n	8001c2c <_printf_common+0xac>
 8001c24:	f04f 30ff 	mov.w	r0, #4294967295
 8001c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c2c:	3501      	adds	r5, #1
 8001c2e:	e7c6      	b.n	8001bbe <_printf_common+0x3e>
 8001c30:	18e1      	adds	r1, r4, r3
 8001c32:	1c5a      	adds	r2, r3, #1
 8001c34:	2030      	movs	r0, #48	; 0x30
 8001c36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001c3a:	4422      	add	r2, r4
 8001c3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001c40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001c44:	3302      	adds	r3, #2
 8001c46:	e7c7      	b.n	8001bd8 <_printf_common+0x58>
 8001c48:	2301      	movs	r3, #1
 8001c4a:	4622      	mov	r2, r4
 8001c4c:	4649      	mov	r1, r9
 8001c4e:	4638      	mov	r0, r7
 8001c50:	47c0      	blx	r8
 8001c52:	3001      	adds	r0, #1
 8001c54:	d0e6      	beq.n	8001c24 <_printf_common+0xa4>
 8001c56:	3601      	adds	r6, #1
 8001c58:	e7d9      	b.n	8001c0e <_printf_common+0x8e>
	...

08001c5c <_printf_i>:
 8001c5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001c60:	460c      	mov	r4, r1
 8001c62:	4691      	mov	r9, r2
 8001c64:	7e27      	ldrb	r7, [r4, #24]
 8001c66:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001c68:	2f78      	cmp	r7, #120	; 0x78
 8001c6a:	4680      	mov	r8, r0
 8001c6c:	469a      	mov	sl, r3
 8001c6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001c72:	d807      	bhi.n	8001c84 <_printf_i+0x28>
 8001c74:	2f62      	cmp	r7, #98	; 0x62
 8001c76:	d80a      	bhi.n	8001c8e <_printf_i+0x32>
 8001c78:	2f00      	cmp	r7, #0
 8001c7a:	f000 80d8 	beq.w	8001e2e <_printf_i+0x1d2>
 8001c7e:	2f58      	cmp	r7, #88	; 0x58
 8001c80:	f000 80a3 	beq.w	8001dca <_printf_i+0x16e>
 8001c84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001c88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001c8c:	e03a      	b.n	8001d04 <_printf_i+0xa8>
 8001c8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001c92:	2b15      	cmp	r3, #21
 8001c94:	d8f6      	bhi.n	8001c84 <_printf_i+0x28>
 8001c96:	a001      	add	r0, pc, #4	; (adr r0, 8001c9c <_printf_i+0x40>)
 8001c98:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001c9c:	08001cf5 	.word	0x08001cf5
 8001ca0:	08001d09 	.word	0x08001d09
 8001ca4:	08001c85 	.word	0x08001c85
 8001ca8:	08001c85 	.word	0x08001c85
 8001cac:	08001c85 	.word	0x08001c85
 8001cb0:	08001c85 	.word	0x08001c85
 8001cb4:	08001d09 	.word	0x08001d09
 8001cb8:	08001c85 	.word	0x08001c85
 8001cbc:	08001c85 	.word	0x08001c85
 8001cc0:	08001c85 	.word	0x08001c85
 8001cc4:	08001c85 	.word	0x08001c85
 8001cc8:	08001e15 	.word	0x08001e15
 8001ccc:	08001d39 	.word	0x08001d39
 8001cd0:	08001df7 	.word	0x08001df7
 8001cd4:	08001c85 	.word	0x08001c85
 8001cd8:	08001c85 	.word	0x08001c85
 8001cdc:	08001e37 	.word	0x08001e37
 8001ce0:	08001c85 	.word	0x08001c85
 8001ce4:	08001d39 	.word	0x08001d39
 8001ce8:	08001c85 	.word	0x08001c85
 8001cec:	08001c85 	.word	0x08001c85
 8001cf0:	08001dff 	.word	0x08001dff
 8001cf4:	680b      	ldr	r3, [r1, #0]
 8001cf6:	1d1a      	adds	r2, r3, #4
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	600a      	str	r2, [r1, #0]
 8001cfc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001d00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001d04:	2301      	movs	r3, #1
 8001d06:	e0a3      	b.n	8001e50 <_printf_i+0x1f4>
 8001d08:	6825      	ldr	r5, [r4, #0]
 8001d0a:	6808      	ldr	r0, [r1, #0]
 8001d0c:	062e      	lsls	r6, r5, #24
 8001d0e:	f100 0304 	add.w	r3, r0, #4
 8001d12:	d50a      	bpl.n	8001d2a <_printf_i+0xce>
 8001d14:	6805      	ldr	r5, [r0, #0]
 8001d16:	600b      	str	r3, [r1, #0]
 8001d18:	2d00      	cmp	r5, #0
 8001d1a:	da03      	bge.n	8001d24 <_printf_i+0xc8>
 8001d1c:	232d      	movs	r3, #45	; 0x2d
 8001d1e:	426d      	negs	r5, r5
 8001d20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d24:	485e      	ldr	r0, [pc, #376]	; (8001ea0 <_printf_i+0x244>)
 8001d26:	230a      	movs	r3, #10
 8001d28:	e019      	b.n	8001d5e <_printf_i+0x102>
 8001d2a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001d2e:	6805      	ldr	r5, [r0, #0]
 8001d30:	600b      	str	r3, [r1, #0]
 8001d32:	bf18      	it	ne
 8001d34:	b22d      	sxthne	r5, r5
 8001d36:	e7ef      	b.n	8001d18 <_printf_i+0xbc>
 8001d38:	680b      	ldr	r3, [r1, #0]
 8001d3a:	6825      	ldr	r5, [r4, #0]
 8001d3c:	1d18      	adds	r0, r3, #4
 8001d3e:	6008      	str	r0, [r1, #0]
 8001d40:	0628      	lsls	r0, r5, #24
 8001d42:	d501      	bpl.n	8001d48 <_printf_i+0xec>
 8001d44:	681d      	ldr	r5, [r3, #0]
 8001d46:	e002      	b.n	8001d4e <_printf_i+0xf2>
 8001d48:	0669      	lsls	r1, r5, #25
 8001d4a:	d5fb      	bpl.n	8001d44 <_printf_i+0xe8>
 8001d4c:	881d      	ldrh	r5, [r3, #0]
 8001d4e:	4854      	ldr	r0, [pc, #336]	; (8001ea0 <_printf_i+0x244>)
 8001d50:	2f6f      	cmp	r7, #111	; 0x6f
 8001d52:	bf0c      	ite	eq
 8001d54:	2308      	moveq	r3, #8
 8001d56:	230a      	movne	r3, #10
 8001d58:	2100      	movs	r1, #0
 8001d5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001d5e:	6866      	ldr	r6, [r4, #4]
 8001d60:	60a6      	str	r6, [r4, #8]
 8001d62:	2e00      	cmp	r6, #0
 8001d64:	bfa2      	ittt	ge
 8001d66:	6821      	ldrge	r1, [r4, #0]
 8001d68:	f021 0104 	bicge.w	r1, r1, #4
 8001d6c:	6021      	strge	r1, [r4, #0]
 8001d6e:	b90d      	cbnz	r5, 8001d74 <_printf_i+0x118>
 8001d70:	2e00      	cmp	r6, #0
 8001d72:	d04d      	beq.n	8001e10 <_printf_i+0x1b4>
 8001d74:	4616      	mov	r6, r2
 8001d76:	fbb5 f1f3 	udiv	r1, r5, r3
 8001d7a:	fb03 5711 	mls	r7, r3, r1, r5
 8001d7e:	5dc7      	ldrb	r7, [r0, r7]
 8001d80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001d84:	462f      	mov	r7, r5
 8001d86:	42bb      	cmp	r3, r7
 8001d88:	460d      	mov	r5, r1
 8001d8a:	d9f4      	bls.n	8001d76 <_printf_i+0x11a>
 8001d8c:	2b08      	cmp	r3, #8
 8001d8e:	d10b      	bne.n	8001da8 <_printf_i+0x14c>
 8001d90:	6823      	ldr	r3, [r4, #0]
 8001d92:	07df      	lsls	r7, r3, #31
 8001d94:	d508      	bpl.n	8001da8 <_printf_i+0x14c>
 8001d96:	6923      	ldr	r3, [r4, #16]
 8001d98:	6861      	ldr	r1, [r4, #4]
 8001d9a:	4299      	cmp	r1, r3
 8001d9c:	bfde      	ittt	le
 8001d9e:	2330      	movle	r3, #48	; 0x30
 8001da0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001da4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001da8:	1b92      	subs	r2, r2, r6
 8001daa:	6122      	str	r2, [r4, #16]
 8001dac:	f8cd a000 	str.w	sl, [sp]
 8001db0:	464b      	mov	r3, r9
 8001db2:	aa03      	add	r2, sp, #12
 8001db4:	4621      	mov	r1, r4
 8001db6:	4640      	mov	r0, r8
 8001db8:	f7ff fee2 	bl	8001b80 <_printf_common>
 8001dbc:	3001      	adds	r0, #1
 8001dbe:	d14c      	bne.n	8001e5a <_printf_i+0x1fe>
 8001dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc4:	b004      	add	sp, #16
 8001dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001dca:	4835      	ldr	r0, [pc, #212]	; (8001ea0 <_printf_i+0x244>)
 8001dcc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001dd0:	6823      	ldr	r3, [r4, #0]
 8001dd2:	680e      	ldr	r6, [r1, #0]
 8001dd4:	061f      	lsls	r7, r3, #24
 8001dd6:	f856 5b04 	ldr.w	r5, [r6], #4
 8001dda:	600e      	str	r6, [r1, #0]
 8001ddc:	d514      	bpl.n	8001e08 <_printf_i+0x1ac>
 8001dde:	07d9      	lsls	r1, r3, #31
 8001de0:	bf44      	itt	mi
 8001de2:	f043 0320 	orrmi.w	r3, r3, #32
 8001de6:	6023      	strmi	r3, [r4, #0]
 8001de8:	b91d      	cbnz	r5, 8001df2 <_printf_i+0x196>
 8001dea:	6823      	ldr	r3, [r4, #0]
 8001dec:	f023 0320 	bic.w	r3, r3, #32
 8001df0:	6023      	str	r3, [r4, #0]
 8001df2:	2310      	movs	r3, #16
 8001df4:	e7b0      	b.n	8001d58 <_printf_i+0xfc>
 8001df6:	6823      	ldr	r3, [r4, #0]
 8001df8:	f043 0320 	orr.w	r3, r3, #32
 8001dfc:	6023      	str	r3, [r4, #0]
 8001dfe:	2378      	movs	r3, #120	; 0x78
 8001e00:	4828      	ldr	r0, [pc, #160]	; (8001ea4 <_printf_i+0x248>)
 8001e02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001e06:	e7e3      	b.n	8001dd0 <_printf_i+0x174>
 8001e08:	065e      	lsls	r6, r3, #25
 8001e0a:	bf48      	it	mi
 8001e0c:	b2ad      	uxthmi	r5, r5
 8001e0e:	e7e6      	b.n	8001dde <_printf_i+0x182>
 8001e10:	4616      	mov	r6, r2
 8001e12:	e7bb      	b.n	8001d8c <_printf_i+0x130>
 8001e14:	680b      	ldr	r3, [r1, #0]
 8001e16:	6826      	ldr	r6, [r4, #0]
 8001e18:	6960      	ldr	r0, [r4, #20]
 8001e1a:	1d1d      	adds	r5, r3, #4
 8001e1c:	600d      	str	r5, [r1, #0]
 8001e1e:	0635      	lsls	r5, r6, #24
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	d501      	bpl.n	8001e28 <_printf_i+0x1cc>
 8001e24:	6018      	str	r0, [r3, #0]
 8001e26:	e002      	b.n	8001e2e <_printf_i+0x1d2>
 8001e28:	0671      	lsls	r1, r6, #25
 8001e2a:	d5fb      	bpl.n	8001e24 <_printf_i+0x1c8>
 8001e2c:	8018      	strh	r0, [r3, #0]
 8001e2e:	2300      	movs	r3, #0
 8001e30:	6123      	str	r3, [r4, #16]
 8001e32:	4616      	mov	r6, r2
 8001e34:	e7ba      	b.n	8001dac <_printf_i+0x150>
 8001e36:	680b      	ldr	r3, [r1, #0]
 8001e38:	1d1a      	adds	r2, r3, #4
 8001e3a:	600a      	str	r2, [r1, #0]
 8001e3c:	681e      	ldr	r6, [r3, #0]
 8001e3e:	6862      	ldr	r2, [r4, #4]
 8001e40:	2100      	movs	r1, #0
 8001e42:	4630      	mov	r0, r6
 8001e44:	f7fe f9cc 	bl	80001e0 <memchr>
 8001e48:	b108      	cbz	r0, 8001e4e <_printf_i+0x1f2>
 8001e4a:	1b80      	subs	r0, r0, r6
 8001e4c:	6060      	str	r0, [r4, #4]
 8001e4e:	6863      	ldr	r3, [r4, #4]
 8001e50:	6123      	str	r3, [r4, #16]
 8001e52:	2300      	movs	r3, #0
 8001e54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001e58:	e7a8      	b.n	8001dac <_printf_i+0x150>
 8001e5a:	6923      	ldr	r3, [r4, #16]
 8001e5c:	4632      	mov	r2, r6
 8001e5e:	4649      	mov	r1, r9
 8001e60:	4640      	mov	r0, r8
 8001e62:	47d0      	blx	sl
 8001e64:	3001      	adds	r0, #1
 8001e66:	d0ab      	beq.n	8001dc0 <_printf_i+0x164>
 8001e68:	6823      	ldr	r3, [r4, #0]
 8001e6a:	079b      	lsls	r3, r3, #30
 8001e6c:	d413      	bmi.n	8001e96 <_printf_i+0x23a>
 8001e6e:	68e0      	ldr	r0, [r4, #12]
 8001e70:	9b03      	ldr	r3, [sp, #12]
 8001e72:	4298      	cmp	r0, r3
 8001e74:	bfb8      	it	lt
 8001e76:	4618      	movlt	r0, r3
 8001e78:	e7a4      	b.n	8001dc4 <_printf_i+0x168>
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	4632      	mov	r2, r6
 8001e7e:	4649      	mov	r1, r9
 8001e80:	4640      	mov	r0, r8
 8001e82:	47d0      	blx	sl
 8001e84:	3001      	adds	r0, #1
 8001e86:	d09b      	beq.n	8001dc0 <_printf_i+0x164>
 8001e88:	3501      	adds	r5, #1
 8001e8a:	68e3      	ldr	r3, [r4, #12]
 8001e8c:	9903      	ldr	r1, [sp, #12]
 8001e8e:	1a5b      	subs	r3, r3, r1
 8001e90:	42ab      	cmp	r3, r5
 8001e92:	dcf2      	bgt.n	8001e7a <_printf_i+0x21e>
 8001e94:	e7eb      	b.n	8001e6e <_printf_i+0x212>
 8001e96:	2500      	movs	r5, #0
 8001e98:	f104 0619 	add.w	r6, r4, #25
 8001e9c:	e7f5      	b.n	8001e8a <_printf_i+0x22e>
 8001e9e:	bf00      	nop
 8001ea0:	0800287d 	.word	0x0800287d
 8001ea4:	0800288e 	.word	0x0800288e

08001ea8 <_sbrk_r>:
 8001ea8:	b538      	push	{r3, r4, r5, lr}
 8001eaa:	4d06      	ldr	r5, [pc, #24]	; (8001ec4 <_sbrk_r+0x1c>)
 8001eac:	2300      	movs	r3, #0
 8001eae:	4604      	mov	r4, r0
 8001eb0:	4608      	mov	r0, r1
 8001eb2:	602b      	str	r3, [r5, #0]
 8001eb4:	f7ff fae0 	bl	8001478 <_sbrk>
 8001eb8:	1c43      	adds	r3, r0, #1
 8001eba:	d102      	bne.n	8001ec2 <_sbrk_r+0x1a>
 8001ebc:	682b      	ldr	r3, [r5, #0]
 8001ebe:	b103      	cbz	r3, 8001ec2 <_sbrk_r+0x1a>
 8001ec0:	6023      	str	r3, [r4, #0]
 8001ec2:	bd38      	pop	{r3, r4, r5, pc}
 8001ec4:	2000074c 	.word	0x2000074c

08001ec8 <__sread>:
 8001ec8:	b510      	push	{r4, lr}
 8001eca:	460c      	mov	r4, r1
 8001ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ed0:	f000 fab4 	bl	800243c <_read_r>
 8001ed4:	2800      	cmp	r0, #0
 8001ed6:	bfab      	itete	ge
 8001ed8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001eda:	89a3      	ldrhlt	r3, [r4, #12]
 8001edc:	181b      	addge	r3, r3, r0
 8001ede:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001ee2:	bfac      	ite	ge
 8001ee4:	6563      	strge	r3, [r4, #84]	; 0x54
 8001ee6:	81a3      	strhlt	r3, [r4, #12]
 8001ee8:	bd10      	pop	{r4, pc}

08001eea <__swrite>:
 8001eea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001eee:	461f      	mov	r7, r3
 8001ef0:	898b      	ldrh	r3, [r1, #12]
 8001ef2:	05db      	lsls	r3, r3, #23
 8001ef4:	4605      	mov	r5, r0
 8001ef6:	460c      	mov	r4, r1
 8001ef8:	4616      	mov	r6, r2
 8001efa:	d505      	bpl.n	8001f08 <__swrite+0x1e>
 8001efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f00:	2302      	movs	r3, #2
 8001f02:	2200      	movs	r2, #0
 8001f04:	f000 f9c8 	bl	8002298 <_lseek_r>
 8001f08:	89a3      	ldrh	r3, [r4, #12]
 8001f0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f12:	81a3      	strh	r3, [r4, #12]
 8001f14:	4632      	mov	r2, r6
 8001f16:	463b      	mov	r3, r7
 8001f18:	4628      	mov	r0, r5
 8001f1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001f1e:	f000 b869 	b.w	8001ff4 <_write_r>

08001f22 <__sseek>:
 8001f22:	b510      	push	{r4, lr}
 8001f24:	460c      	mov	r4, r1
 8001f26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f2a:	f000 f9b5 	bl	8002298 <_lseek_r>
 8001f2e:	1c43      	adds	r3, r0, #1
 8001f30:	89a3      	ldrh	r3, [r4, #12]
 8001f32:	bf15      	itete	ne
 8001f34:	6560      	strne	r0, [r4, #84]	; 0x54
 8001f36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001f3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001f3e:	81a3      	strheq	r3, [r4, #12]
 8001f40:	bf18      	it	ne
 8001f42:	81a3      	strhne	r3, [r4, #12]
 8001f44:	bd10      	pop	{r4, pc}

08001f46 <__sclose>:
 8001f46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f4a:	f000 b8d3 	b.w	80020f4 <_close_r>
	...

08001f50 <__swbuf_r>:
 8001f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f52:	460e      	mov	r6, r1
 8001f54:	4614      	mov	r4, r2
 8001f56:	4605      	mov	r5, r0
 8001f58:	b118      	cbz	r0, 8001f62 <__swbuf_r+0x12>
 8001f5a:	6983      	ldr	r3, [r0, #24]
 8001f5c:	b90b      	cbnz	r3, 8001f62 <__swbuf_r+0x12>
 8001f5e:	f7ff fbbb 	bl	80016d8 <__sinit>
 8001f62:	4b21      	ldr	r3, [pc, #132]	; (8001fe8 <__swbuf_r+0x98>)
 8001f64:	429c      	cmp	r4, r3
 8001f66:	d12b      	bne.n	8001fc0 <__swbuf_r+0x70>
 8001f68:	686c      	ldr	r4, [r5, #4]
 8001f6a:	69a3      	ldr	r3, [r4, #24]
 8001f6c:	60a3      	str	r3, [r4, #8]
 8001f6e:	89a3      	ldrh	r3, [r4, #12]
 8001f70:	071a      	lsls	r2, r3, #28
 8001f72:	d52f      	bpl.n	8001fd4 <__swbuf_r+0x84>
 8001f74:	6923      	ldr	r3, [r4, #16]
 8001f76:	b36b      	cbz	r3, 8001fd4 <__swbuf_r+0x84>
 8001f78:	6923      	ldr	r3, [r4, #16]
 8001f7a:	6820      	ldr	r0, [r4, #0]
 8001f7c:	1ac0      	subs	r0, r0, r3
 8001f7e:	6963      	ldr	r3, [r4, #20]
 8001f80:	b2f6      	uxtb	r6, r6
 8001f82:	4283      	cmp	r3, r0
 8001f84:	4637      	mov	r7, r6
 8001f86:	dc04      	bgt.n	8001f92 <__swbuf_r+0x42>
 8001f88:	4621      	mov	r1, r4
 8001f8a:	4628      	mov	r0, r5
 8001f8c:	f000 f948 	bl	8002220 <_fflush_r>
 8001f90:	bb30      	cbnz	r0, 8001fe0 <__swbuf_r+0x90>
 8001f92:	68a3      	ldr	r3, [r4, #8]
 8001f94:	3b01      	subs	r3, #1
 8001f96:	60a3      	str	r3, [r4, #8]
 8001f98:	6823      	ldr	r3, [r4, #0]
 8001f9a:	1c5a      	adds	r2, r3, #1
 8001f9c:	6022      	str	r2, [r4, #0]
 8001f9e:	701e      	strb	r6, [r3, #0]
 8001fa0:	6963      	ldr	r3, [r4, #20]
 8001fa2:	3001      	adds	r0, #1
 8001fa4:	4283      	cmp	r3, r0
 8001fa6:	d004      	beq.n	8001fb2 <__swbuf_r+0x62>
 8001fa8:	89a3      	ldrh	r3, [r4, #12]
 8001faa:	07db      	lsls	r3, r3, #31
 8001fac:	d506      	bpl.n	8001fbc <__swbuf_r+0x6c>
 8001fae:	2e0a      	cmp	r6, #10
 8001fb0:	d104      	bne.n	8001fbc <__swbuf_r+0x6c>
 8001fb2:	4621      	mov	r1, r4
 8001fb4:	4628      	mov	r0, r5
 8001fb6:	f000 f933 	bl	8002220 <_fflush_r>
 8001fba:	b988      	cbnz	r0, 8001fe0 <__swbuf_r+0x90>
 8001fbc:	4638      	mov	r0, r7
 8001fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fc0:	4b0a      	ldr	r3, [pc, #40]	; (8001fec <__swbuf_r+0x9c>)
 8001fc2:	429c      	cmp	r4, r3
 8001fc4:	d101      	bne.n	8001fca <__swbuf_r+0x7a>
 8001fc6:	68ac      	ldr	r4, [r5, #8]
 8001fc8:	e7cf      	b.n	8001f6a <__swbuf_r+0x1a>
 8001fca:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <__swbuf_r+0xa0>)
 8001fcc:	429c      	cmp	r4, r3
 8001fce:	bf08      	it	eq
 8001fd0:	68ec      	ldreq	r4, [r5, #12]
 8001fd2:	e7ca      	b.n	8001f6a <__swbuf_r+0x1a>
 8001fd4:	4621      	mov	r1, r4
 8001fd6:	4628      	mov	r0, r5
 8001fd8:	f000 f81e 	bl	8002018 <__swsetup_r>
 8001fdc:	2800      	cmp	r0, #0
 8001fde:	d0cb      	beq.n	8001f78 <__swbuf_r+0x28>
 8001fe0:	f04f 37ff 	mov.w	r7, #4294967295
 8001fe4:	e7ea      	b.n	8001fbc <__swbuf_r+0x6c>
 8001fe6:	bf00      	nop
 8001fe8:	0800282c 	.word	0x0800282c
 8001fec:	0800284c 	.word	0x0800284c
 8001ff0:	0800280c 	.word	0x0800280c

08001ff4 <_write_r>:
 8001ff4:	b538      	push	{r3, r4, r5, lr}
 8001ff6:	4d07      	ldr	r5, [pc, #28]	; (8002014 <_write_r+0x20>)
 8001ff8:	4604      	mov	r4, r0
 8001ffa:	4608      	mov	r0, r1
 8001ffc:	4611      	mov	r1, r2
 8001ffe:	2200      	movs	r2, #0
 8002000:	602a      	str	r2, [r5, #0]
 8002002:	461a      	mov	r2, r3
 8002004:	f7ff f9e7 	bl	80013d6 <_write>
 8002008:	1c43      	adds	r3, r0, #1
 800200a:	d102      	bne.n	8002012 <_write_r+0x1e>
 800200c:	682b      	ldr	r3, [r5, #0]
 800200e:	b103      	cbz	r3, 8002012 <_write_r+0x1e>
 8002010:	6023      	str	r3, [r4, #0]
 8002012:	bd38      	pop	{r3, r4, r5, pc}
 8002014:	2000074c 	.word	0x2000074c

08002018 <__swsetup_r>:
 8002018:	4b32      	ldr	r3, [pc, #200]	; (80020e4 <__swsetup_r+0xcc>)
 800201a:	b570      	push	{r4, r5, r6, lr}
 800201c:	681d      	ldr	r5, [r3, #0]
 800201e:	4606      	mov	r6, r0
 8002020:	460c      	mov	r4, r1
 8002022:	b125      	cbz	r5, 800202e <__swsetup_r+0x16>
 8002024:	69ab      	ldr	r3, [r5, #24]
 8002026:	b913      	cbnz	r3, 800202e <__swsetup_r+0x16>
 8002028:	4628      	mov	r0, r5
 800202a:	f7ff fb55 	bl	80016d8 <__sinit>
 800202e:	4b2e      	ldr	r3, [pc, #184]	; (80020e8 <__swsetup_r+0xd0>)
 8002030:	429c      	cmp	r4, r3
 8002032:	d10f      	bne.n	8002054 <__swsetup_r+0x3c>
 8002034:	686c      	ldr	r4, [r5, #4]
 8002036:	89a3      	ldrh	r3, [r4, #12]
 8002038:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800203c:	0719      	lsls	r1, r3, #28
 800203e:	d42c      	bmi.n	800209a <__swsetup_r+0x82>
 8002040:	06dd      	lsls	r5, r3, #27
 8002042:	d411      	bmi.n	8002068 <__swsetup_r+0x50>
 8002044:	2309      	movs	r3, #9
 8002046:	6033      	str	r3, [r6, #0]
 8002048:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800204c:	81a3      	strh	r3, [r4, #12]
 800204e:	f04f 30ff 	mov.w	r0, #4294967295
 8002052:	e03e      	b.n	80020d2 <__swsetup_r+0xba>
 8002054:	4b25      	ldr	r3, [pc, #148]	; (80020ec <__swsetup_r+0xd4>)
 8002056:	429c      	cmp	r4, r3
 8002058:	d101      	bne.n	800205e <__swsetup_r+0x46>
 800205a:	68ac      	ldr	r4, [r5, #8]
 800205c:	e7eb      	b.n	8002036 <__swsetup_r+0x1e>
 800205e:	4b24      	ldr	r3, [pc, #144]	; (80020f0 <__swsetup_r+0xd8>)
 8002060:	429c      	cmp	r4, r3
 8002062:	bf08      	it	eq
 8002064:	68ec      	ldreq	r4, [r5, #12]
 8002066:	e7e6      	b.n	8002036 <__swsetup_r+0x1e>
 8002068:	0758      	lsls	r0, r3, #29
 800206a:	d512      	bpl.n	8002092 <__swsetup_r+0x7a>
 800206c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800206e:	b141      	cbz	r1, 8002082 <__swsetup_r+0x6a>
 8002070:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002074:	4299      	cmp	r1, r3
 8002076:	d002      	beq.n	800207e <__swsetup_r+0x66>
 8002078:	4630      	mov	r0, r6
 800207a:	f000 f98f 	bl	800239c <_free_r>
 800207e:	2300      	movs	r3, #0
 8002080:	6363      	str	r3, [r4, #52]	; 0x34
 8002082:	89a3      	ldrh	r3, [r4, #12]
 8002084:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002088:	81a3      	strh	r3, [r4, #12]
 800208a:	2300      	movs	r3, #0
 800208c:	6063      	str	r3, [r4, #4]
 800208e:	6923      	ldr	r3, [r4, #16]
 8002090:	6023      	str	r3, [r4, #0]
 8002092:	89a3      	ldrh	r3, [r4, #12]
 8002094:	f043 0308 	orr.w	r3, r3, #8
 8002098:	81a3      	strh	r3, [r4, #12]
 800209a:	6923      	ldr	r3, [r4, #16]
 800209c:	b94b      	cbnz	r3, 80020b2 <__swsetup_r+0x9a>
 800209e:	89a3      	ldrh	r3, [r4, #12]
 80020a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80020a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020a8:	d003      	beq.n	80020b2 <__swsetup_r+0x9a>
 80020aa:	4621      	mov	r1, r4
 80020ac:	4630      	mov	r0, r6
 80020ae:	f000 f929 	bl	8002304 <__smakebuf_r>
 80020b2:	89a0      	ldrh	r0, [r4, #12]
 80020b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80020b8:	f010 0301 	ands.w	r3, r0, #1
 80020bc:	d00a      	beq.n	80020d4 <__swsetup_r+0xbc>
 80020be:	2300      	movs	r3, #0
 80020c0:	60a3      	str	r3, [r4, #8]
 80020c2:	6963      	ldr	r3, [r4, #20]
 80020c4:	425b      	negs	r3, r3
 80020c6:	61a3      	str	r3, [r4, #24]
 80020c8:	6923      	ldr	r3, [r4, #16]
 80020ca:	b943      	cbnz	r3, 80020de <__swsetup_r+0xc6>
 80020cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80020d0:	d1ba      	bne.n	8002048 <__swsetup_r+0x30>
 80020d2:	bd70      	pop	{r4, r5, r6, pc}
 80020d4:	0781      	lsls	r1, r0, #30
 80020d6:	bf58      	it	pl
 80020d8:	6963      	ldrpl	r3, [r4, #20]
 80020da:	60a3      	str	r3, [r4, #8]
 80020dc:	e7f4      	b.n	80020c8 <__swsetup_r+0xb0>
 80020de:	2000      	movs	r0, #0
 80020e0:	e7f7      	b.n	80020d2 <__swsetup_r+0xba>
 80020e2:	bf00      	nop
 80020e4:	2000002c 	.word	0x2000002c
 80020e8:	0800282c 	.word	0x0800282c
 80020ec:	0800284c 	.word	0x0800284c
 80020f0:	0800280c 	.word	0x0800280c

080020f4 <_close_r>:
 80020f4:	b538      	push	{r3, r4, r5, lr}
 80020f6:	4d06      	ldr	r5, [pc, #24]	; (8002110 <_close_r+0x1c>)
 80020f8:	2300      	movs	r3, #0
 80020fa:	4604      	mov	r4, r0
 80020fc:	4608      	mov	r0, r1
 80020fe:	602b      	str	r3, [r5, #0]
 8002100:	f7ff f985 	bl	800140e <_close>
 8002104:	1c43      	adds	r3, r0, #1
 8002106:	d102      	bne.n	800210e <_close_r+0x1a>
 8002108:	682b      	ldr	r3, [r5, #0]
 800210a:	b103      	cbz	r3, 800210e <_close_r+0x1a>
 800210c:	6023      	str	r3, [r4, #0]
 800210e:	bd38      	pop	{r3, r4, r5, pc}
 8002110:	2000074c 	.word	0x2000074c

08002114 <__sflush_r>:
 8002114:	898a      	ldrh	r2, [r1, #12]
 8002116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800211a:	4605      	mov	r5, r0
 800211c:	0710      	lsls	r0, r2, #28
 800211e:	460c      	mov	r4, r1
 8002120:	d458      	bmi.n	80021d4 <__sflush_r+0xc0>
 8002122:	684b      	ldr	r3, [r1, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	dc05      	bgt.n	8002134 <__sflush_r+0x20>
 8002128:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800212a:	2b00      	cmp	r3, #0
 800212c:	dc02      	bgt.n	8002134 <__sflush_r+0x20>
 800212e:	2000      	movs	r0, #0
 8002130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002134:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002136:	2e00      	cmp	r6, #0
 8002138:	d0f9      	beq.n	800212e <__sflush_r+0x1a>
 800213a:	2300      	movs	r3, #0
 800213c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002140:	682f      	ldr	r7, [r5, #0]
 8002142:	602b      	str	r3, [r5, #0]
 8002144:	d032      	beq.n	80021ac <__sflush_r+0x98>
 8002146:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002148:	89a3      	ldrh	r3, [r4, #12]
 800214a:	075a      	lsls	r2, r3, #29
 800214c:	d505      	bpl.n	800215a <__sflush_r+0x46>
 800214e:	6863      	ldr	r3, [r4, #4]
 8002150:	1ac0      	subs	r0, r0, r3
 8002152:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002154:	b10b      	cbz	r3, 800215a <__sflush_r+0x46>
 8002156:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002158:	1ac0      	subs	r0, r0, r3
 800215a:	2300      	movs	r3, #0
 800215c:	4602      	mov	r2, r0
 800215e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002160:	6a21      	ldr	r1, [r4, #32]
 8002162:	4628      	mov	r0, r5
 8002164:	47b0      	blx	r6
 8002166:	1c43      	adds	r3, r0, #1
 8002168:	89a3      	ldrh	r3, [r4, #12]
 800216a:	d106      	bne.n	800217a <__sflush_r+0x66>
 800216c:	6829      	ldr	r1, [r5, #0]
 800216e:	291d      	cmp	r1, #29
 8002170:	d82c      	bhi.n	80021cc <__sflush_r+0xb8>
 8002172:	4a2a      	ldr	r2, [pc, #168]	; (800221c <__sflush_r+0x108>)
 8002174:	40ca      	lsrs	r2, r1
 8002176:	07d6      	lsls	r6, r2, #31
 8002178:	d528      	bpl.n	80021cc <__sflush_r+0xb8>
 800217a:	2200      	movs	r2, #0
 800217c:	6062      	str	r2, [r4, #4]
 800217e:	04d9      	lsls	r1, r3, #19
 8002180:	6922      	ldr	r2, [r4, #16]
 8002182:	6022      	str	r2, [r4, #0]
 8002184:	d504      	bpl.n	8002190 <__sflush_r+0x7c>
 8002186:	1c42      	adds	r2, r0, #1
 8002188:	d101      	bne.n	800218e <__sflush_r+0x7a>
 800218a:	682b      	ldr	r3, [r5, #0]
 800218c:	b903      	cbnz	r3, 8002190 <__sflush_r+0x7c>
 800218e:	6560      	str	r0, [r4, #84]	; 0x54
 8002190:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002192:	602f      	str	r7, [r5, #0]
 8002194:	2900      	cmp	r1, #0
 8002196:	d0ca      	beq.n	800212e <__sflush_r+0x1a>
 8002198:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800219c:	4299      	cmp	r1, r3
 800219e:	d002      	beq.n	80021a6 <__sflush_r+0x92>
 80021a0:	4628      	mov	r0, r5
 80021a2:	f000 f8fb 	bl	800239c <_free_r>
 80021a6:	2000      	movs	r0, #0
 80021a8:	6360      	str	r0, [r4, #52]	; 0x34
 80021aa:	e7c1      	b.n	8002130 <__sflush_r+0x1c>
 80021ac:	6a21      	ldr	r1, [r4, #32]
 80021ae:	2301      	movs	r3, #1
 80021b0:	4628      	mov	r0, r5
 80021b2:	47b0      	blx	r6
 80021b4:	1c41      	adds	r1, r0, #1
 80021b6:	d1c7      	bne.n	8002148 <__sflush_r+0x34>
 80021b8:	682b      	ldr	r3, [r5, #0]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0c4      	beq.n	8002148 <__sflush_r+0x34>
 80021be:	2b1d      	cmp	r3, #29
 80021c0:	d001      	beq.n	80021c6 <__sflush_r+0xb2>
 80021c2:	2b16      	cmp	r3, #22
 80021c4:	d101      	bne.n	80021ca <__sflush_r+0xb6>
 80021c6:	602f      	str	r7, [r5, #0]
 80021c8:	e7b1      	b.n	800212e <__sflush_r+0x1a>
 80021ca:	89a3      	ldrh	r3, [r4, #12]
 80021cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021d0:	81a3      	strh	r3, [r4, #12]
 80021d2:	e7ad      	b.n	8002130 <__sflush_r+0x1c>
 80021d4:	690f      	ldr	r7, [r1, #16]
 80021d6:	2f00      	cmp	r7, #0
 80021d8:	d0a9      	beq.n	800212e <__sflush_r+0x1a>
 80021da:	0793      	lsls	r3, r2, #30
 80021dc:	680e      	ldr	r6, [r1, #0]
 80021de:	bf08      	it	eq
 80021e0:	694b      	ldreq	r3, [r1, #20]
 80021e2:	600f      	str	r7, [r1, #0]
 80021e4:	bf18      	it	ne
 80021e6:	2300      	movne	r3, #0
 80021e8:	eba6 0807 	sub.w	r8, r6, r7
 80021ec:	608b      	str	r3, [r1, #8]
 80021ee:	f1b8 0f00 	cmp.w	r8, #0
 80021f2:	dd9c      	ble.n	800212e <__sflush_r+0x1a>
 80021f4:	6a21      	ldr	r1, [r4, #32]
 80021f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80021f8:	4643      	mov	r3, r8
 80021fa:	463a      	mov	r2, r7
 80021fc:	4628      	mov	r0, r5
 80021fe:	47b0      	blx	r6
 8002200:	2800      	cmp	r0, #0
 8002202:	dc06      	bgt.n	8002212 <__sflush_r+0xfe>
 8002204:	89a3      	ldrh	r3, [r4, #12]
 8002206:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800220a:	81a3      	strh	r3, [r4, #12]
 800220c:	f04f 30ff 	mov.w	r0, #4294967295
 8002210:	e78e      	b.n	8002130 <__sflush_r+0x1c>
 8002212:	4407      	add	r7, r0
 8002214:	eba8 0800 	sub.w	r8, r8, r0
 8002218:	e7e9      	b.n	80021ee <__sflush_r+0xda>
 800221a:	bf00      	nop
 800221c:	20400001 	.word	0x20400001

08002220 <_fflush_r>:
 8002220:	b538      	push	{r3, r4, r5, lr}
 8002222:	690b      	ldr	r3, [r1, #16]
 8002224:	4605      	mov	r5, r0
 8002226:	460c      	mov	r4, r1
 8002228:	b913      	cbnz	r3, 8002230 <_fflush_r+0x10>
 800222a:	2500      	movs	r5, #0
 800222c:	4628      	mov	r0, r5
 800222e:	bd38      	pop	{r3, r4, r5, pc}
 8002230:	b118      	cbz	r0, 800223a <_fflush_r+0x1a>
 8002232:	6983      	ldr	r3, [r0, #24]
 8002234:	b90b      	cbnz	r3, 800223a <_fflush_r+0x1a>
 8002236:	f7ff fa4f 	bl	80016d8 <__sinit>
 800223a:	4b14      	ldr	r3, [pc, #80]	; (800228c <_fflush_r+0x6c>)
 800223c:	429c      	cmp	r4, r3
 800223e:	d11b      	bne.n	8002278 <_fflush_r+0x58>
 8002240:	686c      	ldr	r4, [r5, #4]
 8002242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0ef      	beq.n	800222a <_fflush_r+0xa>
 800224a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800224c:	07d0      	lsls	r0, r2, #31
 800224e:	d404      	bmi.n	800225a <_fflush_r+0x3a>
 8002250:	0599      	lsls	r1, r3, #22
 8002252:	d402      	bmi.n	800225a <_fflush_r+0x3a>
 8002254:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002256:	f7ff fadd 	bl	8001814 <__retarget_lock_acquire_recursive>
 800225a:	4628      	mov	r0, r5
 800225c:	4621      	mov	r1, r4
 800225e:	f7ff ff59 	bl	8002114 <__sflush_r>
 8002262:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002264:	07da      	lsls	r2, r3, #31
 8002266:	4605      	mov	r5, r0
 8002268:	d4e0      	bmi.n	800222c <_fflush_r+0xc>
 800226a:	89a3      	ldrh	r3, [r4, #12]
 800226c:	059b      	lsls	r3, r3, #22
 800226e:	d4dd      	bmi.n	800222c <_fflush_r+0xc>
 8002270:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002272:	f7ff fad0 	bl	8001816 <__retarget_lock_release_recursive>
 8002276:	e7d9      	b.n	800222c <_fflush_r+0xc>
 8002278:	4b05      	ldr	r3, [pc, #20]	; (8002290 <_fflush_r+0x70>)
 800227a:	429c      	cmp	r4, r3
 800227c:	d101      	bne.n	8002282 <_fflush_r+0x62>
 800227e:	68ac      	ldr	r4, [r5, #8]
 8002280:	e7df      	b.n	8002242 <_fflush_r+0x22>
 8002282:	4b04      	ldr	r3, [pc, #16]	; (8002294 <_fflush_r+0x74>)
 8002284:	429c      	cmp	r4, r3
 8002286:	bf08      	it	eq
 8002288:	68ec      	ldreq	r4, [r5, #12]
 800228a:	e7da      	b.n	8002242 <_fflush_r+0x22>
 800228c:	0800282c 	.word	0x0800282c
 8002290:	0800284c 	.word	0x0800284c
 8002294:	0800280c 	.word	0x0800280c

08002298 <_lseek_r>:
 8002298:	b538      	push	{r3, r4, r5, lr}
 800229a:	4d07      	ldr	r5, [pc, #28]	; (80022b8 <_lseek_r+0x20>)
 800229c:	4604      	mov	r4, r0
 800229e:	4608      	mov	r0, r1
 80022a0:	4611      	mov	r1, r2
 80022a2:	2200      	movs	r2, #0
 80022a4:	602a      	str	r2, [r5, #0]
 80022a6:	461a      	mov	r2, r3
 80022a8:	f7ff f8d8 	bl	800145c <_lseek>
 80022ac:	1c43      	adds	r3, r0, #1
 80022ae:	d102      	bne.n	80022b6 <_lseek_r+0x1e>
 80022b0:	682b      	ldr	r3, [r5, #0]
 80022b2:	b103      	cbz	r3, 80022b6 <_lseek_r+0x1e>
 80022b4:	6023      	str	r3, [r4, #0]
 80022b6:	bd38      	pop	{r3, r4, r5, pc}
 80022b8:	2000074c 	.word	0x2000074c

080022bc <__swhatbuf_r>:
 80022bc:	b570      	push	{r4, r5, r6, lr}
 80022be:	460e      	mov	r6, r1
 80022c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022c4:	2900      	cmp	r1, #0
 80022c6:	b096      	sub	sp, #88	; 0x58
 80022c8:	4614      	mov	r4, r2
 80022ca:	461d      	mov	r5, r3
 80022cc:	da07      	bge.n	80022de <__swhatbuf_r+0x22>
 80022ce:	2300      	movs	r3, #0
 80022d0:	602b      	str	r3, [r5, #0]
 80022d2:	89b3      	ldrh	r3, [r6, #12]
 80022d4:	061a      	lsls	r2, r3, #24
 80022d6:	d410      	bmi.n	80022fa <__swhatbuf_r+0x3e>
 80022d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022dc:	e00e      	b.n	80022fc <__swhatbuf_r+0x40>
 80022de:	466a      	mov	r2, sp
 80022e0:	f000 f8be 	bl	8002460 <_fstat_r>
 80022e4:	2800      	cmp	r0, #0
 80022e6:	dbf2      	blt.n	80022ce <__swhatbuf_r+0x12>
 80022e8:	9a01      	ldr	r2, [sp, #4]
 80022ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80022ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80022f2:	425a      	negs	r2, r3
 80022f4:	415a      	adcs	r2, r3
 80022f6:	602a      	str	r2, [r5, #0]
 80022f8:	e7ee      	b.n	80022d8 <__swhatbuf_r+0x1c>
 80022fa:	2340      	movs	r3, #64	; 0x40
 80022fc:	2000      	movs	r0, #0
 80022fe:	6023      	str	r3, [r4, #0]
 8002300:	b016      	add	sp, #88	; 0x58
 8002302:	bd70      	pop	{r4, r5, r6, pc}

08002304 <__smakebuf_r>:
 8002304:	898b      	ldrh	r3, [r1, #12]
 8002306:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002308:	079d      	lsls	r5, r3, #30
 800230a:	4606      	mov	r6, r0
 800230c:	460c      	mov	r4, r1
 800230e:	d507      	bpl.n	8002320 <__smakebuf_r+0x1c>
 8002310:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002314:	6023      	str	r3, [r4, #0]
 8002316:	6123      	str	r3, [r4, #16]
 8002318:	2301      	movs	r3, #1
 800231a:	6163      	str	r3, [r4, #20]
 800231c:	b002      	add	sp, #8
 800231e:	bd70      	pop	{r4, r5, r6, pc}
 8002320:	ab01      	add	r3, sp, #4
 8002322:	466a      	mov	r2, sp
 8002324:	f7ff ffca 	bl	80022bc <__swhatbuf_r>
 8002328:	9900      	ldr	r1, [sp, #0]
 800232a:	4605      	mov	r5, r0
 800232c:	4630      	mov	r0, r6
 800232e:	f7ff fa73 	bl	8001818 <_malloc_r>
 8002332:	b948      	cbnz	r0, 8002348 <__smakebuf_r+0x44>
 8002334:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002338:	059a      	lsls	r2, r3, #22
 800233a:	d4ef      	bmi.n	800231c <__smakebuf_r+0x18>
 800233c:	f023 0303 	bic.w	r3, r3, #3
 8002340:	f043 0302 	orr.w	r3, r3, #2
 8002344:	81a3      	strh	r3, [r4, #12]
 8002346:	e7e3      	b.n	8002310 <__smakebuf_r+0xc>
 8002348:	4b0d      	ldr	r3, [pc, #52]	; (8002380 <__smakebuf_r+0x7c>)
 800234a:	62b3      	str	r3, [r6, #40]	; 0x28
 800234c:	89a3      	ldrh	r3, [r4, #12]
 800234e:	6020      	str	r0, [r4, #0]
 8002350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002354:	81a3      	strh	r3, [r4, #12]
 8002356:	9b00      	ldr	r3, [sp, #0]
 8002358:	6163      	str	r3, [r4, #20]
 800235a:	9b01      	ldr	r3, [sp, #4]
 800235c:	6120      	str	r0, [r4, #16]
 800235e:	b15b      	cbz	r3, 8002378 <__smakebuf_r+0x74>
 8002360:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002364:	4630      	mov	r0, r6
 8002366:	f000 f88d 	bl	8002484 <_isatty_r>
 800236a:	b128      	cbz	r0, 8002378 <__smakebuf_r+0x74>
 800236c:	89a3      	ldrh	r3, [r4, #12]
 800236e:	f023 0303 	bic.w	r3, r3, #3
 8002372:	f043 0301 	orr.w	r3, r3, #1
 8002376:	81a3      	strh	r3, [r4, #12]
 8002378:	89a0      	ldrh	r0, [r4, #12]
 800237a:	4305      	orrs	r5, r0
 800237c:	81a5      	strh	r5, [r4, #12]
 800237e:	e7cd      	b.n	800231c <__smakebuf_r+0x18>
 8002380:	08001671 	.word	0x08001671

08002384 <__malloc_lock>:
 8002384:	4801      	ldr	r0, [pc, #4]	; (800238c <__malloc_lock+0x8>)
 8002386:	f7ff ba45 	b.w	8001814 <__retarget_lock_acquire_recursive>
 800238a:	bf00      	nop
 800238c:	20000744 	.word	0x20000744

08002390 <__malloc_unlock>:
 8002390:	4801      	ldr	r0, [pc, #4]	; (8002398 <__malloc_unlock+0x8>)
 8002392:	f7ff ba40 	b.w	8001816 <__retarget_lock_release_recursive>
 8002396:	bf00      	nop
 8002398:	20000744 	.word	0x20000744

0800239c <_free_r>:
 800239c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800239e:	2900      	cmp	r1, #0
 80023a0:	d048      	beq.n	8002434 <_free_r+0x98>
 80023a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80023a6:	9001      	str	r0, [sp, #4]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f1a1 0404 	sub.w	r4, r1, #4
 80023ae:	bfb8      	it	lt
 80023b0:	18e4      	addlt	r4, r4, r3
 80023b2:	f7ff ffe7 	bl	8002384 <__malloc_lock>
 80023b6:	4a20      	ldr	r2, [pc, #128]	; (8002438 <_free_r+0x9c>)
 80023b8:	9801      	ldr	r0, [sp, #4]
 80023ba:	6813      	ldr	r3, [r2, #0]
 80023bc:	4615      	mov	r5, r2
 80023be:	b933      	cbnz	r3, 80023ce <_free_r+0x32>
 80023c0:	6063      	str	r3, [r4, #4]
 80023c2:	6014      	str	r4, [r2, #0]
 80023c4:	b003      	add	sp, #12
 80023c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80023ca:	f7ff bfe1 	b.w	8002390 <__malloc_unlock>
 80023ce:	42a3      	cmp	r3, r4
 80023d0:	d90b      	bls.n	80023ea <_free_r+0x4e>
 80023d2:	6821      	ldr	r1, [r4, #0]
 80023d4:	1862      	adds	r2, r4, r1
 80023d6:	4293      	cmp	r3, r2
 80023d8:	bf04      	itt	eq
 80023da:	681a      	ldreq	r2, [r3, #0]
 80023dc:	685b      	ldreq	r3, [r3, #4]
 80023de:	6063      	str	r3, [r4, #4]
 80023e0:	bf04      	itt	eq
 80023e2:	1852      	addeq	r2, r2, r1
 80023e4:	6022      	streq	r2, [r4, #0]
 80023e6:	602c      	str	r4, [r5, #0]
 80023e8:	e7ec      	b.n	80023c4 <_free_r+0x28>
 80023ea:	461a      	mov	r2, r3
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	b10b      	cbz	r3, 80023f4 <_free_r+0x58>
 80023f0:	42a3      	cmp	r3, r4
 80023f2:	d9fa      	bls.n	80023ea <_free_r+0x4e>
 80023f4:	6811      	ldr	r1, [r2, #0]
 80023f6:	1855      	adds	r5, r2, r1
 80023f8:	42a5      	cmp	r5, r4
 80023fa:	d10b      	bne.n	8002414 <_free_r+0x78>
 80023fc:	6824      	ldr	r4, [r4, #0]
 80023fe:	4421      	add	r1, r4
 8002400:	1854      	adds	r4, r2, r1
 8002402:	42a3      	cmp	r3, r4
 8002404:	6011      	str	r1, [r2, #0]
 8002406:	d1dd      	bne.n	80023c4 <_free_r+0x28>
 8002408:	681c      	ldr	r4, [r3, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	6053      	str	r3, [r2, #4]
 800240e:	4421      	add	r1, r4
 8002410:	6011      	str	r1, [r2, #0]
 8002412:	e7d7      	b.n	80023c4 <_free_r+0x28>
 8002414:	d902      	bls.n	800241c <_free_r+0x80>
 8002416:	230c      	movs	r3, #12
 8002418:	6003      	str	r3, [r0, #0]
 800241a:	e7d3      	b.n	80023c4 <_free_r+0x28>
 800241c:	6825      	ldr	r5, [r4, #0]
 800241e:	1961      	adds	r1, r4, r5
 8002420:	428b      	cmp	r3, r1
 8002422:	bf04      	itt	eq
 8002424:	6819      	ldreq	r1, [r3, #0]
 8002426:	685b      	ldreq	r3, [r3, #4]
 8002428:	6063      	str	r3, [r4, #4]
 800242a:	bf04      	itt	eq
 800242c:	1949      	addeq	r1, r1, r5
 800242e:	6021      	streq	r1, [r4, #0]
 8002430:	6054      	str	r4, [r2, #4]
 8002432:	e7c7      	b.n	80023c4 <_free_r+0x28>
 8002434:	b003      	add	sp, #12
 8002436:	bd30      	pop	{r4, r5, pc}
 8002438:	200005dc 	.word	0x200005dc

0800243c <_read_r>:
 800243c:	b538      	push	{r3, r4, r5, lr}
 800243e:	4d07      	ldr	r5, [pc, #28]	; (800245c <_read_r+0x20>)
 8002440:	4604      	mov	r4, r0
 8002442:	4608      	mov	r0, r1
 8002444:	4611      	mov	r1, r2
 8002446:	2200      	movs	r2, #0
 8002448:	602a      	str	r2, [r5, #0]
 800244a:	461a      	mov	r2, r3
 800244c:	f7fe ffa6 	bl	800139c <_read>
 8002450:	1c43      	adds	r3, r0, #1
 8002452:	d102      	bne.n	800245a <_read_r+0x1e>
 8002454:	682b      	ldr	r3, [r5, #0]
 8002456:	b103      	cbz	r3, 800245a <_read_r+0x1e>
 8002458:	6023      	str	r3, [r4, #0]
 800245a:	bd38      	pop	{r3, r4, r5, pc}
 800245c:	2000074c 	.word	0x2000074c

08002460 <_fstat_r>:
 8002460:	b538      	push	{r3, r4, r5, lr}
 8002462:	4d07      	ldr	r5, [pc, #28]	; (8002480 <_fstat_r+0x20>)
 8002464:	2300      	movs	r3, #0
 8002466:	4604      	mov	r4, r0
 8002468:	4608      	mov	r0, r1
 800246a:	4611      	mov	r1, r2
 800246c:	602b      	str	r3, [r5, #0]
 800246e:	f7fe ffda 	bl	8001426 <_fstat>
 8002472:	1c43      	adds	r3, r0, #1
 8002474:	d102      	bne.n	800247c <_fstat_r+0x1c>
 8002476:	682b      	ldr	r3, [r5, #0]
 8002478:	b103      	cbz	r3, 800247c <_fstat_r+0x1c>
 800247a:	6023      	str	r3, [r4, #0]
 800247c:	bd38      	pop	{r3, r4, r5, pc}
 800247e:	bf00      	nop
 8002480:	2000074c 	.word	0x2000074c

08002484 <_isatty_r>:
 8002484:	b538      	push	{r3, r4, r5, lr}
 8002486:	4d06      	ldr	r5, [pc, #24]	; (80024a0 <_isatty_r+0x1c>)
 8002488:	2300      	movs	r3, #0
 800248a:	4604      	mov	r4, r0
 800248c:	4608      	mov	r0, r1
 800248e:	602b      	str	r3, [r5, #0]
 8002490:	f7fe ffd9 	bl	8001446 <_isatty>
 8002494:	1c43      	adds	r3, r0, #1
 8002496:	d102      	bne.n	800249e <_isatty_r+0x1a>
 8002498:	682b      	ldr	r3, [r5, #0]
 800249a:	b103      	cbz	r3, 800249e <_isatty_r+0x1a>
 800249c:	6023      	str	r3, [r4, #0]
 800249e:	bd38      	pop	{r3, r4, r5, pc}
 80024a0:	2000074c 	.word	0x2000074c

080024a4 <_init>:
 80024a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024a6:	bf00      	nop
 80024a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024aa:	bc08      	pop	{r3}
 80024ac:	469e      	mov	lr, r3
 80024ae:	4770      	bx	lr

080024b0 <_fini>:
 80024b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024b2:	bf00      	nop
 80024b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024b6:	bc08      	pop	{r3}
 80024b8:	469e      	mov	lr, r3
 80024ba:	4770      	bx	lr
